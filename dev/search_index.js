var documenterSearchIndex = {"docs":
[{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/#Load-the-package","page":"Getting Started","title":"Load the package","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Load Whitebox.jl into your project with:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"import Whitebox as wbt","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Loading the package automatically configures your WhiteboxTools session by: ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Setting the working directory for WhiteboxTools to your current working directory (found with pwd())\nSetting the the path to the WhiteboxTools version that was installed with Whitebox.jl\nSetting up miscellaneous defaults such as the printing of results","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In other words, just load the package and you should be good to go! Read more about this in How it works.","category":"page"},{"location":"getting_started/#Find-tools","page":"Getting Started","title":"Find tools","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"WhiteboxTools contains approximately 485 tools that are organized into the following thematic toolboxes:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Data Tools\nGeomorphometric Analysis\nGIS Analysis\nHydrologic Analysis\nImage Analysis\nLiDAR Analysis\nMathematical and Statistical Analysis\nPrecision Agriculture\nStream Network Analysis","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Whitebox.jl provides a function to use each of the the tools provided by WhiteboxTools. Functions in Whitebox.jl use the snake_case convention for WhiteboxTools tool names. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"For example, to use the AbsoluteValue tool, you would use wbt.absolute_value(). ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"View the Whitebox.jl Reference section for a full list of available functions and documentation. ","category":"page"},{"location":"getting_started/#Run-tools","page":"Getting Started","title":"Run tools","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Function arguments for Whitebox.jl functions are keyword arguments, so the arguments must be included in the function call.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"For example, use: ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"wbt.absolute_value(i = \"DEM.tif\", output = \"abs_val.tif\") # This works! ðŸ’¯ ðŸŽ‰","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"rather than:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"wbt.absolute_value(\"DEM.tif\", \"abs_val.tif\") # <- This won't work! ðŸ‘Ž","category":"page"},{"location":"getting_started/#Function-help","page":"Getting Started","title":"Function help","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We have a few different ways to find the required arguments or documentation for a function:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Visit the WhiteboxTools user manual and look at the Python example for a function (those use snake_case too)\nRun wbt.tool_parameters(tool_name::String), or\nEnter help?> mode in the Julia REPL (Press ?), and search your function name","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#List-of-functions","page":"Reference","title":"List of functions","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/#Reference-2","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [Whitebox]","category":"page"},{"location":"reference/#Whitebox.And","page":"Reference","title":"Whitebox.And","text":"And(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a logical AND operator on two Boolean raster images.\n\nArguments\n\ninput1: Input raster file. \ninput2: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.Not","page":"Reference","title":"Whitebox.Not","text":"Not(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a logical NOT operator on two Boolean raster images.\n\nArguments\n\ninput1: Input raster file. \ninput2: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.Or","page":"Reference","title":"Whitebox.Or","text":"Or(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a logical OR operator on two Boolean raster images.\n\nArguments\n\ninput1: Input raster file. \ninput2: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.absolute_value","page":"Reference","title":"Whitebox.absolute_value","text":"absolute_value(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the absolute value of every cell in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.adaptive_filter","page":"Reference","title":"Whitebox.adaptive_filter","text":"adaptive_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, threshold=2.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms an adaptive filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \nthreshold: Difference from mean threshold, in standard deviations. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.add","page":"Reference","title":"Whitebox.add","text":"add(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms an addition operation on two rasters or a raster and a constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.add_point_coordinates_to_table","page":"Reference","title":"Whitebox.add_point_coordinates_to_table","text":"add_point_coordinates_to_table(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nModifies the attribute table of a point vector by adding fields containing each point's X and Y coordinates.\n\nArguments\n\ni: Input vector Points file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.aggregate_raster","page":"Reference","title":"Whitebox.aggregate_raster","text":"aggregate_raster(wbt_info::WhiteboxTools = wbt_info; i, output, agg_factor=2, type=\"mean\", callback::Union{Nothing,Function}=nothing)\n\nAggregates a raster to a lower resolution.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nagg_factor: Aggregation factor, in pixels. \ntype: Statistic used to fill output pixels. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.anova","page":"Reference","title":"Whitebox.anova","text":"anova(wbt_info::WhiteboxTools = wbt_info; i, features, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms an analysis of variance (ANOVA) test on a raster dataset.\n\nArguments\n\ni: Input raster file. \nfeatures: Feature definition (or class) raster. \noutput: Output HTML file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.arc_cos","page":"Reference","title":"Whitebox.arc_cos","text":"arc_cos(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the inverse cosine (arccos) of each values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.arc_sin","page":"Reference","title":"Whitebox.arc_sin","text":"arc_sin(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the inverse sine (arcsin) of each values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.arc_tan","page":"Reference","title":"Whitebox.arc_tan","text":"arc_tan(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the inverse tangent (arctan) of each values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.arcosh","page":"Reference","title":"Whitebox.arcosh","text":"arcosh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the inverse hyperbolic cosine (arcosh) of each values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.arsinh","page":"Reference","title":"Whitebox.arsinh","text":"arsinh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the inverse hyperbolic sine (arsinh) of each values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.artanh","page":"Reference","title":"Whitebox.artanh","text":"artanh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the inverse hyperbolic tangent (arctanh) of each values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.ascii_to_las","page":"Reference","title":"Whitebox.ascii_to_las","text":"ascii_to_las(wbt_info::WhiteboxTools = wbt_info; inputs, pattern, proj=nothing, callback::Union{Nothing,Function}=nothing)\n\nConverts one or more ASCII files containing LiDAR points into LAS files.\n\nArguments\n\ninputs: Input LiDAR  ASCII files (.csv). \npattern: Input field pattern. \nproj: Well-known-text string or EPSG code describing projection. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.aspect","page":"Reference","title":"Whitebox.aspect","text":"aspect(wbt_info::WhiteboxTools = wbt_info; dem, output, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates an aspect raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.atan2","page":"Reference","title":"Whitebox.atan2","text":"atan2(wbt_info::WhiteboxTools = wbt_info; input_y, input_x, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the 2-argument inverse tangent (atan2).\n\nArguments\n\ninput_y: Input y raster file or constant value (rise). \ninput_x: Input x raster file or constant value (run). \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.attribute_correlation","page":"Reference","title":"Whitebox.attribute_correlation","text":"attribute_correlation(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, callback::Union{Nothing,Function}=nothing)\n\nPerforms a correlation analysis on attribute fields from a vector database.\n\nArguments\n\ni: Input vector file. \noutput: Output HTML file (default name will be based on input file if unspecified). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.attribute_correlation_neighbourhood_analysis","page":"Reference","title":"Whitebox.attribute_correlation_neighbourhood_analysis","text":"attribute_correlation_neighbourhood_analysis(wbt_info::WhiteboxTools = wbt_info; i, field1, field2, radius=nothing, min_points=nothing, stat=\"pearson\", callback::Union{Nothing,Function}=nothing)\n\nPerforms a correlation on two input vector attributes within a neighbourhood search windows.\n\nArguments\n\ni: Input vector file. \nfield1: First input field name (dependent variable) in attribute table. \nfield2: Second input field name (independent variable) in attribute table. \nradius: Search Radius (in map units). \nmin_points: Minimum number of points. \nstat: Correlation type; one of 'pearson' (default) and 'spearman'. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.attribute_histogram","page":"Reference","title":"Whitebox.attribute_histogram","text":"attribute_histogram(wbt_info::WhiteboxTools = wbt_info; i, field, output, callback::Union{Nothing,Function}=nothing)\n\nCreates a histogram for the field values of a vector's attribute table.\n\nArguments\n\ni: Input raster file. \nfield: Input field name in attribute table. \noutput: Output HTML file (default name will be based on input file if unspecified). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.attribute_scattergram","page":"Reference","title":"Whitebox.attribute_scattergram","text":"attribute_scattergram(wbt_info::WhiteboxTools = wbt_info; i, fieldx, fieldy, output, trendline=false, callback::Union{Nothing,Function}=nothing)\n\nCreates a scattergram for two field values of a vector's attribute table.\n\nArguments\n\ni: Input raster file. \nfieldx: Input field name in attribute table for the x-axis. \nfieldy: Input field name in attribute table for the y-axis. \noutput: Output HTML file (default name will be based on input file if unspecified). \ntrendline: Draw the trendline. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.average_flowpath_slope","page":"Reference","title":"Whitebox.average_flowpath_slope","text":"average_flowpath_slope(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nMeasures the average slope gradient from each grid cell to all upslope divide cells.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.average_normal_vector_angular_deviation","page":"Reference","title":"Whitebox.average_normal_vector_angular_deviation","text":"average_normal_vector_angular_deviation(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, callback::Union{Nothing,Function}=nothing)\n\nCalculates the circular variance of aspect at a scale for a DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfilter: Size of the filter kernel. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.average_overlay","page":"Reference","title":"Whitebox.average_overlay","text":"average_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the average for each grid cell from a group of raster images.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.average_upslope_flowpath_length","page":"Reference","title":"Whitebox.average_upslope_flowpath_length","text":"average_upslope_flowpath_length(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nMeasures the average length of all upslope flowpaths draining each grid cell.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.balance_contrast_enhancement","page":"Reference","title":"Whitebox.balance_contrast_enhancement","text":"balance_contrast_enhancement(wbt_info::WhiteboxTools = wbt_info; i, output, band_mean=100.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a balance contrast enhancement on a colour-composite image of multispectral data.\n\nArguments\n\ni: Input colour composite image file. \noutput: Output raster file. \nband_mean: Band mean value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.basins","page":"Reference","title":"Whitebox.basins","text":"basins(wbt_info::WhiteboxTools = wbt_info; d8_pntr, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nIdentifies drainage basins that drain to the DEM edge.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.bilateral_filter","page":"Reference","title":"Whitebox.bilateral_filter","text":"bilateral_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma_dist=0.75, sigma_int=1.0, callback::Union{Nothing,Function}=nothing)\n\nA bilateral filter is an edge-preserving smoothing filter introduced by Tomasi and Manduchi (1998).\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nsigma_dist: Standard deviation in distance in pixels. \nsigma_int: Standard deviation in intensity in pixels. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.block_maximum_gridding","page":"Reference","title":"Whitebox.block_maximum_gridding","text":"block_maximum_gridding(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)\n\nCreates a raster grid based on a set of vector points and assigns grid values using a block maximum scheme.\n\nArguments\n\ni: Input vector Points file. \nfield: Input field name in attribute table. \nuse_z: Use z-coordinate instead of field?. \noutput: Output raster file. \ncell_size: Optionally specified cell size of output raster. Not used when base raster is specified. \nbase: Optionally specified input base raster file. Not used when a cell size is specified. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.block_minimum_gridding","page":"Reference","title":"Whitebox.block_minimum_gridding","text":"block_minimum_gridding(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)\n\nCreates a raster grid based on a set of vector points and assigns grid values using a block minimum scheme.\n\nArguments\n\ni: Input vector Points file. \nfield: Input field name in attribute table. \nuse_z: Use z-coordinate instead of field?. \noutput: Output raster file. \ncell_size: Optionally specified cell size of output raster. Not used when base raster is specified. \nbase: Optionally specified input base raster file. Not used when a cell size is specified. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.boundary_shape_complexity","page":"Reference","title":"Whitebox.boundary_shape_complexity","text":"boundary_shape_complexity(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the complexity of the boundaries of raster polygons.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.breach_depressions","page":"Reference","title":"Whitebox.breach_depressions","text":"breach_depressions(wbt_info::WhiteboxTools = wbt_info; dem, output, max_depth=nothing, max_length=nothing, flat_increment=nothing, fill_pits=false, callback::Union{Nothing,Function}=nothing)\n\nBreaches all of the depressions in a DEM using Lindsay's (2016) algorithm. This should be preferred over depression filling in most cases.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nmax_depth: Optional maximum breach depth (default is Inf). \nmax_length: Optional maximum breach channel length (in grid cells; default is Inf). \nflat_increment: Optional elevation increment applied to flat areas. \nfill_pits: Optional flag indicating whether to fill single-cell pits. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.breach_depressions_least_cost","page":"Reference","title":"Whitebox.breach_depressions_least_cost","text":"breach_depressions_least_cost(wbt_info::WhiteboxTools = wbt_info; dem, output, dist, max_cost=nothing, min_dist=true, flat_increment=nothing, fill=true, callback::Union{Nothing,Function}=nothing)\n\nBreaches the depressions in a DEM using a least-cost pathway method.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ndist: Maximum search distance for breach paths in cells. \nmax_cost: Optional maximum breach cost (default is Inf). \nmin_dist: Optional flag indicating whether to minimize breach distances. \nflat_increment: Optional elevation increment applied to flat areas. \nfill: Optional flag indicating whether to fill any remaining unbreached depressions. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.breach_single_cell_pits","page":"Reference","title":"Whitebox.breach_single_cell_pits","text":"breach_single_cell_pits(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nRemoves single-cell pits from an input DEM by breaching.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.buffer_raster","page":"Reference","title":"Whitebox.buffer_raster","text":"buffer_raster(wbt_info::WhiteboxTools = wbt_info; i, output, size, gridcells=false, callback::Union{Nothing,Function}=nothing)\n\nMaps a distance-based buffer around each non-background (non-zero/non-nodata) grid cell in an input image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nsize: Buffer size. \ngridcells: Optional flag to indicate that the 'size' threshold should be measured in grid cells instead of the default map units. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.burn_streams_at_roads","page":"Reference","title":"Whitebox.burn_streams_at_roads","text":"burn_streams_at_roads(wbt_info::WhiteboxTools = wbt_info; dem, streams, roads, output, width=nothing, callback::Union{Nothing,Function}=nothing)\n\nBurns-in streams at the sites of road embankments.\n\nArguments\n\ndem: Input raster digital elevation model (DEM) file. \nstreams: Input vector streams file. \nroads: Input vector roads file. \noutput: Output raster file. \nwidth: Maximum road embankment width, in map units. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.ceil","page":"Reference","title":"Whitebox.ceil","text":"ceil(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the smallest (closest to negative infinity) value that is greater than or equal to the values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.centroid","page":"Reference","title":"Whitebox.centroid","text":"centroid(wbt_info::WhiteboxTools = wbt_info; i, output, text_output=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates the centroid, or average location, of raster polygon objects.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ntext_output: Optional text output. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.centroid_vector","page":"Reference","title":"Whitebox.centroid_vector","text":"centroid_vector(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nIdentifies the centroid point of a vector polyline or polygon feature or a group of vector points.\n\nArguments\n\ni: Input vector file. \noutput: Output vector file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.change_vector_analysis","page":"Reference","title":"Whitebox.change_vector_analysis","text":"change_vector_analysis(wbt_info::WhiteboxTools = wbt_info; date1, date2, magnitude, direction, callback::Union{Nothing,Function}=nothing)\n\nPerforms a change vector analysis on a two-date multi-spectral dataset.\n\nArguments\n\ndate1: Input raster files for the earlier date. \ndate2: Input raster files for the later date. \nmagnitude: Output vector magnitude raster file. \ndirection: Output vector Direction raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.circular_variance_of_aspect","page":"Reference","title":"Whitebox.circular_variance_of_aspect","text":"circular_variance_of_aspect(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, callback::Union{Nothing,Function}=nothing)\n\nCalculates the circular variance of aspect at a scale for a DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfilter: Size of the filter kernel. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.classify_buildings_in_lidar","page":"Reference","title":"Whitebox.classify_buildings_in_lidar","text":"classify_buildings_in_lidar(wbt_info::WhiteboxTools = wbt_info; i, buildings, output, callback::Union{Nothing,Function}=nothing)\n\nReclassifies a LiDAR points that lie within vector building footprints.\n\nArguments\n\ni: Input LiDAR file. \nbuildings: Input vector polygons file. \noutput: Output LiDAR file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.classify_overlap_points","page":"Reference","title":"Whitebox.classify_overlap_points","text":"classify_overlap_points(wbt_info::WhiteboxTools = wbt_info; i, output, resolution=2.0, filter=false, callback::Union{Nothing,Function}=nothing)\n\nClassifies or filters LAS points in regions of overlapping flight lines.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \nresolution: The size of the square area used to evaluate nearby points in the LiDAR data. \nfilter: Filter out points from overlapping flightlines? If false, overlaps will simply be classified. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.clean_vector","page":"Reference","title":"Whitebox.clean_vector","text":"clean_vector(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nRemoves null features and lines/polygons with fewer than the required number of vertices.\n\nArguments\n\ni: Input vector file. \noutput: Output vector file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.clip","page":"Reference","title":"Whitebox.clip","text":"clip(wbt_info::WhiteboxTools = wbt_info; i, clip, output, callback::Union{Nothing,Function}=nothing)\n\nExtract all the features, or parts of features, that overlap with the features of the clip vector.\n\nArguments\n\ni: Input vector file. \nclip: Input clip polygon vector file. \noutput: Output vector file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.clip_lidar_to_polygon","page":"Reference","title":"Whitebox.clip_lidar_to_polygon","text":"clip_lidar_to_polygon(wbt_info::WhiteboxTools = wbt_info; i, polygons, output, callback::Union{Nothing,Function}=nothing)\n\nClips a LiDAR point cloud to a vector polygon or polygons.\n\nArguments\n\ni: Input LiDAR file. \npolygons: Input vector polygons file. \noutput: Output LiDAR file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.clip_raster_to_polygon","page":"Reference","title":"Whitebox.clip_raster_to_polygon","text":"clip_raster_to_polygon(wbt_info::WhiteboxTools = wbt_info; i, polygons, output, maintain_dimensions=false, callback::Union{Nothing,Function}=nothing)\n\nClips a raster to a vector polygon.\n\nArguments\n\ni: Input raster file. \npolygons: Input vector polygons file. \noutput: Output raster file. \nmaintain_dimensions: Maintain input raster dimensions?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.closing","page":"Reference","title":"Whitebox.closing","text":"closing(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nA closing is a mathematical morphology operation involving an erosion (min filter) of a dilation (max filter) set.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.clump","page":"Reference","title":"Whitebox.clump","text":"clump(wbt_info::WhiteboxTools = wbt_info; i, output, diag=true, zero_back=false, callback::Union{Nothing,Function}=nothing)\n\nGroups cells that form discrete areas, assigning them unique identifiers.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ndiag: Flag indicating whether diagonal connections should be considered. \nzero_back: Flag indicating whether zero values should be treated as a background. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.compactness_ratio","page":"Reference","title":"Whitebox.compactness_ratio","text":"compactness_ratio(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nCalculates the compactness ratio (A/P), a measure of shape complexity, for vector polygons.\n\nArguments\n\ni: Input vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.conditional_evaluation","page":"Reference","title":"Whitebox.conditional_evaluation","text":"conditional_evaluation(wbt_info::WhiteboxTools = wbt_info; i, output, statement=\"\", true=nothing, false=nothing, callback::Union{Nothing,Function}=nothing)\n\nThis tool performs a conditional evaluation (if-then-else) operation on a raster.\n\nArguments\n\ni: Name of the input raster file. \nstatement: Conditional statement e.g. value > 35.0. This statement must be a valid Rust statement. \nTrue: Value where condition evaluates TRUE (input raster or constant value). \nFalse: Value where condition evaluates FALSE (input raster or constant value). \noutput: Name of the output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.conservative_smoothing_filter","page":"Reference","title":"Whitebox.conservative_smoothing_filter","text":"conservative_smoothing_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=3, filtery=3, callback::Union{Nothing,Function}=nothing)\n\nPerforms a conservative-smoothing filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.construct_vector_tin","page":"Reference","title":"Whitebox.construct_vector_tin","text":"construct_vector_tin(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, use_z=false, max_triangle_edge_length=nothing, callback::Union{Nothing,Function}=nothing)\n\nCreates a vector triangular irregular network (TIN) for a set of vector points.\n\nArguments\n\ni: Input vector points file. \nfield: Input field name in attribute table. \nuse_z: Use the 'z' dimension of the Shapefile's geometry instead of an attribute field?. \noutput: Output vector polygon file. \nmax_triangle_edge_length: Optional maximum triangle edge length; triangles larger than this size will not be gridded. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.contours_from_points","page":"Reference","title":"Whitebox.contours_from_points","text":"contours_from_points(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, use_z=false, max_triangle_edge_length=nothing, interval=10.0, base=0.0, smooth=5, callback::Union{Nothing,Function}=nothing)\n\nCreates a contour coverage from a set of input points.\n\nArguments\n\ni: Input vector points file. \nfield: Input field name in attribute table. \nuse_z: Use the 'z' dimension of the Shapefile's geometry instead of an attribute field?. \noutput: Output vector lines file. \nmax_triangle_edge_length: Optional maximum triangle edge length; triangles larger than this size will not be gridded. \ninterval: Contour interval. \nbase: Base contour height. \nsmooth: Smoothing filter size (in num. points), e.g. 3, 5, 7, 9, 11. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.contours_from_raster","page":"Reference","title":"Whitebox.contours_from_raster","text":"contours_from_raster(wbt_info::WhiteboxTools = wbt_info; i, output, interval=10.0, base=0.0, smooth=9, tolerance=10.0, callback::Union{Nothing,Function}=nothing)\n\nDerives a vector contour coverage from a raster surface.\n\nArguments\n\ni: Input surface raster file. \noutput: Output vector contour file. \ninterval: Contour interval. \nbase: Base contour height. \nsmooth: Smoothing filter size (in num. points), e.g. 3, 5, 7, 9, 11. \ntolerance: Tolerance factor, in degrees (0-45); determines generalization level. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.convert_nodata_to_zero","page":"Reference","title":"Whitebox.convert_nodata_to_zero","text":"convert_nodata_to_zero(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nConverts nodata values in a raster to zero.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.convert_raster_format","page":"Reference","title":"Whitebox.convert_raster_format","text":"convert_raster_format(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nConverts raster data from one format to another.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.corner_detection","page":"Reference","title":"Whitebox.corner_detection","text":"corner_detection(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nIdentifies corner patterns in boolean images using hit-and-miss pattern matching.\n\nArguments\n\ni: Input boolean image. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.correct_vignetting","page":"Reference","title":"Whitebox.correct_vignetting","text":"correct_vignetting(wbt_info::WhiteboxTools = wbt_info; i, pp, output, focal_length=304.8, image_width=228.6, n=4.0, callback::Union{Nothing,Function}=nothing)\n\nCorrects the darkening of images towards corners.\n\nArguments\n\ni: Input raster file. \npp: Input principal point file. \noutput: Output raster file. \nfocal_length: Camera focal length, in millimeters. \nimage_width: Distance between photograph edges, in millimeters. \nn: The 'n' parameter. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.cos","page":"Reference","title":"Whitebox.cos","text":"cos(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the cosine (cos) of each values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.cosh","page":"Reference","title":"Whitebox.cosh","text":"cosh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the hyperbolic cosine (cosh) of each values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.cost_allocation","page":"Reference","title":"Whitebox.cost_allocation","text":"cost_allocation(wbt_info::WhiteboxTools = wbt_info; source, backlink, output, callback::Union{Nothing,Function}=nothing)\n\nIdentifies the source cell to which each grid cell is connected by a least-cost pathway in a cost-distance analysis.\n\nArguments\n\nsource: Input source raster file. \nbacklink: Input backlink raster file generated by the cost-distance tool. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.cost_distance","page":"Reference","title":"Whitebox.cost_distance","text":"cost_distance(wbt_info::WhiteboxTools = wbt_info; source, cost, out_accum, out_backlink, callback::Union{Nothing,Function}=nothing)\n\nPerforms cost-distance accumulation on a cost surface and a group of source cells.\n\nArguments\n\nsource: Input source raster file. \ncost: Input cost (friction) raster file. \nout_accum: Output cost accumulation raster file. \nout_backlink: Output backlink raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.cost_pathway","page":"Reference","title":"Whitebox.cost_pathway","text":"cost_pathway(wbt_info::WhiteboxTools = wbt_info; destination, backlink, output, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nPerforms cost-distance pathway analysis using a series of destination grid cells.\n\nArguments\n\ndestination: Input destination raster file. \nbacklink: Input backlink raster file generated by the cost-distance tool. \noutput: Output cost pathway raster file. \nzero_background: Flag indicating whether zero values should be treated as a background. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.count_if","page":"Reference","title":"Whitebox.count_if","text":"count_if(wbt_info::WhiteboxTools = wbt_info; inputs, output, value, callback::Union{Nothing,Function}=nothing)\n\nCounts the number of occurrences of a specified value in a cell-stack of rasters.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \nvalue: Search value (e.g. countif value = 5.0). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.create_colour_composite","page":"Reference","title":"Whitebox.create_colour_composite","text":"create_colour_composite(wbt_info::WhiteboxTools = wbt_info; red, green, blue, output, opacity=nothing, enhance=true, zeros=false, callback::Union{Nothing,Function}=nothing)\n\nCreates a colour-composite image from three bands of multispectral imagery.\n\nArguments\n\nred: Input red band image file. \ngreen: Input green band image file. \nblue: Input blue band image file. \nopacity: Input opacity band image file (optional). \noutput: Output colour composite file. \nenhance: Optional flag indicating whether a balance contrast enhancement is performed. \nzeros: Optional flag to indicate if zeros are nodata values. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.create_hexagonal_vector_grid","page":"Reference","title":"Whitebox.create_hexagonal_vector_grid","text":"create_hexagonal_vector_grid(wbt_info::WhiteboxTools = wbt_info; i, output, width, orientation=\"horizontal\", callback::Union{Nothing,Function}=nothing)\n\nCreates a hexagonal vector grid.\n\nArguments\n\ni: Input base file. \noutput: Output vector polygon file. \nwidth: The grid cell width. \norientation: Grid Orientation, 'horizontal' or 'vertical'. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.create_plane","page":"Reference","title":"Whitebox.create_plane","text":"create_plane(wbt_info::WhiteboxTools = wbt_info; base, output, gradient=15.0, aspect=90.0, constant=0.0, callback::Union{Nothing,Function}=nothing)\n\nCreates a raster image based on the equation for a simple plane.\n\nArguments\n\nbase: Input base raster file. \noutput: Output raster file. \ngradient: Slope gradient in degrees (-85.0 to 85.0). \naspect: Aspect (direction) in degrees clockwise from north (0.0-360.0). \nconstant: Constant value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.create_rectangular_vector_grid","page":"Reference","title":"Whitebox.create_rectangular_vector_grid","text":"create_rectangular_vector_grid(wbt_info::WhiteboxTools = wbt_info; i, output, width, height, xorig=0, yorig=0, callback::Union{Nothing,Function}=nothing)\n\nCreates a rectangular vector grid.\n\nArguments\n\ni: Input base file. \noutput: Output vector polygon file. \nwidth: The grid cell width. \nheight: The grid cell height. \nxorig: The grid origin x-coordinate. \nyorig: The grid origin y-coordinate. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.crispness_index","page":"Reference","title":"Whitebox.crispness_index","text":"crispness_index(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates the Crispness Index, which is used to quantify how crisp (or conversely how fuzzy) a probability image is.\n\nArguments\n\ni: Input raster file. \noutput: Optional output html file (default name will be based on input file if unspecified). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.cross_tabulation","page":"Reference","title":"Whitebox.cross_tabulation","text":"cross_tabulation(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a cross-tabulation on two categorical images.\n\nArguments\n\ninput1: Input raster file 1. \ninput2: Input raster file 1. \noutput: Output HTML file (default name will be based on input file if unspecified). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.csv_points_to_vector","page":"Reference","title":"Whitebox.csv_points_to_vector","text":"csv_points_to_vector(wbt_info::WhiteboxTools = wbt_info; i, output, xfield=0, yfield=1, epsg=nothing, callback::Union{Nothing,Function}=nothing)\n\nConverts a CSV text file to vector points.\n\nArguments\n\ni: Input CSV file (i.e. source of data to be imported). \noutput: Output vector file. \nxfield: X field number (e.g. 0 for first field). \nyfield: Y field number (e.g. 1 for second field). \nepsg: EPSG projection (e.g. 2958). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.cumulative_distribution","page":"Reference","title":"Whitebox.cumulative_distribution","text":"cumulative_distribution(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nConverts a raster image to its cumulative distribution function.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.d8_flow_accumulation","page":"Reference","title":"Whitebox.d8_flow_accumulation","text":"d8_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; i, output, out_type=\"cells\", log=false, clip=false, pntr=false, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates a D8 flow accumulation raster from an input DEM or flow pointer.\n\nArguments\n\ni: Input raster DEM or D8 pointer file. \noutput: Output raster file. \nout_type: Output type; one of 'cells' (default), 'catchment area', and 'specific contributing area'. \nlog: Optional flag to request the output be log-transformed. \nclip: Optional flag to request clipping the display max by 1%. \npntr: Is the input raster a D8 flow pointer rather than a DEM?. \nesri_pntr: Input D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.d8_mass_flux","page":"Reference","title":"Whitebox.d8_mass_flux","text":"d8_mass_flux(wbt_info::WhiteboxTools = wbt_info; dem, loading, efficiency, absorption, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a D8 mass flux calculation.\n\nArguments\n\ndem: Input raster DEM file. \nloading: Input loading raster file. \nefficiency: Input efficiency raster file. \nabsorption: Input absorption raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.d8_pointer","page":"Reference","title":"Whitebox.d8_pointer","text":"d8_pointer(wbt_info::WhiteboxTools = wbt_info; dem, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates a D8 flow pointer raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.d_inf_flow_accumulation","page":"Reference","title":"Whitebox.d_inf_flow_accumulation","text":"d_inf_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; i, output, out_type=\"Specific Contributing Area\", threshold=nothing, log=false, clip=false, pntr=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates a D-infinity flow accumulation raster from an input DEM.\n\nArguments\n\ni: Input raster DEM or D-infinity pointer file. \noutput: Output raster file. \nout_type: Output type; one of 'cells', 'sca' (default), and 'ca'. \nthreshold: Optional convergence threshold parameter, in grid cells; default is infinity. \nlog: Optional flag to request the output be log-transformed. \nclip: Optional flag to request clipping the display max by 1%. \npntr: Is the input raster a D-infinity flow pointer rather than a DEM?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.d_inf_mass_flux","page":"Reference","title":"Whitebox.d_inf_mass_flux","text":"d_inf_mass_flux(wbt_info::WhiteboxTools = wbt_info; dem, loading, efficiency, absorption, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a D-infinity mass flux calculation.\n\nArguments\n\ndem: Input raster DEM file. \nloading: Input loading raster file. \nefficiency: Input efficiency raster file. \nabsorption: Input absorption raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.d_inf_pointer","page":"Reference","title":"Whitebox.d_inf_pointer","text":"d_inf_pointer(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates a D-infinity flow pointer (flow direction) raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.decrement","page":"Reference","title":"Whitebox.decrement","text":"decrement(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nDecreases the values of each grid cell in an input raster by 1.0 (see also InPlaceSubtract).\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.default_callback-Tuple{Any}","page":"Reference","title":"Whitebox.default_callback","text":"default_callback(value)\n\nA simple default callback that outputs using the print function. When tools are called without providing a custom callback, this function will be used to print to standard output.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Whitebox.depth_in_sink","page":"Reference","title":"Whitebox.depth_in_sink","text":"depth_in_sink(wbt_info::WhiteboxTools = wbt_info; dem, output, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nMeasures the depth of sinks (depressions) in a DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nzero_background: Flag indicating whether the background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.dev_from_mean_elev","page":"Reference","title":"Whitebox.dev_from_mean_elev","text":"dev_from_mean_elev(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nCalculates deviation from mean elevation.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.diff_from_mean_elev","page":"Reference","title":"Whitebox.diff_from_mean_elev","text":"diff_from_mean_elev(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nCalculates difference from mean elevation (equivalent to a high-pass filter).\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.diff_of_gaussian_filter","page":"Reference","title":"Whitebox.diff_of_gaussian_filter","text":"diff_of_gaussian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma1=2.0, sigma2=4.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a Difference of Gaussian (DoG) filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nsigma1: Standard deviation distance in pixels. \nsigma2: Standard deviation distance in pixels. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.difference","page":"Reference","title":"Whitebox.difference","text":"difference(wbt_info::WhiteboxTools = wbt_info; i, overlay, output, callback::Union{Nothing,Function}=nothing)\n\nOutputs the features that occur in one of the two vector inputs but not both, i.e. no overlapping features.\n\nArguments\n\ni: Input vector file. \noverlay: Input overlay vector file. \noutput: Output vector file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.direct_decorrelation_stretch","page":"Reference","title":"Whitebox.direct_decorrelation_stretch","text":"direct_decorrelation_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, k=0.5, clip=1.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a direct decorrelation stretch enhancement on a colour-composite image of multispectral data.\n\nArguments\n\ni: Input colour composite image file. \noutput: Output raster file. \nk: Achromatic factor (k) ranges between 0 (no effect) and 1 (full saturation stretch), although typical values range from 0.3 to 0.7. \nclip: Optional percent to clip the upper tail by during the stretch. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.directional_relief","page":"Reference","title":"Whitebox.directional_relief","text":"directional_relief(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=0.0, max_dist=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates relief for cells in an input DEM for a specified direction.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nazimuth: Wind azimuth in degrees. \nmax_dist: Optional maximum search distance (unspecified if none; in xy units). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.dissolve","page":"Reference","title":"Whitebox.dissolve","text":"dissolve(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, snap=0.0, callback::Union{Nothing,Function}=nothing)\n\nRemoves the interior, or shared, boundaries within a vector polygon coverage.\n\nArguments\n\ni: Input vector file. \nfield: Dissolve field attribute (optional). \noutput: Output vector file. \nsnap: Snap tolerance. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.distance_to_outlet","page":"Reference","title":"Whitebox.distance_to_outlet","text":"distance_to_outlet(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates the distance of stream grid cells to the channel network outlet cell.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.diversity_filter","page":"Reference","title":"Whitebox.diversity_filter","text":"diversity_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nAssigns each cell in the output grid the number of different values in a moving window centred on each grid cell in the input raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.divide","page":"Reference","title":"Whitebox.divide","text":"divide(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a division operation on two rasters or a raster and a constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.downslope_distance_to_stream","page":"Reference","title":"Whitebox.downslope_distance_to_stream","text":"downslope_distance_to_stream(wbt_info::WhiteboxTools = wbt_info; dem, streams, output, dinf=false, callback::Union{Nothing,Function}=nothing)\n\nMeasures distance to the nearest downslope stream cell.\n\nArguments\n\ndem: Input raster DEM file. \nstreams: Input raster streams file. \noutput: Output raster file. \ndinf: Use the D-infinity flow algorithm instead of D8?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.downslope_flowpath_length","page":"Reference","title":"Whitebox.downslope_flowpath_length","text":"downslope_flowpath_length(wbt_info::WhiteboxTools = wbt_info; d8_pntr, output, watersheds=nothing, weights=nothing, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates the downslope flowpath length from each cell to basin outlet.\n\nArguments\n\nd8_pntr: Input D8 pointer raster file. \nwatersheds: Optional input watershed raster file. \nweights: Optional input weights raster file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.downslope_index","page":"Reference","title":"Whitebox.downslope_index","text":"downslope_index(wbt_info::WhiteboxTools = wbt_info; dem, output, drop=2.0, out_type=\"tangent\", callback::Union{Nothing,Function}=nothing)\n\nCalculates the Hjerdt et al. (2004) downslope index.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ndrop: Vertical drop value (default is 2.0). \nout_type: Output type, options include 'tangent', 'degrees', 'radians', 'distance' (default is 'tangent'). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.edge_contamination","page":"Reference","title":"Whitebox.edge_contamination","text":"edge_contamination(wbt_info::WhiteboxTools = wbt_info; dem, output, flow_type=\"mfd\", zfactor=\"\", callback::Union{Nothing,Function}=nothing)\n\nThis tool identifies grid cells within an input DEM that may be impacted by edge contamination for hydrological applications.\n\nArguments\n\ndem: Name of the input DEM raster file; must be depressionless. \noutput: Name of the output raster file. \nflow_type: Flow algorithm type, one of 'd8', 'mfd', or 'dinf'. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.edge_density","page":"Reference","title":"Whitebox.edge_density","text":"edge_density(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, norm_diff=5.0, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates the density of edges, or breaks-in-slope within DEMs.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfilter: Size of the filter kernel. \nnorm_diff: Maximum difference in normal vectors, in degrees. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.edge_preserving_mean_filter","page":"Reference","title":"Whitebox.edge_preserving_mean_filter","text":"edge_preserving_mean_filter(wbt_info::WhiteboxTools = wbt_info; i, output, threshold, filter=11, callback::Union{Nothing,Function}=nothing)\n\nPerforms a simple edge-preserving mean filter on an input image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilter: Size of the filter kernel. \nthreshold: Maximum difference in values. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.edge_proportion","page":"Reference","title":"Whitebox.edge_proportion","text":"edge_proportion(wbt_info::WhiteboxTools = wbt_info; i, output, output_text=false, callback::Union{Nothing,Function}=nothing)\n\nCalculate the proportion of cells in a raster polygon that are edge cells.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \noutput_text: flag indicating whether a text report should also be output. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.elev_above_pit","page":"Reference","title":"Whitebox.elev_above_pit","text":"elev_above_pit(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nCalculate the elevation of each grid cell above the nearest downstream pit cell or grid edge cell.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.elev_percentile","page":"Reference","title":"Whitebox.elev_percentile","text":"elev_percentile(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=11, filtery=11, sig_digits=2, callback::Union{Nothing,Function}=nothing)\n\nCalculates the elevation percentile raster from a DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \nsig_digits: Number of significant digits. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.elev_relative_to_min_max","page":"Reference","title":"Whitebox.elev_relative_to_min_max","text":"elev_relative_to_min_max(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the elevation of a location relative to the minimum and maximum elevations in a DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.elev_relative_to_watershed_min_max","page":"Reference","title":"Whitebox.elev_relative_to_watershed_min_max","text":"elev_relative_to_watershed_min_max(wbt_info::WhiteboxTools = wbt_info; dem, watersheds, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the elevation of a location relative to the minimum and maximum elevations in a watershed.\n\nArguments\n\ndem: Input raster DEM file. \nwatersheds: Input raster watersheds file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.elevation_above_stream","page":"Reference","title":"Whitebox.elevation_above_stream","text":"elevation_above_stream(wbt_info::WhiteboxTools = wbt_info; dem, streams, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the elevation of cells above the nearest downslope stream cell.\n\nArguments\n\ndem: Input raster DEM file. \nstreams: Input raster streams file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.elevation_above_stream_euclidean","page":"Reference","title":"Whitebox.elevation_above_stream_euclidean","text":"elevation_above_stream_euclidean(wbt_info::WhiteboxTools = wbt_info; dem, streams, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the elevation of cells above the nearest (Euclidean distance) stream cell.\n\nArguments\n\ndem: Input raster DEM file. \nstreams: Input raster streams file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.eliminate_coincident_points","page":"Reference","title":"Whitebox.eliminate_coincident_points","text":"eliminate_coincident_points(wbt_info::WhiteboxTools = wbt_info; i, output, tolerance, callback::Union{Nothing,Function}=nothing)\n\nRemoves any coincident, or nearly coincident, points from a vector points file.\n\nArguments\n\ni: Input vector file. \noutput: Output vector polygon file. \ntolerance: The distance tolerance for points. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.elongation_ratio","page":"Reference","title":"Whitebox.elongation_ratio","text":"elongation_ratio(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nCalculates the elongation ratio for vector polygons.\n\nArguments\n\ni: Input vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.embankment_mapping","page":"Reference","title":"Whitebox.embankment_mapping","text":"embankment_mapping(wbt_info::WhiteboxTools = wbt_info; dem, road_vec, output, search_dist=2.5, min_road_width=6.0, typical_width=30.0, max_height=2.0, max_width=60.0, max_increment=0.05, spillout_slope=4.0, remove_embankments=false, callback::Union{Nothing,Function}=nothing)\n\nMaps and/or removes road embankments from an input fine-resolution DEM.\n\nArguments\n\ndem: Input raster DEM file. \nroad_vec: Input vector polygons file. \noutput: Output raster file. \nsearch_dist: Search distance used to reposition transportation vectors onto road embankments (in map units). \nmin_road_width: Minimum road width; this is the width of the paved road surface (in map units). \ntypical_width: Typical embankment width; this is the maximum width of an embankment with roadside ditches (in map units). \nmax_height: Typical embankment maximum height; this is the height a typical embankment with roadside ditches (in map units). \nmax_width: Maximum embankment width, typically where embankments traverse steep-sided valleys (in map units). \nmax_increment: Maximum upwards increment between neighbouring cells on an embankment (in elevation units). \nspillout_slope: Spillout slope (in degrees). \nremove_embankments: Optional flag indicating whether to output a DEM with embankments removed (true) or an embankment raster map (false). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.emboss_filter","page":"Reference","title":"Whitebox.emboss_filter","text":"emboss_filter(wbt_info::WhiteboxTools = wbt_info; i, output, direction=\"n\", clip=0.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms an emboss filter on an image, similar to a hillshade operation.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ndirection: Direction of reflection; options include 'n', 's', 'e', 'w', 'ne', 'se', 'nw', 'sw'. \nclip: Optional amount to clip the distribution tails by, in percent. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.equal_to","page":"Reference","title":"Whitebox.equal_to","text":"equal_to(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a equal-to comparison operation on two rasters or a raster and a constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.erase","page":"Reference","title":"Whitebox.erase","text":"erase(wbt_info::WhiteboxTools = wbt_info; i, erase, output, callback::Union{Nothing,Function}=nothing)\n\nRemoves all the features, or parts of features, that overlap with the features of the erase vector polygon.\n\nArguments\n\ni: Input vector file. \nerase: Input erase polygon vector file. \noutput: Output vector file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.erase_polygon_from_lidar","page":"Reference","title":"Whitebox.erase_polygon_from_lidar","text":"erase_polygon_from_lidar(wbt_info::WhiteboxTools = wbt_info; i, polygons, output, callback::Union{Nothing,Function}=nothing)\n\nErases (cuts out) a vector polygon or polygons from a LiDAR point cloud.\n\nArguments\n\ni: Input LiDAR file. \npolygons: Input vector polygons file. \noutput: Output LiDAR file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.erase_polygon_from_raster","page":"Reference","title":"Whitebox.erase_polygon_from_raster","text":"erase_polygon_from_raster(wbt_info::WhiteboxTools = wbt_info; i, polygons, output, callback::Union{Nothing,Function}=nothing)\n\nErases (cuts out) a vector polygon from a raster.\n\nArguments\n\ni: Input raster file. \npolygons: Input vector polygons file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.euclidean_allocation","page":"Reference","title":"Whitebox.euclidean_allocation","text":"euclidean_allocation(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nAssigns grid cells in the output raster the value of the nearest target cell in the input image, measured by the Shih and Wu (2004) Euclidean distance transform.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.euclidean_distance","page":"Reference","title":"Whitebox.euclidean_distance","text":"euclidean_distance(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the Shih and Wu (2004) Euclidean distance transform.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.exp","page":"Reference","title":"Whitebox.exp","text":"exp(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the exponential (base e) of values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.exp2","page":"Reference","title":"Whitebox.exp2","text":"exp2(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the exponential (base 2) of values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.export_table_to_csv","page":"Reference","title":"Whitebox.export_table_to_csv","text":"export_table_to_csv(wbt_info::WhiteboxTools = wbt_info; i, output, headers=true, callback::Union{Nothing,Function}=nothing)\n\nExports an attribute table to a CSV text file.\n\nArguments\n\ni: Input vector file. \noutput: Output csv file. \nheaders: Export field names as file header?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.exposure_towards_wind_flux","page":"Reference","title":"Whitebox.exposure_towards_wind_flux","text":"exposure_towards_wind_flux(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=\"\", max_dist=\"\", zfactor=\"\", callback::Union{Nothing,Function}=nothing)\n\nThis tool evaluates hydrologic connectivity within a DEM.\n\nArguments\n\ndem: Name of the input DEM raster file. \noutput: Name of the output raster file. \nazimuth: Wind azimuth, in degrees. \nmax_dist: Optional maximum search distance. Minimum value is 5 x cell size. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.extend_vector_lines","page":"Reference","title":"Whitebox.extend_vector_lines","text":"extend_vector_lines(wbt_info::WhiteboxTools = wbt_info; i, output, dist, extend=\"both ends\", callback::Union{Nothing,Function}=nothing)\n\nExtends vector lines by a specified distance.\n\nArguments\n\ni: Input vector polyline file. \noutput: Output vector polyline file. \ndist: The distance to extend. \nextend: Extend direction, 'both ends' (default), 'line start', 'line end'. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.extract_nodes","page":"Reference","title":"Whitebox.extract_nodes","text":"extract_nodes(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nConverts vector lines or polygons into vertex points.\n\nArguments\n\ni: Input vector lines or polygon file. \noutput: Output vector points file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.extract_raster_values_at_points","page":"Reference","title":"Whitebox.extract_raster_values_at_points","text":"extract_raster_values_at_points(wbt_info::WhiteboxTools = wbt_info; inputs, points, out_text=false, callback::Union{Nothing,Function}=nothing)\n\nExtracts the values of raster(s) at vector point locations.\n\nArguments\n\ninputs: Input raster files. \npoints: Input vector points file. \nout_text: Output point values as text? Otherwise, the only output is to to the points file's attribute table. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.extract_streams","page":"Reference","title":"Whitebox.extract_streams","text":"extract_streams(wbt_info::WhiteboxTools = wbt_info; flow_accum, output, threshold, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nExtracts stream grid cells from a flow accumulation raster.\n\nArguments\n\nflow_accum: Input raster D8 flow accumulation file. \noutput: Output raster file. \nthreshold: Threshold in flow accumulation values for channelization. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.extract_valleys","page":"Reference","title":"Whitebox.extract_valleys","text":"extract_valleys(wbt_info::WhiteboxTools = wbt_info; dem, output, variant=\"LQ\", line_thin=true, filter=5, callback::Union{Nothing,Function}=nothing)\n\nIdentifies potential valley bottom grid cells based on local topolography alone.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nvariant: Options include 'LQ' (lower quartile), 'JandR' (Johnston and Rosenfeld), and 'PandD' (Peucker and Douglas); default is 'LQ'. \nline_thin: Optional flag indicating whether post-processing line-thinning should be performed. \nfilter: Optional argument (only used when variant='lq') providing the filter size, in grid cells, used for lq-filtering (default is 5). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.farthest_channel_head","page":"Reference","title":"Whitebox.farthest_channel_head","text":"farthest_channel_head(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates the distance to the furthest upstream channel head for each stream cell.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.fast_almost_gaussian_filter","page":"Reference","title":"Whitebox.fast_almost_gaussian_filter","text":"fast_almost_gaussian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma=1.8, callback::Union{Nothing,Function}=nothing)\n\nPerforms a fast approximate Gaussian filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nsigma: Standard deviation distance in pixels. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.fd8_flow_accumulation","page":"Reference","title":"Whitebox.fd8_flow_accumulation","text":"fd8_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; dem, output, out_type=\"specific contributing area\", exponent=1.1, threshold=nothing, log=false, clip=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates an FD8 flow accumulation raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nout_type: Output type; one of 'cells', 'specific contributing area' (default), and 'catchment area'. \nexponent: Optional exponent parameter; default is 1.1. \nthreshold: Optional convergence threshold parameter, in grid cells; default is infinity. \nlog: Optional flag to request the output be log-transformed. \nclip: Optional flag to request clipping the display max by 1%. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.fd8_pointer","page":"Reference","title":"Whitebox.fd8_pointer","text":"fd8_pointer(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates an FD8 flow pointer raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.feature_preserving_smoothing","page":"Reference","title":"Whitebox.feature_preserving_smoothing","text":"feature_preserving_smoothing(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, norm_diff=15.0, num_iter=3, max_diff=0.5, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nReduces short-scale variation in an input DEM using a modified Sun et al. (2007) algorithm.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfilter: Size of the filter kernel. \nnorm_diff: Maximum difference in normal vectors, in degrees. \nnum_iter: Number of iterations. \nmax_diff: Maximum allowable absolute elevation change (optional). \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.fetch_analysis","page":"Reference","title":"Whitebox.fetch_analysis","text":"fetch_analysis(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=0.0, hgt_inc=0.05, callback::Union{Nothing,Function}=nothing)\n\nPerforms an analysis of fetch or upwind distance to an obstacle.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nazimuth: Wind azimuth in degrees in degrees. \nhgt_inc: Height increment value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.fill_burn","page":"Reference","title":"Whitebox.fill_burn","text":"fill_burn(wbt_info::WhiteboxTools = wbt_info; dem, streams, output, callback::Union{Nothing,Function}=nothing)\n\nBurns streams into a DEM using the FillBurn (Saunders, 1999) method.\n\nArguments\n\ndem: Input raster DEM file. \nstreams: Input vector streams file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.fill_depressions","page":"Reference","title":"Whitebox.fill_depressions","text":"fill_depressions(wbt_info::WhiteboxTools = wbt_info; dem, output, fix_flats=true, flat_increment=nothing, max_depth=nothing, callback::Union{Nothing,Function}=nothing)\n\nFills all of the depressions in a DEM. Depression breaching should be preferred in most cases.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfix_flats: Optional flag indicating whether flat areas should have a small gradient applied. \nflat_increment: Optional elevation increment applied to flat areas. \nmax_depth: Optional maximum depression depth to fill. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.fill_depressions_planchon_and_darboux","page":"Reference","title":"Whitebox.fill_depressions_planchon_and_darboux","text":"fill_depressions_planchon_and_darboux(wbt_info::WhiteboxTools = wbt_info; dem, output, fix_flats=true, flat_increment=nothing, callback::Union{Nothing,Function}=nothing)\n\nFills all of the depressions in a DEM using the Planchon and Darboux (2002) method.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfix_flats: Optional flag indicating whether flat areas should have a small gradient applied. \nflat_increment: Optional elevation increment applied to flat areas. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.fill_depressions_wang_and_liu","page":"Reference","title":"Whitebox.fill_depressions_wang_and_liu","text":"fill_depressions_wang_and_liu(wbt_info::WhiteboxTools = wbt_info; dem, output, fix_flats=true, flat_increment=nothing, callback::Union{Nothing,Function}=nothing)\n\nFills all of the depressions in a DEM using the Wang and Liu (2006) method. Depression breaching should be preferred in most cases.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfix_flats: Optional flag indicating whether flat areas should have a small gradient applied. \nflat_increment: Optional elevation increment applied to flat areas. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.fill_missing_data","page":"Reference","title":"Whitebox.fill_missing_data","text":"fill_missing_data(wbt_info::WhiteboxTools = wbt_info; i, output, filter=11, weight=2.0, no_edges=true, callback::Union{Nothing,Function}=nothing)\n\nFills NoData holes in a DEM.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilter: Filter size (cells). \nweight: IDW weight value. \nno_edges: Optional flag indicating whether to exclude NoData cells in edge regions. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.fill_single_cell_pits","page":"Reference","title":"Whitebox.fill_single_cell_pits","text":"fill_single_cell_pits(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nRaises pit cells to the elevation of their lowest neighbour.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.filter_lidar_classes","page":"Reference","title":"Whitebox.filter_lidar_classes","text":"filter_lidar_classes(wbt_info::WhiteboxTools = wbt_info; i, output, exclude_cls=nothing, callback::Union{Nothing,Function}=nothing)\n\nRemoves points in a LAS file with certain specified class values.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \nexclude_cls: Optional exclude classes from interpolation; Valid class values range from 0 to 18, based on LAS specifications. Example, â€“exclude_cls='3,4,5,6,7,18'. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.filter_lidar_scan_angles","page":"Reference","title":"Whitebox.filter_lidar_scan_angles","text":"filter_lidar_scan_angles(wbt_info::WhiteboxTools = wbt_info; i, output, threshold, callback::Union{Nothing,Function}=nothing)\n\nRemoves points in a LAS file with scan angles greater than a threshold.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \nthreshold: Scan angle threshold. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.filter_raster_features_by_area","page":"Reference","title":"Whitebox.filter_raster_features_by_area","text":"filter_raster_features_by_area(wbt_info::WhiteboxTools = wbt_info; i, output, threshold, background=\"zero\", callback::Union{Nothing,Function}=nothing)\n\nRemoves small-area features from a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nthreshold: Remove features with fewer grid cells than this threshold value. \nbackground: Background value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.find_flightline_edge_points","page":"Reference","title":"Whitebox.find_flightline_edge_points","text":"find_flightline_edge_points(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nIdentifies points along a flightline's edge in a LAS file.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.find_lowest_or_highest_points","page":"Reference","title":"Whitebox.find_lowest_or_highest_points","text":"find_lowest_or_highest_points(wbt_info::WhiteboxTools = wbt_info; i, output, out_type=\"lowest\", callback::Union{Nothing,Function}=nothing)\n\nLocates the lowest and/or highest valued cells in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output vector points file. \nout_type: Output type; one of 'area' (default) and 'volume'. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.find_main_stem","page":"Reference","title":"Whitebox.find_main_stem","text":"find_main_stem(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nFinds the main stem, based on stream lengths, of each stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.find_no_flow_cells","page":"Reference","title":"Whitebox.find_no_flow_cells","text":"find_no_flow_cells(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nFinds grid cells with no downslope neighbours.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.find_parallel_flow","page":"Reference","title":"Whitebox.find_parallel_flow","text":"find_parallel_flow(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, callback::Union{Nothing,Function}=nothing)\n\nFinds areas of parallel flow in D8 flow direction rasters.\n\nArguments\n\nd8_pntr: Input D8 pointer raster file. \nstreams: Input raster streams file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.find_patch_or_class_edge_cells","page":"Reference","title":"Whitebox.find_patch_or_class_edge_cells","text":"find_patch_or_class_edge_cells(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nFinds all cells located on the edge of patch or class features.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.find_ridges","page":"Reference","title":"Whitebox.find_ridges","text":"find_ridges(wbt_info::WhiteboxTools = wbt_info; dem, output, line_thin=true, callback::Union{Nothing,Function}=nothing)\n\nIdentifies potential ridge and peak grid cells.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nline_thin: Optional flag indicating whether post-processing line-thinning should be performed. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.flatten_lakes","page":"Reference","title":"Whitebox.flatten_lakes","text":"flatten_lakes(wbt_info::WhiteboxTools = wbt_info; dem, lakes, output, callback::Union{Nothing,Function}=nothing)\n\nFlattens lake polygons in a raster DEM.\n\nArguments\n\ndem: Input raster DEM file. \nlakes: Input lakes vector polygons file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.flightline_overlap","page":"Reference","title":"Whitebox.flightline_overlap","text":"flightline_overlap(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, resolution=1.0, callback::Union{Nothing,Function}=nothing)\n\nReads a LiDAR (LAS) point file and outputs a raster containing the number of overlapping flight lines in each grid cell.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output file. \nresolution: Output raster's grid resolution. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.flip_image","page":"Reference","title":"Whitebox.flip_image","text":"flip_image(wbt_info::WhiteboxTools = wbt_info; i, output, direction=\"vertical\", callback::Union{Nothing,Function}=nothing)\n\nReflects an image in the vertical or horizontal axis.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ndirection: Direction of reflection; options include 'v' (vertical), 'h' (horizontal), and 'b' (both). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.flood_order","page":"Reference","title":"Whitebox.flood_order","text":"flood_order(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nAssigns each DEM grid cell its order in the sequence of inundations that are encountered during a search starting from the edges, moving inward at increasing elevations.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.floor","page":"Reference","title":"Whitebox.floor","text":"floor(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the largest (closest to positive infinity) value that is less than or equal to the values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.flow_accumulation_full_workflow","page":"Reference","title":"Whitebox.flow_accumulation_full_workflow","text":"flow_accumulation_full_workflow(wbt_info::WhiteboxTools = wbt_info; dem, out_dem, out_pntr, out_accum, out_type=\"Specific Contributing Area\", log=false, clip=false, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nResolves all of the depressions in a DEM, outputting a breached DEM, an aspect-aligned non-divergent flow pointer, and a flow accumulation raster.\n\nArguments\n\ndem: Input raster DEM file. \nout_dem: Output raster DEM file. \nout_pntr: Output raster flow pointer file. \nout_accum: Output raster flow accumulation file. \nout_type: Output type; one of 'cells', 'sca' (default), and 'ca'. \nlog: Optional flag to request the output be log-transformed. \nclip: Optional flag to request clipping the display max by 1%. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.flow_length_diff","page":"Reference","title":"Whitebox.flow_length_diff","text":"flow_length_diff(wbt_info::WhiteboxTools = wbt_info; d8_pntr, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates the local maximum absolute difference in downslope flowpath length, useful in mapping drainage divides and ridges.\n\nArguments\n\nd8_pntr: Input D8 pointer raster file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.gamma_correction","page":"Reference","title":"Whitebox.gamma_correction","text":"gamma_correction(wbt_info::WhiteboxTools = wbt_info; i, output, gamma=0.5, callback::Union{Nothing,Function}=nothing)\n\nPerforms a gamma correction on an input images.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ngamma: Gamma value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.gaussian_contrast_stretch","page":"Reference","title":"Whitebox.gaussian_contrast_stretch","text":"gaussian_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, num_tones=256, callback::Union{Nothing,Function}=nothing)\n\nPerforms a Gaussian contrast stretch on input images.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nnum_tones: Number of tones in the output image. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.gaussian_curvature","page":"Reference","title":"Whitebox.gaussian_curvature","text":"gaussian_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates a mean curvature raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nlog: Display output values using a log-scale. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.gaussian_filter","page":"Reference","title":"Whitebox.gaussian_filter","text":"gaussian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma=0.75, callback::Union{Nothing,Function}=nothing)\n\nPerforms a Gaussian filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nsigma: Standard deviation distance in pixels. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.gaussian_scale_space","page":"Reference","title":"Whitebox.gaussian_scale_space","text":"gaussian_scale_space(wbt_info::WhiteboxTools = wbt_info; dem, output, output_zscore, output_scale, points=nothing, sigma=0.5, step=0.5, num_steps=10, lsp=\"Slope\", z_factor=nothing, callback::Union{Nothing,Function}=nothing)\n\nThis tool uses the fast Gaussian approximation algorithm to produce scaled land-surface parameter measurements from an input DEM.\n\nArguments\n\ndem: Name of the input DEM raster file. \npoints: Name of the input vector points shapefile. \noutput: Name of the output land-surface parameter raster file. \noutput_zscore: Name of the output z-score raster file. \noutput_scale: Name of the output scale raster file. \nsigma: Initial sigma value (cells). \nstep: Step size as any positive non-zero integer. \nnum_steps: Number of steps. \nlsp: Output land-surface parameter; one of 'AnisotropyLTP', 'Aspect', 'DiffMeanElev', 'Eastness', 'Elevation', 'Hillshade', 'MeanCurvature', 'Northness', 'PlanCurvature', 'ProfileCurvature', 'Ruggedness', 'Slope', 'TanCurvature', 'TotalCurvature'. \nz_factor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.geomorphons","page":"Reference","title":"Whitebox.geomorphons","text":"geomorphons(wbt_info::WhiteboxTools = wbt_info; dem, output, search=50, threshold=0.0, tdist=0, forms=true, callback::Union{Nothing,Function}=nothing)\n\nComputes geomorphon patterns.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nsearch: Look up distance. \nthreshold: Flatness threshold for the classification function (in degrees). \ntdist: Distance (in cells) to begin reducing the flatness threshold to avoid problems with pseudo-flat lines-of-sight. \nforms: Classify geomorphons into 10 common land morphologies, else, output ternary code. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.greater_than","page":"Reference","title":"Whitebox.greater_than","text":"greater_than(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, incl_equals=false, callback::Union{Nothing,Function}=nothing)\n\nPerforms a greater-than comparison operation on two rasters or a raster and a constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \nincl_equals: Perform a greater-than-or-equal-to operation. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.hack_stream_order","page":"Reference","title":"Whitebox.hack_stream_order","text":"hack_stream_order(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nAssigns the Hack stream order to each tributary in a stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.height_above_ground","page":"Reference","title":"Whitebox.height_above_ground","text":"height_above_ground(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, callback::Union{Nothing,Function}=nothing)\n\nNormalizes a LiDAR point cloud, providing the height above the nearest ground-classified point.\n\nArguments\n\ni: Input LiDAR file (including extension). \noutput: Output raster file (including extension). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.help","page":"Reference","title":"Whitebox.help","text":"help(wbt_info::WhiteboxTools = wbt_info)\n\nRetrieves the help description for WhiteboxTools.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.high_pass_filter","page":"Reference","title":"Whitebox.high_pass_filter","text":"high_pass_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nPerforms a high-pass filter on an input image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.high_pass_median_filter","page":"Reference","title":"Whitebox.high_pass_median_filter","text":"high_pass_median_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, sig_digits=2, callback::Union{Nothing,Function}=nothing)\n\nPerforms a high pass median filter on an input image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \nsig_digits: Number of significant digits. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.highest_position","page":"Reference","title":"Whitebox.highest_position","text":"highest_position(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)\n\nIdentifies the stack position of the maximum value within a raster stack on a cell-by-cell basis.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.hillshade","page":"Reference","title":"Whitebox.hillshade","text":"hillshade(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=315.0, altitude=30.0, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates a hillshade raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nazimuth: Illumination source azimuth in degrees. \naltitude: Illumination source altitude in degrees. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.hillslopes","page":"Reference","title":"Whitebox.hillslopes","text":"hillslopes(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nIdentifies the individual hillslopes draining to each link in a stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.histogram_equalization","page":"Reference","title":"Whitebox.histogram_equalization","text":"histogram_equalization(wbt_info::WhiteboxTools = wbt_info; i, output, num_tones=256, callback::Union{Nothing,Function}=nothing)\n\nPerforms a histogram equalization contrast enhancement on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nnum_tones: Number of tones in the output image. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.histogram_matching","page":"Reference","title":"Whitebox.histogram_matching","text":"histogram_matching(wbt_info::WhiteboxTools = wbt_info; i, histo_file, output, callback::Union{Nothing,Function}=nothing)\n\nAlters the statistical distribution of a raster image matching it to a specified PDF.\n\nArguments\n\ni: Input raster file. \nhisto_file: Input reference probability distribution function (pdf) text file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.histogram_matching_two_images","page":"Reference","title":"Whitebox.histogram_matching_two_images","text":"histogram_matching_two_images(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nThis tool alters the cumulative distribution function of a raster image to that of another image.\n\nArguments\n\ninput1: Input raster file to modify. \ninput2: Input reference raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.hole_proportion","page":"Reference","title":"Whitebox.hole_proportion","text":"hole_proportion(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nCalculates the proportion of the total area of a polygon's holes relative to the area of the polygon's hull.\n\nArguments\n\ni: Input vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.horizon_angle","page":"Reference","title":"Whitebox.horizon_angle","text":"horizon_angle(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=0.0, max_dist=100.0, callback::Union{Nothing,Function}=nothing)\n\nCalculates horizon angle (maximum upwind slope) for each grid cell in an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nazimuth: Azimuth, in degrees. \nmax_dist: Optional maximum search distance (unspecified if none; in xy units). Minimum value is 5 x cell size. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.horton_stream_order","page":"Reference","title":"Whitebox.horton_stream_order","text":"horton_stream_order(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nAssigns the Horton stream order to each tributary in a stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.hypsometric_analysis","page":"Reference","title":"Whitebox.hypsometric_analysis","text":"hypsometric_analysis(wbt_info::WhiteboxTools = wbt_info; inputs, output, watershed=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates a hypsometric curve for one or more DEMs.\n\nArguments\n\ninputs: Input DEM files. \nwatershed: Input watershed files (optional). \noutput: Output HTML file (default name will be based on input file if unspecified). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.hypsometrically_tinted_hillshade","page":"Reference","title":"Whitebox.hypsometrically_tinted_hillshade","text":"hypsometrically_tinted_hillshade(wbt_info::WhiteboxTools = wbt_info; dem, output, altitude=45.0, hs_weight=0.5, brightness=0.5, atmospheric=0.0, palette=\"atlas\", reverse=false, zfactor=nothing, full_mode=false, callback::Union{Nothing,Function}=nothing)\n\nCreates an colour shaded relief image from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \naltitude: Illumination source altitude in degrees. \nhs_weight: Weight given to hillshade relative to relief (0.0-1.0). \nbrightness: Brightness factor (0.0-1.0). \natmospheric: Atmospheric effects weight (0.0-1.0). \npalette: Options include 'atlas', 'highrelief', 'arid', 'soft', 'muted', 'purple', 'viridi', 'gnyl', 'piyg', 'blylrd', and 'deep'. \nreverse: Optional flag indicating whether to use reverse the palette. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \nfull_mode: Optional flag indicating whether to use full 360-degrees of illumination sources. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.idw_interpolation","page":"Reference","title":"Whitebox.idw_interpolation","text":"idw_interpolation(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, weight=2.0, radius=nothing, min_points=nothing, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)\n\nInterpolates vector points into a raster surface using an inverse-distance weighted scheme.\n\nArguments\n\ni: Input vector Points file. \nfield: Input field name in attribute table. \nuse_z: Use z-coordinate instead of field?. \noutput: Output raster file. \nweight: IDW weight value. \nradius: Search Radius in map units. \nmin_points: Minimum number of points. \ncell_size: Optionally specified cell size of output raster. Not used when base raster is specified. \nbase: Optionally specified input base raster file. Not used when a cell size is specified. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.ihs_to_rgb","page":"Reference","title":"Whitebox.ihs_to_rgb","text":"ihs_to_rgb(wbt_info::WhiteboxTools = wbt_info; intensity, hue, saturation, red=nothing, green=nothing, blue=nothing, output=nothing, callback::Union{Nothing,Function}=nothing)\n\nConverts intensity, hue, and saturation (IHS) images into red, green, and blue (RGB) images.\n\nArguments\n\nintensity: Input intensity file. \nhue: Input hue file. \nsaturation: Input saturation file. \nred: Output red band file. Optionally specified if colour-composite not specified. \ngreen: Output green band file. Optionally specified if colour-composite not specified. \nblue: Output blue band file. Optionally specified if colour-composite not specified. \noutput: Output colour-composite file. Only used if individual bands are not specified. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.image_autocorrelation","page":"Reference","title":"Whitebox.image_autocorrelation","text":"image_autocorrelation(wbt_info::WhiteboxTools = wbt_info; inputs, output, contiguity=\"Rook\", callback::Union{Nothing,Function}=nothing)\n\nPerforms Moran's I analysis on two or more input images.\n\nArguments\n\ninputs: Input raster files. \ncontiguity: Contiguity type. \noutput: Output HTML file (default name will be based on input file if unspecified). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.image_correlation","page":"Reference","title":"Whitebox.image_correlation","text":"image_correlation(wbt_info::WhiteboxTools = wbt_info; inputs, output=nothing, callback::Union{Nothing,Function}=nothing)\n\nPerforms image correlation on two or more input images.\n\nArguments\n\ninputs: Input raster files. \noutput: Output HTML file (default name will be based on input file if unspecified). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.image_correlation_neighbourhood_analysis","page":"Reference","title":"Whitebox.image_correlation_neighbourhood_analysis","text":"image_correlation_neighbourhood_analysis(wbt_info::WhiteboxTools = wbt_info; input1, input2, output1, output2, filter=11, stat=\"pearson\", callback::Union{Nothing,Function}=nothing)\n\nPerforms image correlation on two input images neighbourhood search windows.\n\nArguments\n\ninput1: Input raster file. \ninput2: Input raster file. \noutput1: Output correlation (r-value or rho) raster file. \noutput2: Output significance (p-value) raster file. \nfilter: Size of the filter kernel. \nstat: Correlation type; one of 'pearson' (default) and 'spearman'. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.image_regression","page":"Reference","title":"Whitebox.image_regression","text":"image_regression(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, out_residuals=nothing, standardize=false, scattergram=false, num_samples=1000, callback::Union{Nothing,Function}=nothing)\n\nPerforms image regression analysis on two input images.\n\nArguments\n\ninput1: Input raster file (independent variable, X). \ninput2: Input raster file (dependent variable, Y). \noutput: Output HTML file for regression summary report. \nout_residuals: Output raster regression residual file. \nstandardize: Optional flag indicating whether to standardize the residuals map. \nscattergram: Optional flag indicating whether to output a scattergram. \nnum_samples: Number of samples used to create scattergram. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.image_stack_profile","page":"Reference","title":"Whitebox.image_stack_profile","text":"image_stack_profile(wbt_info::WhiteboxTools = wbt_info; inputs, points, output, callback::Union{Nothing,Function}=nothing)\n\nPlots an image stack profile (i.e. signature) for a set of points and multispectral images.\n\nArguments\n\ninputs: Input multispectral image files. \npoints: Input vector points file. \noutput: Output HTML file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.impoundment_size_index","page":"Reference","title":"Whitebox.impoundment_size_index","text":"impoundment_size_index(wbt_info::WhiteboxTools = wbt_info; dem, damlength, out_mean=nothing, out_max=nothing, out_volume=nothing, out_area=nothing, out_dam_height=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates the impoundment size resulting from damming a DEM.\n\nArguments\n\ndem: Input raster DEM file. \nout_mean: Output mean flooded depth file. \nout_max: Output maximum flooded depth file. \nout_volume: Output flooded volume file. \nout_area: Output flooded area file. \nout_dam_height: Output dam height file. \ndamlength: Maximum length of the dam. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.in_place_add","page":"Reference","title":"Whitebox.in_place_add","text":"in_place_add(wbt_info::WhiteboxTools = wbt_info; input1, input2, callback::Union{Nothing,Function}=nothing)\n\nPerforms an in-place addition operation (input1 += input2).\n\nArguments\n\ninput1: Input raster file. \ninput2: Input raster file or constant value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.in_place_divide","page":"Reference","title":"Whitebox.in_place_divide","text":"in_place_divide(wbt_info::WhiteboxTools = wbt_info; input1, input2, callback::Union{Nothing,Function}=nothing)\n\nPerforms an in-place division operation (input1 /= input2).\n\nArguments\n\ninput1: Input raster file. \ninput2: Input raster file or constant value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.in_place_multiply","page":"Reference","title":"Whitebox.in_place_multiply","text":"in_place_multiply(wbt_info::WhiteboxTools = wbt_info; input1, input2, callback::Union{Nothing,Function}=nothing)\n\nPerforms an in-place multiplication operation (input1 *= input2).\n\nArguments\n\ninput1: Input raster file. \ninput2: Input raster file or constant value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.in_place_subtract","page":"Reference","title":"Whitebox.in_place_subtract","text":"in_place_subtract(wbt_info::WhiteboxTools = wbt_info; input1, input2, callback::Union{Nothing,Function}=nothing)\n\nPerforms an in-place subtraction operation (input1 -= input2).\n\nArguments\n\ninput1: Input raster file. \ninput2: Input raster file or constant value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.increment","page":"Reference","title":"Whitebox.increment","text":"increment(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nIncreases the values of each grid cell in an input raster by 1.0. (see also InPlaceAdd).\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.insert_dams","page":"Reference","title":"Whitebox.insert_dams","text":"insert_dams(wbt_info::WhiteboxTools = wbt_info; dem, dam_pts, output, damlength, callback::Union{Nothing,Function}=nothing)\n\nCalculates the impoundment size resulting from damming a DEM.\n\nArguments\n\ndem: Input raster DEM file. \ndam_pts: Input vector dam points file. \noutput: Output file. \ndamlength: Maximum length of the dam. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.integer_division","page":"Reference","title":"Whitebox.integer_division","text":"integer_division(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms an integer division operation on two rasters or a raster and a constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.integral_image","page":"Reference","title":"Whitebox.integral_image","text":"integral_image(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nTransforms an input image (summed area table) into its integral image equivalent.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.intersect","page":"Reference","title":"Whitebox.intersect","text":"intersect(wbt_info::WhiteboxTools = wbt_info; i, overlay, output, snap=0.0, callback::Union{Nothing,Function}=nothing)\n\nIdentifies the parts of features in common between two input vector layers.\n\nArguments\n\ni: Input vector file. \noverlay: Input overlay vector file. \noutput: Output vector file. \nsnap: Snap tolerance. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.is_no_data","page":"Reference","title":"Whitebox.is_no_data","text":"is_no_data(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nIdentifies NoData valued pixels in an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.isobasins","page":"Reference","title":"Whitebox.isobasins","text":"isobasins(wbt_info::WhiteboxTools = wbt_info; dem, output, size, connections=false, callback::Union{Nothing,Function}=nothing)\n\nDivides a landscape into nearly equal sized drainage basins (i.e. watersheds).\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nsize: Target basin size, in grid cells. \nconnections: Output upstream-downstream flow connections among basins?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.jenson_snap_pour_points","page":"Reference","title":"Whitebox.jenson_snap_pour_points","text":"jenson_snap_pour_points(wbt_info::WhiteboxTools = wbt_info; pour_pts, streams, output, snap_dist, callback::Union{Nothing,Function}=nothing)\n\nMoves outlet points used to specify points of interest in a watershedding operation to the nearest stream cell.\n\nArguments\n\npour_pts: Input vector pour points (outlet) file. \nstreams: Input raster streams file. \noutput: Output vector file. \nsnap_dist: Maximum snap distance in map units. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.join_tables","page":"Reference","title":"Whitebox.join_tables","text":"join_tables(wbt_info::WhiteboxTools = wbt_info; input1, pkey, input2, fkey, import_field, callback::Union{Nothing,Function}=nothing)\n\nMerge a vector's attribute table with another table based on a common field.\n\nArguments\n\ninput1: Input primary vector file (i.e. the table to be modified). \npkey: Primary key field. \ninput2: Input foreign vector file (i.e. source of data to be imported). \nfkey: Foreign key field. \nimport_field: Imported field (all fields will be imported if not specified). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.k_means_clustering","page":"Reference","title":"Whitebox.k_means_clustering","text":"k_means_clustering(wbt_info::WhiteboxTools = wbt_info; inputs, output, classes, out_html=nothing, max_iterations=10, class_change=2.0, initialize=\"diagonal\", min_class_size=10, callback::Union{Nothing,Function}=nothing)\n\nPerforms a k-means clustering operation on a multi-spectral dataset.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \nout_html: Output HTML report file. \nclasses: Number of classes. \nmax_iterations: Maximum number of iterations. \nclass_change: Minimum percent of cells changed between iterations before completion. \ninitialize: How to initialize cluster centres?. \nmin_class_size: Minimum class size, in pixels. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.k_nearest_mean_filter","page":"Reference","title":"Whitebox.k_nearest_mean_filter","text":"k_nearest_mean_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, k=5, callback::Union{Nothing,Function}=nothing)\n\nA k-nearest mean filter is a type of edge-preserving smoothing filter.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \nk: k-value in pixels; this is the number of nearest-valued neighbours to use. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.kappa_index","page":"Reference","title":"Whitebox.kappa_index","text":"kappa_index(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a kappa index of agreement (KIA) analysis on two categorical raster files.\n\nArguments\n\ninput1: Input classification raster file. \ninput2: Input reference raster file. \noutput: Output HTML file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.ks_test_for_normality","page":"Reference","title":"Whitebox.ks_test_for_normality","text":"ks_test_for_normality(wbt_info::WhiteboxTools = wbt_info; i, output, num_samples=nothing, callback::Union{Nothing,Function}=nothing)\n\nEvaluates whether the values in a raster are normally distributed.\n\nArguments\n\ni: Input raster file. \noutput: Output HTML file. \nnum_samples: Number of samples. Leave blank to use whole image. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.laplacian_filter","page":"Reference","title":"Whitebox.laplacian_filter","text":"laplacian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, variant=\"3x3(1)\", clip=0.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a Laplacian filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nvariant: Optional variant value. Options include 3x3(1), 3x3(2), 3x3(3), 3x3(4), 5x5(1), and 5x5(2) (default is 3x3(1)). \nclip: Optional amount to clip the distribution tails by, in percent. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.laplacian_of_gaussian_filter","page":"Reference","title":"Whitebox.laplacian_of_gaussian_filter","text":"laplacian_of_gaussian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma=0.75, callback::Union{Nothing,Function}=nothing)\n\nPerforms a Laplacian-of-Gaussian (LoG) filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nsigma: Standard deviation in pixels. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.las_to_ascii","page":"Reference","title":"Whitebox.las_to_ascii","text":"las_to_ascii(wbt_info::WhiteboxTools = wbt_info; inputs, callback::Union{Nothing,Function}=nothing)\n\nConverts one or more LAS files into ASCII text files.\n\nArguments\n\ninputs: Input LiDAR files. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.las_to_multipoint_shapefile","page":"Reference","title":"Whitebox.las_to_multipoint_shapefile","text":"las_to_multipoint_shapefile(wbt_info::WhiteboxTools = wbt_info; i=nothing, callback::Union{Nothing,Function}=nothing)\n\nConverts one or more LAS files into MultipointZ vector Shapefiles. When the input parameter is not specified, the tool grids all LAS files contained within the working directory.\n\nArguments\n\ni: Input LiDAR file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.las_to_shapefile","page":"Reference","title":"Whitebox.las_to_shapefile","text":"las_to_shapefile(wbt_info::WhiteboxTools = wbt_info; i=nothing, callback::Union{Nothing,Function}=nothing)\n\nConverts one or more LAS files into a vector Shapefile of POINT ShapeType.\n\nArguments\n\ni: Input LiDAR file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.las_to_zlidar","page":"Reference","title":"Whitebox.las_to_zlidar","text":"las_to_zlidar(wbt_info::WhiteboxTools = wbt_info; inputs=nothing, outdir=nothing, compress=\"brotli\", level=5, callback::Union{Nothing,Function}=nothing)\n\nConverts one or more LAS files into the zlidar compressed LiDAR data format.\n\nArguments\n\ninputs: Input LAS files. \noutdir: Output directory into which zlidar files are created. If unspecified, it is assumed to be the same as the inputs. \ncompress: Compression method, including 'brotli' and 'deflate'. \nlevel: Compression level (1-9). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.layer_footprint","page":"Reference","title":"Whitebox.layer_footprint","text":"layer_footprint(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nCreates a vector polygon footprint of the area covered by a raster grid or vector layer.\n\nArguments\n\ni: Input raster or vector file. \noutput: Output vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lee_sigma_filter","page":"Reference","title":"Whitebox.lee_sigma_filter","text":"lee_sigma_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, sigma=10.0, m=5.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a Lee (Sigma) smoothing filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \nsigma: Sigma value should be related to the standard deviation of the distribution of image speckle noise. \nm: M-threshold value the minimum allowable number of pixels within the intensity range. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.length_of_upstream_channels","page":"Reference","title":"Whitebox.length_of_upstream_channels","text":"length_of_upstream_channels(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates the total length of channels upstream.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.less_than","page":"Reference","title":"Whitebox.less_than","text":"less_than(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, incl_equals=false, callback::Union{Nothing,Function}=nothing)\n\nPerforms a less-than comparison operation on two rasters or a raster and a constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \nincl_equals: Perform a less-than-or-equal-to operation. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.license","page":"Reference","title":"Whitebox.license","text":"license(tool_name::Union{Nothing, String} = nothing, wbt_info::WhiteboxTools = wbt_info)\n\nRetrieves the license information for WhiteboxTools.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_block_maximum","page":"Reference","title":"Whitebox.lidar_block_maximum","text":"lidar_block_maximum(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, resolution=1.0, callback::Union{Nothing,Function}=nothing)\n\nCreates a block-maximum raster from an input LAS file. When the input/output parameters are not specified, the tool grids all LAS files contained within the working directory.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output file. \nresolution: Output raster's grid resolution. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_block_minimum","page":"Reference","title":"Whitebox.lidar_block_minimum","text":"lidar_block_minimum(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, resolution=1.0, callback::Union{Nothing,Function}=nothing)\n\nCreates a block-minimum raster from an input LAS file. When the input/output parameters are not specified, the tool grids all LAS files contained within the working directory.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output file. \nresolution: Output raster's grid resolution. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_classify_subset","page":"Reference","title":"Whitebox.lidar_classify_subset","text":"lidar_classify_subset(wbt_info::WhiteboxTools = wbt_info; base, subset, output, subset_class, nonsubset_class=nothing, callback::Union{Nothing,Function}=nothing)\n\nClassifies the values in one LiDAR point cloud that correspond with points in a subset cloud.\n\nArguments\n\nbase: Input base LiDAR file. \nsubset: Input subset LiDAR file. \noutput: Output LiDAR file. \nsubset_class: Subset point class value (must be 0-18; see LAS specifications). \nnonsubset_class: Non-subset point class value (must be 0-18; see LAS specifications). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_colourize","page":"Reference","title":"Whitebox.lidar_colourize","text":"lidar_colourize(wbt_info::WhiteboxTools = wbt_info; in_lidar, in_image, output, callback::Union{Nothing,Function}=nothing)\n\nAdds the red-green-blue colour fields of a LiDAR (LAS) file based on an input image.\n\nArguments\n\nin_lidar: Input LiDAR file. \nin_image: Input colour image file. \noutput: Output LiDAR file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_digital_surface_model","page":"Reference","title":"Whitebox.lidar_digital_surface_model","text":"lidar_digital_surface_model(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, resolution=1.0, radius=0.5, minz=nothing, maxz=nothing, max_triangle_edge_length=nothing, callback::Union{Nothing,Function}=nothing)\n\nCreates a top-surface digital surface model (DSM) from a LiDAR point cloud.\n\nArguments\n\ni: Input LiDAR file (including extension). \noutput: Output raster file (including extension). \nresolution: Output raster's grid resolution. \nradius: Search Radius. \nminz: Optional minimum elevation for inclusion in interpolation. \nmaxz: Optional maximum elevation for inclusion in interpolation. \nmax_triangle_edge_length: Optional maximum triangle edge length; triangles larger than this size will not be gridded. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_elevation_slice","page":"Reference","title":"Whitebox.lidar_elevation_slice","text":"lidar_elevation_slice(wbt_info::WhiteboxTools = wbt_info; i, output, minz=nothing, maxz=nothing, cls=false, inclassval=2, outclassval=1, callback::Union{Nothing,Function}=nothing)\n\nOutputs all of the points within a LiDAR (LAS) point file that lie between a specified elevation range.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \nminz: Minimum elevation value (optional). \nmaxz: Maximum elevation value (optional). \ncls: Optional boolean flag indicating whether points outside the range should be retained in output but reclassified. \ninclassval: Optional parameter specifying the class value assigned to points within the slice. \noutclassval: Optional parameter specifying the class value assigned to points within the slice. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_ground_point_filter","page":"Reference","title":"Whitebox.lidar_ground_point_filter","text":"lidar_ground_point_filter(wbt_info::WhiteboxTools = wbt_info; i, output, radius=2.0, min_neighbours=0, slope_threshold=45.0, height_threshold=1.0, classify=true, slope_norm=true, height_above_ground=false, callback::Union{Nothing,Function}=nothing)\n\nIdentifies ground points within LiDAR dataset using a slope-based method.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \nradius: Search Radius. \nmin_neighbours: The minimum number of neighbouring points within search areas. If fewer points than this threshold are identified during the fixed-radius search, a subsequent kNN search is performed to identify the k number of neighbours. \nslope_threshold: Maximum inter-point slope to be considered an off-terrain point. \nheight_threshold: Inter-point height difference to be considered an off-terrain point. \nclassify: Classify points as ground (2) or off-ground (1). \nslope_norm: Perform initial ground slope normalization?. \nheight_above_ground: Transform output to height above average ground elevation?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_hex_binning","page":"Reference","title":"Whitebox.lidar_hex_binning","text":"lidar_hex_binning(wbt_info::WhiteboxTools = wbt_info; i, output, width, orientation=\"horizontal\", callback::Union{Nothing,Function}=nothing)\n\nHex-bins a set of LiDAR points.\n\nArguments\n\ni: Input base file. \noutput: Output vector polygon file. \nwidth: The grid cell width. \norientation: Grid Orientation, 'horizontal' or 'vertical'. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_hillshade","page":"Reference","title":"Whitebox.lidar_hillshade","text":"lidar_hillshade(wbt_info::WhiteboxTools = wbt_info; i, output, azimuth=315.0, altitude=30.0, radius=1.0, callback::Union{Nothing,Function}=nothing)\n\nCalculates a hillshade value for points within a LAS file and stores these data in the RGB field.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output file. \nazimuth: Illumination source azimuth in degrees. \naltitude: Illumination source altitude in degrees. \nradius: Search Radius. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_histogram","page":"Reference","title":"Whitebox.lidar_histogram","text":"lidar_histogram(wbt_info::WhiteboxTools = wbt_info; i, output, parameter=\"elevation\", clip=1.0, callback::Union{Nothing,Function}=nothing)\n\nCreates a histogram of LiDAR data.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output HTML file (default name will be based on input file if unspecified). \nparameter: Parameter; options are 'elevation' (default), 'intensity', 'scan angle', 'class', 'time'. \nclip: Amount to clip distribution tails (in percent). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_idw_interpolation","page":"Reference","title":"Whitebox.lidar_idw_interpolation","text":"lidar_idw_interpolation(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, parameter=\"elevation\", returns=\"all\", resolution=1.0, weight=1.0, radius=2.5, exclude_cls=nothing, minz=nothing, maxz=nothing, callback::Union{Nothing,Function}=nothing)\n\nInterpolates LAS files using an inverse-distance weighted (IDW) scheme. When the input/output parameters are not specified, the tool interpolates all LAS files contained within the working directory.\n\nArguments\n\ni: Input LiDAR file (including extension). \noutput: Output raster file (including extension). \nparameter: Interpolation parameter; options are 'elevation' (default), 'intensity', 'class', 'returnnumber', 'numberof_returns', 'scan angle', 'rgb', 'user data'. \nreturns: Point return types to include; options are 'all' (default), 'last', 'first'. \nresolution: Output raster's grid resolution. \nweight: IDW weight value. \nradius: Search Radius. \nexclude_cls: Optional exclude classes from interpolation; Valid class values range from 0 to 18, based on LAS specifications. Example, â€“exclude_cls='3,4,5,6,7,18'. \nminz: Optional minimum elevation for inclusion in interpolation. \nmaxz: Optional maximum elevation for inclusion in interpolation. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_info","page":"Reference","title":"Whitebox.lidar_info","text":"lidar_info(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, vlr=true, geokeys=true, callback::Union{Nothing,Function}=nothing)\n\nPrints information about a LiDAR (LAS) dataset, including header, point return frequency, and classification data and information about the variable length records (VLRs) and geokeys.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output HTML file for summary report. \nvlr: Flag indicating whether or not to print the variable length records (VLRs). \ngeokeys: Flag indicating whether or not to print the geokeys. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_join","page":"Reference","title":"Whitebox.lidar_join","text":"lidar_join(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)\n\nJoins multiple LiDAR (LAS) files into a single LAS file.\n\nArguments\n\ninputs: Input LiDAR files. \noutput: Output LiDAR file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_kappa_index","page":"Reference","title":"Whitebox.lidar_kappa_index","text":"lidar_kappa_index(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, class_accuracy, resolution=1.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a kappa index of agreement (KIA) analysis on the classifications of two LAS files.\n\nArguments\n\ninput1: Input LiDAR classification file. \ninput2: Input LiDAR reference file. \noutput: Output HTML file. \nclass_accuracy: Output classification accuracy raster file. \nresolution: Output raster's grid resolution. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_nearest_neighbour_gridding","page":"Reference","title":"Whitebox.lidar_nearest_neighbour_gridding","text":"lidar_nearest_neighbour_gridding(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, parameter=\"elevation\", returns=\"all\", resolution=1.0, radius=2.5, exclude_cls=nothing, minz=nothing, maxz=nothing, callback::Union{Nothing,Function}=nothing)\n\nGrids LiDAR files using nearest-neighbour scheme. When the input/output parameters are not specified, the tool grids all LAS files contained within the working directory.\n\nArguments\n\ni: Input LiDAR file (including extension). \noutput: Output raster file (including extension). \nparameter: Interpolation parameter; options are 'elevation' (default), 'intensity', 'class', 'returnnumber', 'numberof_returns', 'scan angle', 'rgb', 'user data'. \nreturns: Point return types to include; options are 'all' (default), 'last', 'first'. \nresolution: Output raster's grid resolution. \nradius: Search Radius. \nexclude_cls: Optional exclude classes from interpolation; Valid class values range from 0 to 18, based on LAS specifications. Example, â€“exclude_cls='3,4,5,6,7,18'. \nminz: Optional minimum elevation for inclusion in interpolation. \nmaxz: Optional maximum elevation for inclusion in interpolation. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_point_density","page":"Reference","title":"Whitebox.lidar_point_density","text":"lidar_point_density(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, returns=\"all\", resolution=1.0, radius=2.5, exclude_cls=nothing, minz=nothing, maxz=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates the spatial pattern of point density for a LiDAR data set. When the input/output parameters are not specified, the tool grids all LAS files contained within the working directory.\n\nArguments\n\ni: Input LiDAR file (including extension). \noutput: Output raster file (including extension). \nreturns: Point return types to include; options are 'all' (default), 'last', 'first'. \nresolution: Output raster's grid resolution. \nradius: Search radius. \nexclude_cls: Optional exclude classes from interpolation; Valid class values range from 0 to 18, based on LAS specifications. Example, â€“exclude_cls='3,4,5,6,7,18'. \nminz: Optional minimum elevation for inclusion in interpolation. \nmaxz: Optional maximum elevation for inclusion in interpolation. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_point_stats","page":"Reference","title":"Whitebox.lidar_point_stats","text":"lidar_point_stats(wbt_info::WhiteboxTools = wbt_info; i=nothing, resolution=1.0, num_points=true, num_pulses=false, avg_points_per_pulse=true, z_range=false, intensity_range=false, predom_class=false, callback::Union{Nothing,Function}=nothing)\n\nCreates several rasters summarizing the distribution of LAS point data. When the input/output parameters are not specified, the tool works on all LAS files contained within the working directory.\n\nArguments\n\ni: Input LiDAR file. \nresolution: Output raster's grid resolution. \nnum_points: Flag indicating whether or not to output the number of points (returns) raster. \nnum_pulses: Flag indicating whether or not to output the number of pulses raster. \navg_points_per_pulse: Flag indicating whether or not to output the average number of points (returns) per pulse raster. \nz_range: Flag indicating whether or not to output the elevation range raster. \nintensity_range: Flag indicating whether or not to output the intensity range raster. \npredom_class: Flag indicating whether or not to output the predominant classification raster. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_ransac_planes","page":"Reference","title":"Whitebox.lidar_ransac_planes","text":"lidar_ransac_planes(wbt_info::WhiteboxTools = wbt_info; i, output, radius=2.0, num_iter=50, num_samples=5, threshold=0.35, model_size=8, max_slope=80.0, classify=false, last_returns=false, callback::Union{Nothing,Function}=nothing)\n\nPerforms a RANSAC analysis to identify points within a LiDAR point cloud that belong to linear planes.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \nradius: Search Radius. \nnum_iter: Number of iterations. \nnum_samples: Number of sample points on which to build the model. \nthreshold: Threshold used to determine inlier points. \nmodel_size: Acceptable model size. \nmax_slope: Maximum planar slope. \nclassify: Classify points as ground (2) or off-ground (1). \nlast_returns: Only include last- and only-return points. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_rbf_interpolation","page":"Reference","title":"Whitebox.lidar_rbf_interpolation","text":"lidar_rbf_interpolation(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, parameter=\"elevation\", returns=\"all\", resolution=1.0, num_points=20, exclude_cls=nothing, minz=nothing, maxz=nothing, func_type=\"ThinPlateSpline\", poly_order=\"none\", weight=5, callback::Union{Nothing,Function}=nothing)\n\nInterpolates LAS files using a radial basis function (RBF) scheme. When the input/output parameters are not specified, the tool interpolates all LAS files contained within the working directory.\n\nArguments\n\ni: Input LiDAR file (including extension). \noutput: Output raster file (including extension). \nparameter: Interpolation parameter; options are 'elevation' (default), 'intensity', 'class', 'returnnumber', 'numberof_returns', 'scan angle', 'rgb', 'user data'. \nreturns: Point return types to include; options are 'all' (default), 'last', 'first'. \nresolution: Output raster's grid resolution. \nnum_points: Number of points. \nexclude_cls: Optional exclude classes from interpolation; Valid class values range from 0 to 18, based on LAS specifications. Example, â€“exclude_cls='3,4,5,6,7,18'. \nminz: Optional minimum elevation for inclusion in interpolation. \nmaxz: Optional maximum elevation for inclusion in interpolation. \nfunc_type: Radial basis function type; options are 'ThinPlateSpline' (default), 'PolyHarmonic', 'Gaussian', 'MultiQuadric', 'InverseMultiQuadric'. \npoly_order: Polynomial order; options are 'none' (default), 'constant', 'affine'. \nweight: Weight parameter used in basis function. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_remove_duplicates","page":"Reference","title":"Whitebox.lidar_remove_duplicates","text":"lidar_remove_duplicates(wbt_info::WhiteboxTools = wbt_info; i, output, include_z=false, callback::Union{Nothing,Function}=nothing)\n\nRemoves duplicate points from a LiDAR data set.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \ninclude_z: Include z-values in point comparison?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_remove_outliers","page":"Reference","title":"Whitebox.lidar_remove_outliers","text":"lidar_remove_outliers(wbt_info::WhiteboxTools = wbt_info; i, output, radius=2.0, elev_diff=50.0, use_median=false, classify=true, callback::Union{Nothing,Function}=nothing)\n\nRemoves outliers (high and low points) in a LiDAR point cloud.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \nradius: Search Radius. \nelev_diff: Max. elevation difference. \nuse_median: Optional flag indicating whether to use the difference from median elevation rather than mean. \nclassify: Classify points as ground (2) or off-ground (1). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_rooftop_analysis","page":"Reference","title":"Whitebox.lidar_rooftop_analysis","text":"lidar_rooftop_analysis(wbt_info::WhiteboxTools = wbt_info; buildings, output, i=nothing, radius=2.0, num_iter=50, num_samples=10, threshold=0.15, model_size=15, max_slope=65.0, norm_diff=10.0, azimuth=180.0, altitude=30.0, callback::Union{Nothing,Function}=nothing)\n\nIdentifies roof segments in a LiDAR point cloud.\n\nArguments\n\ni: Input LiDAR file. \nbuildings: Input vector build footprint polygons file. \noutput: Output vector polygon file. \nradius: Search Radius. \nnum_iter: Number of iterations. \nnum_samples: Number of sample points on which to build the model. \nthreshold: Threshold used to determine inlier points (in elevation units). \nmodel_size: Acceptable model size, in points. \nmax_slope: Maximum planar slope, in degrees. \nnorm_diff: Maximum difference in normal vectors, in degrees. \nazimuth: Illumination source azimuth, in degrees. \naltitude: Illumination source altitude in degrees. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_segmentation","page":"Reference","title":"Whitebox.lidar_segmentation","text":"lidar_segmentation(wbt_info::WhiteboxTools = wbt_info; i, output, radius=2.0, num_iter=50, num_samples=10, threshold=0.15, model_size=15, max_slope=80.0, norm_diff=10.0, maxzdiff=1.0, classes=false, ground=false, callback::Union{Nothing,Function}=nothing)\n\nSegments a LiDAR point cloud based on differences in the orientation of fitted planar surfaces and point proximity.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \nradius: Search Radius. \nnum_iter: Number of iterations. \nnum_samples: Number of sample points on which to build the model. \nthreshold: Threshold used to determine inlier points. \nmodel_size: Acceptable model size. \nmax_slope: Maximum planar slope. \nnorm_diff: Maximum difference in normal vectors, in degrees. \nmaxzdiff: Maximum difference in elevation (z units) between neighbouring points of the same segment. \nclasses: Segments don't cross class boundaries. \nground: Classify the largest segment as ground points?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_segmentation_based_filter","page":"Reference","title":"Whitebox.lidar_segmentation_based_filter","text":"lidar_segmentation_based_filter(wbt_info::WhiteboxTools = wbt_info; i, output, radius=5.0, norm_diff=2.0, maxzdiff=1.0, classify=false, callback::Union{Nothing,Function}=nothing)\n\nIdentifies ground points within LiDAR point clouds using a segmentation based approach.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output file. \nradius: Search Radius. \nnorm_diff: Maximum difference in normal vectors, in degrees. \nmaxzdiff: Maximum difference in elevation (z units) between neighbouring points of the same segment. \nclassify: Classify points as ground (2) or off-ground (1). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_shift","page":"Reference","title":"Whitebox.lidar_shift","text":"lidar_shift(wbt_info::WhiteboxTools = wbt_info; i, output, x_shift=\"\", y_shift=\"\", z_shift=\"\", callback::Union{Nothing,Function}=nothing)\n\nShifts the x,y,z coordinates of a LiDAR file.\n\nArguments\n\ni: Name of the input LiDAR points. \noutput: Name of the output LiDAR points. \nx_shift: x-shift value, blank for none. \ny_shift: y-shift value, blank for none. \nz_shift: z-shift value, blank for none. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_thin","page":"Reference","title":"Whitebox.lidar_thin","text":"lidar_thin(wbt_info::WhiteboxTools = wbt_info; i, output, resolution=2.0, method=\"lowest\", save_filtered=false, callback::Union{Nothing,Function}=nothing)\n\nThins a LiDAR point cloud, reducing point density.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \nresolution: The size of the square area used to evaluate nearby points in the LiDAR data. \nmethod: Point selection method; options are 'first', 'last', 'lowest' (default), 'highest', 'nearest'. \nsave_filtered: Save filtered points to separate file?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_thin_high_density","page":"Reference","title":"Whitebox.lidar_thin_high_density","text":"lidar_thin_high_density(wbt_info::WhiteboxTools = wbt_info; i, output, density, resolution=1.0, save_filtered=false, callback::Union{Nothing,Function}=nothing)\n\nThins points from high density areas within a LiDAR point cloud.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \nresolution: Output raster's grid resolution. \ndensity: Max. point density (points / m^3). \nsave_filtered: Save filtered points to separate file?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_tile","page":"Reference","title":"Whitebox.lidar_tile","text":"lidar_tile(wbt_info::WhiteboxTools = wbt_info; i, width=1000.0, height=1000.0, origin_x=0.0, origin_y=0.0, min_points=2, callback::Union{Nothing,Function}=nothing)\n\nTiles a LiDAR LAS file into multiple LAS files.\n\nArguments\n\ni: Input LiDAR file. \nwidth: Width of tiles in the X dimension; default 1000.0. \nheight: Height of tiles in the Y dimension. \norigin_x: Origin point X coordinate for tile grid. \norigin_y: Origin point Y coordinate for tile grid. \nmin_points: Minimum number of points contained in a tile for it to be saved. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_tile_footprint","page":"Reference","title":"Whitebox.lidar_tile_footprint","text":"lidar_tile_footprint(wbt_info::WhiteboxTools = wbt_info; output, i=nothing, hull=false, callback::Union{Nothing,Function}=nothing)\n\nCreates a vector polygon of the convex hull of a LiDAR point cloud. When the input/output parameters are not specified, the tool works with all LAS files contained within the working directory.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output vector polygon file. \nhull: Identify the convex hull around points. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_tin_gridding","page":"Reference","title":"Whitebox.lidar_tin_gridding","text":"lidar_tin_gridding(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, parameter=\"elevation\", returns=\"all\", resolution=1.0, exclude_cls=\"7,18\", minz=nothing, maxz=nothing, max_triangle_edge_length=nothing, callback::Union{Nothing,Function}=nothing)\n\nCreates a raster grid based on a Delaunay triangular irregular network (TIN) fitted to LiDAR points.\n\nArguments\n\ni: Input LiDAR file (including extension). \noutput: Output raster file (including extension). \nparameter: Interpolation parameter; options are 'elevation' (default), 'intensity', 'class', 'returnnumber', 'numberof_returns', 'scan angle', 'rgb', 'user data'. \nreturns: Point return types to include; options are 'all' (default), 'last', 'first'. \nresolution: Output raster's grid resolution. \nexclude_cls: Optional exclude classes from interpolation; Valid class values range from 0 to 18, based on LAS specifications. Example, â€“exclude_cls='3,4,5,6,7,18'. \nminz: Optional minimum elevation for inclusion in interpolation. \nmaxz: Optional maximum elevation for inclusion in interpolation. \nmax_triangle_edge_length: Optional maximum triangle edge length; triangles larger than this size will not be gridded. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lidar_tophat_transform","page":"Reference","title":"Whitebox.lidar_tophat_transform","text":"lidar_tophat_transform(wbt_info::WhiteboxTools = wbt_info; i, output, radius=1.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a white top-hat transform on a Lidar dataset; as an estimate of height above ground, this is useful for modelling the vegetation canopy.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \nradius: Search Radius. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.line_detection_filter","page":"Reference","title":"Whitebox.line_detection_filter","text":"line_detection_filter(wbt_info::WhiteboxTools = wbt_info; i, output, variant=\"vertical\", absvals=false, clip=0.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a line-detection filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nvariant: Optional variant value. Options include 'v' (vertical), 'h' (horizontal), '45', and '135' (default is 'v'). \nabsvals: Optional flag indicating whether outputs should be absolute values. \nclip: Optional amount to clip the distribution tails by, in percent. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.line_intersections","page":"Reference","title":"Whitebox.line_intersections","text":"line_intersections(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nIdentifies points where the features of two vector line layers intersect.\n\nArguments\n\ninput1: Input vector polyline file. \ninput2: Input vector polyline file. \noutput: Output vector point file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.line_thinning","page":"Reference","title":"Whitebox.line_thinning","text":"line_thinning(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms line thinning a on Boolean raster image; intended to be used with the RemoveSpurs tool.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.linearity_index","page":"Reference","title":"Whitebox.linearity_index","text":"linearity_index(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nCalculates the linearity index for vector polygons.\n\nArguments\n\ni: Input vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lines_to_polygons","page":"Reference","title":"Whitebox.lines_to_polygons","text":"lines_to_polygons(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nConverts vector polylines to polygons.\n\nArguments\n\ni: Input vector line file. \noutput: Output vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.list_tools","page":"Reference","title":"Whitebox.list_tools","text":"list_tools(keywords::Vector{String}=[\"\"], wbt_info::WhiteboxTools = wbt_info; return_obj::Bool = false)\n\nLists all available tools in WhiteboxTools.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.list_unique_values","page":"Reference","title":"Whitebox.list_unique_values","text":"list_unique_values(wbt_info::WhiteboxTools = wbt_info; i, field, output, callback::Union{Nothing,Function}=nothing)\n\nLists the unique values contained in a field within a vector's attribute table.\n\nArguments\n\ni: Input raster file. \nfield: Input field name in attribute table. \noutput: Output HTML file (default name will be based on input file if unspecified). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.ln","page":"Reference","title":"Whitebox.ln","text":"ln(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the natural logarithm of values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.local_quadratic_regression","page":"Reference","title":"Whitebox.local_quadratic_regression","text":"local_quadratic_regression(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=3, callback::Union{Nothing,Function}=nothing)\n\nThis tool is an implementation of the constrained quadratic regression algorithm using a flexible window size described in Wood (1996).\n\nArguments\n\ndem: Name of the input DEM raster file. \noutput: Name of the output raster file. \nfilter: Edge length of the filter kernel. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.log10","page":"Reference","title":"Whitebox.log10","text":"log10(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the base-10 logarithm of values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.log2","page":"Reference","title":"Whitebox.log2","text":"log2(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the base-2 logarithm of values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.long_profile","page":"Reference","title":"Whitebox.long_profile","text":"long_profile(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, dem, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nPlots the stream longitudinal profiles for one or more rivers.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \ndem: Input raster DEM file. \noutput: Output HTML file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.long_profile_from_points","page":"Reference","title":"Whitebox.long_profile_from_points","text":"long_profile_from_points(wbt_info::WhiteboxTools = wbt_info; d8_pntr, points, dem, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nPlots the longitudinal profiles from flow-paths initiating from a set of vector points.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \npoints: Input vector points file. \ndem: Input raster DEM file. \noutput: Output HTML file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.longest_flowpath","page":"Reference","title":"Whitebox.longest_flowpath","text":"longest_flowpath(wbt_info::WhiteboxTools = wbt_info; dem, basins, output, callback::Union{Nothing,Function}=nothing)\n\nDelineates the longest flowpaths for a group of subbasins or watersheds.\n\nArguments\n\ndem: Input raster DEM file. \nbasins: Input raster basins file. \noutput: Output vector file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.lowest_position","page":"Reference","title":"Whitebox.lowest_position","text":"lowest_position(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)\n\nIdentifies the stack position of the minimum value within a raster stack on a cell-by-cell basis.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.majority_filter","page":"Reference","title":"Whitebox.majority_filter","text":"majority_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nAssigns each cell in the output grid the most frequently occurring value (mode) in a moving window centred on each grid cell in the input raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.map_off_terrain_objects","page":"Reference","title":"Whitebox.map_off_terrain_objects","text":"map_off_terrain_objects(wbt_info::WhiteboxTools = wbt_info; dem, output, max_slope=40.0, min_size=1, callback::Union{Nothing,Function}=nothing)\n\nMaps off-terrain objects in a digital elevation model (DEM).\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nmax_slope: Maximum inter-cell absolute slope. \nmin_size: Minimum feature size, in grid cells. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.max","page":"Reference","title":"Whitebox.max","text":"max(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a MAX operation on two rasters or a raster and a constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.max_absolute_overlay","page":"Reference","title":"Whitebox.max_absolute_overlay","text":"max_absolute_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)\n\nEvaluates the maximum absolute value for each grid cell from a stack of input rasters.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.max_anisotropy_dev","page":"Reference","title":"Whitebox.max_anisotropy_dev","text":"max_anisotropy_dev(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, max_scale, min_scale=3, step=2, callback::Union{Nothing,Function}=nothing)\n\nCalculates the maximum anisotropy (directionality) in elevation deviation over a range of spatial scales.\n\nArguments\n\ndem: Input raster DEM file. \nout_mag: Output raster DEVmax magnitude file. \nout_scale: Output raster DEVmax scale file. \nmin_scale: Minimum search neighbourhood radius in grid cells. \nmax_scale: Maximum search neighbourhood radius in grid cells. \nstep: Step size as any positive non-zero integer. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.max_anisotropy_dev_signature","page":"Reference","title":"Whitebox.max_anisotropy_dev_signature","text":"max_anisotropy_dev_signature(wbt_info::WhiteboxTools = wbt_info; dem, points, output, max_scale, min_scale=1, step=1, callback::Union{Nothing,Function}=nothing)\n\nCalculates the anisotropy in deviation from mean for points over a range of spatial scales.\n\nArguments\n\ndem: Input raster DEM file. \npoints: Input vector points file. \noutput: Output HTML file. \nmin_scale: Minimum search neighbourhood radius in grid cells. \nmax_scale: Maximum search neighbourhood radius in grid cells. \nstep: Step size as any positive non-zero integer. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.max_branch_length","page":"Reference","title":"Whitebox.max_branch_length","text":"max_branch_length(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, callback::Union{Nothing,Function}=nothing)\n\nLindsay and Seibert's (2013) branch length index is used to map drainage divides or ridge lines.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nlog: Optional flag to request the output be log-transformed. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.max_difference_from_mean","page":"Reference","title":"Whitebox.max_difference_from_mean","text":"max_difference_from_mean(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, min_scale, max_scale, step=1, callback::Union{Nothing,Function}=nothing)\n\nCalculates the maximum difference from mean elevation over a range of spatial scales.\n\nArguments\n\ndem: Input raster DEM file. \nout_mag: Output raster DIFFmax magnitude file. \nout_scale: Output raster DIFFmax scale file. \nmin_scale: Minimum search neighbourhood radius in grid cells. \nmax_scale: Maximum search neighbourhood radius in grid cells. \nstep: Step size as any positive non-zero integer. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.max_downslope_elev_change","page":"Reference","title":"Whitebox.max_downslope_elev_change","text":"max_downslope_elev_change(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the maximum downslope change in elevation between a grid cell and its eight downslope neighbors.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.max_elev_dev_signature","page":"Reference","title":"Whitebox.max_elev_dev_signature","text":"max_elev_dev_signature(wbt_info::WhiteboxTools = wbt_info; dem, points, output, min_scale, max_scale, step=10, callback::Union{Nothing,Function}=nothing)\n\nCalculates the maximum elevation deviation over a range of spatial scales and for a set of points.\n\nArguments\n\ndem: Input raster DEM file. \npoints: Input vector points file. \noutput: Output HTML file. \nmin_scale: Minimum search neighbourhood radius in grid cells. \nmax_scale: Maximum search neighbourhood radius in grid cells. \nstep: Step size as any positive non-zero integer. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.max_elevation_deviation","page":"Reference","title":"Whitebox.max_elevation_deviation","text":"max_elevation_deviation(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, min_scale, max_scale, step=1, callback::Union{Nothing,Function}=nothing)\n\nCalculates the maximum elevation deviation over a range of spatial scales.\n\nArguments\n\ndem: Input raster DEM file. \nout_mag: Output raster DEVmax magnitude file. \nout_scale: Output raster DEVmax scale file. \nmin_scale: Minimum search neighbourhood radius in grid cells. \nmax_scale: Maximum search neighbourhood radius in grid cells. \nstep: Step size as any positive non-zero integer. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.max_overlay","page":"Reference","title":"Whitebox.max_overlay","text":"max_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)\n\nEvaluates the maximum value for each grid cell from a stack of input rasters.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.max_upslope_elev_change","page":"Reference","title":"Whitebox.max_upslope_elev_change","text":"max_upslope_elev_change(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the maximum upslope change in elevation between a grid cell and its eight downslope neighbors.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.max_upslope_flowpath_length","page":"Reference","title":"Whitebox.max_upslope_flowpath_length","text":"max_upslope_flowpath_length(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nMeasures the maximum length of all upslope flowpaths draining each grid cell.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.maximal_curvature","page":"Reference","title":"Whitebox.maximal_curvature","text":"maximal_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates a mean curvature raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nlog: Display output values using a log-scale. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.maximum_filter","page":"Reference","title":"Whitebox.maximum_filter","text":"maximum_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nAssigns each cell in the output grid the maximum value in a moving window centred on each grid cell in the input raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.md_inf_flow_accumulation","page":"Reference","title":"Whitebox.md_inf_flow_accumulation","text":"md_inf_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; dem, output, out_type=\"specific contributing area\", exponent=1.1, threshold=nothing, log=false, clip=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates an FD8 flow accumulation raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nout_type: Output type; one of 'cells', 'specific contributing area' (default), and 'catchment area'. \nexponent: Optional exponent parameter; default is 1.1. \nthreshold: Optional convergence threshold parameter, in grid cells; default is infinity. \nlog: Optional flag to request the output be log-transformed. \nclip: Optional flag to request clipping the display max by 1%. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.mean_curvature","page":"Reference","title":"Whitebox.mean_curvature","text":"mean_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates a mean curvature raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nlog: Display output values using a log-scale. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.mean_filter","page":"Reference","title":"Whitebox.mean_filter","text":"mean_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=3, filtery=3, callback::Union{Nothing,Function}=nothing)\n\nPerforms a mean filter (low-pass filter) on an input image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.median_filter","page":"Reference","title":"Whitebox.median_filter","text":"median_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, sig_digits=2, callback::Union{Nothing,Function}=nothing)\n\nPerforms a median filter on an input image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \nsig_digits: Number of significant digits. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.medoid","page":"Reference","title":"Whitebox.medoid","text":"medoid(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the medoid for a series of vector features contained in a shapefile.\n\nArguments\n\ni: Input vector file. \noutput: Output vector file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.merge_line_segments","page":"Reference","title":"Whitebox.merge_line_segments","text":"merge_line_segments(wbt_info::WhiteboxTools = wbt_info; i, output, snap=0.0, callback::Union{Nothing,Function}=nothing)\n\nMerges vector line segments into larger features.\n\nArguments\n\ni: Input vector file. \noutput: Output vector file. \nsnap: Snap tolerance. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.merge_table_with_csv","page":"Reference","title":"Whitebox.merge_table_with_csv","text":"merge_table_with_csv(wbt_info::WhiteboxTools = wbt_info; i, pkey, csv, fkey, import_field=nothing, callback::Union{Nothing,Function}=nothing)\n\nMerge a vector's attribute table with a table contained within a CSV text file.\n\nArguments\n\ni: Input primary vector file (i.e. the table to be modified). \npkey: Primary key field. \ncsv: Input CSV file (i.e. source of data to be imported). \nfkey: Foreign key field. \nimport_field: Imported field (all fields will be imported if not specified). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.merge_vectors","page":"Reference","title":"Whitebox.merge_vectors","text":"merge_vectors(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)\n\nCombines two or more input vectors of the same ShapeType creating a single, new output vector.\n\nArguments\n\ninputs: Input vector files. \noutput: Output vector file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.min","page":"Reference","title":"Whitebox.min","text":"min(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a MIN operation on two rasters or a raster and a constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.min_absolute_overlay","page":"Reference","title":"Whitebox.min_absolute_overlay","text":"min_absolute_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)\n\nEvaluates the minimum absolute value for each grid cell from a stack of input rasters.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.min_downslope_elev_change","page":"Reference","title":"Whitebox.min_downslope_elev_change","text":"min_downslope_elev_change(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the minimum downslope change in elevation between a grid cell and its eight downslope neighbors.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.min_max_contrast_stretch","page":"Reference","title":"Whitebox.min_max_contrast_stretch","text":"min_max_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, min_val, max_val, num_tones=256, callback::Union{Nothing,Function}=nothing)\n\nPerforms a min-max contrast stretch on an input greytone image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nmin_val: Lower tail clip value. \nmax_val: Upper tail clip value. \nnum_tones: Number of tones in the output image. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.min_overlay","page":"Reference","title":"Whitebox.min_overlay","text":"min_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)\n\nEvaluates the minimum value for each grid cell from a stack of input rasters.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.minimal_curvature","page":"Reference","title":"Whitebox.minimal_curvature","text":"minimal_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates a mean curvature raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nlog: Display output values using a log-scale. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.minimum_bounding_box","page":"Reference","title":"Whitebox.minimum_bounding_box","text":"minimum_bounding_box(wbt_info::WhiteboxTools = wbt_info; i, output, criterion=\"area\", features=true, callback::Union{Nothing,Function}=nothing)\n\nCreates a vector minimum bounding rectangle around vector features.\n\nArguments\n\ni: Input vector file. \noutput: Output vector polygon file. \ncriterion: Minimization criterion; options include 'area' (default), 'length', 'width', and 'perimeter'. \nfeatures: Find the minimum bounding rectangles around each individual vector feature. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.minimum_bounding_circle","page":"Reference","title":"Whitebox.minimum_bounding_circle","text":"minimum_bounding_circle(wbt_info::WhiteboxTools = wbt_info; i, output, features=true, callback::Union{Nothing,Function}=nothing)\n\nDelineates the minimum bounding circle (i.e. smallest enclosing circle) for a group of vectors.\n\nArguments\n\ni: Input vector file. \noutput: Output vector polygon file. \nfeatures: Find the minimum bounding circle around each individual vector feature. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.minimum_bounding_envelope","page":"Reference","title":"Whitebox.minimum_bounding_envelope","text":"minimum_bounding_envelope(wbt_info::WhiteboxTools = wbt_info; i, output, features=true, callback::Union{Nothing,Function}=nothing)\n\nCreates a vector axis-aligned minimum bounding rectangle (envelope) around vector features.\n\nArguments\n\ni: Input vector file. \noutput: Output vector polygon file. \nfeatures: Find the minimum bounding envelop around each individual vector feature. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.minimum_convex_hull","page":"Reference","title":"Whitebox.minimum_convex_hull","text":"minimum_convex_hull(wbt_info::WhiteboxTools = wbt_info; i, output, features=true, callback::Union{Nothing,Function}=nothing)\n\nCreates a vector convex polygon around vector features.\n\nArguments\n\ni: Input vector file. \noutput: Output vector polygon file. \nfeatures: Find the hulls around each vector feature. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.minimum_filter","page":"Reference","title":"Whitebox.minimum_filter","text":"minimum_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nAssigns each cell in the output grid the minimum value in a moving window centred on each grid cell in the input raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.modified_k_means_clustering","page":"Reference","title":"Whitebox.modified_k_means_clustering","text":"modified_k_means_clustering(wbt_info::WhiteboxTools = wbt_info; inputs, output, out_html=nothing, start_clusters=1000, merge_dist=nothing, max_iterations=10, class_change=2.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a modified k-means clustering operation on a multi-spectral dataset.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \nout_html: Output HTML report file. \nstart_clusters: Initial number of clusters. \nmerge_dist: Cluster merger distance. \nmax_iterations: Maximum number of iterations. \nclass_change: Minimum percent of cells changed between iterations before completion. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.modify_no_data_value","page":"Reference","title":"Whitebox.modify_no_data_value","text":"modify_no_data_value(wbt_info::WhiteboxTools = wbt_info; i, new_value=\"-32768.0\", callback::Union{Nothing,Function}=nothing)\n\nConverts nodata values in a raster to zero.\n\nArguments\n\ni: Input raster file. \nnew_value: New NoData value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.modulo","page":"Reference","title":"Whitebox.modulo","text":"modulo(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a modulo operation on two rasters or a raster and a constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.mosaic","page":"Reference","title":"Whitebox.mosaic","text":"mosaic(wbt_info::WhiteboxTools = wbt_info; output, inputs=nothing, method=\"nn\", callback::Union{Nothing,Function}=nothing)\n\nMosaics two or more images together.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \nmethod: Resampling method; options include 'nn' (nearest neighbour), 'bilinear', and 'cc' (cubic convolution). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.mosaic_with_feathering","page":"Reference","title":"Whitebox.mosaic_with_feathering","text":"mosaic_with_feathering(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, method=\"cc\", weight=4.0, callback::Union{Nothing,Function}=nothing)\n\nMosaics two images together using a feathering technique in overlapping areas to reduce edge-effects.\n\nArguments\n\ninput1: Input raster file to modify. \ninput2: Input reference raster file. \noutput: Output raster file. \nmethod: Resampling method; options include 'nn' (nearest neighbour), 'bilinear', and 'cc' (cubic convolution). \nweight: . \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.multi_part_to_single_part","page":"Reference","title":"Whitebox.multi_part_to_single_part","text":"multi_part_to_single_part(wbt_info::WhiteboxTools = wbt_info; i, output, exclude_holes=true, callback::Union{Nothing,Function}=nothing)\n\nConverts a vector file containing multi-part features into a vector containing only single-part features.\n\nArguments\n\ni: Input vector line or polygon file. \noutput: Output vector line or polygon file. \nexclude_holes: Exclude hole parts from the feature splitting? (holes will continue to belong to their features in output.). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.multidirectional_hillshade","page":"Reference","title":"Whitebox.multidirectional_hillshade","text":"multidirectional_hillshade(wbt_info::WhiteboxTools = wbt_info; dem, output, altitude=45.0, zfactor=nothing, full_mode=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates a multi-direction hillshade raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \naltitude: Illumination source altitude in degrees. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \nfull_mode: Optional flag indicating whether to use full 360-degrees of illumination sources. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.multiply","page":"Reference","title":"Whitebox.multiply","text":"multiply(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a multiplication operation on two rasters or a raster and a constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.multiscale_elevation_percentile","page":"Reference","title":"Whitebox.multiscale_elevation_percentile","text":"multiscale_elevation_percentile(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, sig_digits=3, min_scale=4, step=1, num_steps=10, step_nonlinearity=1.0, callback::Union{Nothing,Function}=nothing)\n\nCalculates surface roughness over a range of spatial scales.\n\nArguments\n\ndem: Input raster DEM file. \nout_mag: Output raster roughness magnitude file. \nout_scale: Output raster roughness scale file. \nsig_digits: Number of significant digits. \nmin_scale: Minimum search neighbourhood radius in grid cells. \nstep: Step size as any positive non-zero integer. \nnum_steps: Number of steps. \nstep_nonlinearity: Step nonlinearity factor (1.0-2.0 is typical). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.multiscale_roughness","page":"Reference","title":"Whitebox.multiscale_roughness","text":"multiscale_roughness(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, max_scale, min_scale=1, step=1, callback::Union{Nothing,Function}=nothing)\n\nCalculates surface roughness over a range of spatial scales.\n\nArguments\n\ndem: Input raster DEM file. \nout_mag: Output raster roughness magnitude file. \nout_scale: Output raster roughness scale file. \nmin_scale: Minimum search neighbourhood radius in grid cells. \nmax_scale: Maximum search neighbourhood radius in grid cells. \nstep: Step size as any positive non-zero integer. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.multiscale_roughness_signature","page":"Reference","title":"Whitebox.multiscale_roughness_signature","text":"multiscale_roughness_signature(wbt_info::WhiteboxTools = wbt_info; dem, points, output, max_scale, min_scale=1, step=1, callback::Union{Nothing,Function}=nothing)\n\nCalculates the surface roughness for points over a range of spatial scales.\n\nArguments\n\ndem: Input raster DEM file. \npoints: Input vector points file. \noutput: Output HTML file. \nmin_scale: Minimum search neighbourhood radius in grid cells. \nmax_scale: Maximum search neighbourhood radius in grid cells. \nstep: Step size as any positive non-zero integer. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.multiscale_std_dev_normals","page":"Reference","title":"Whitebox.multiscale_std_dev_normals","text":"multiscale_std_dev_normals(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, min_scale=1, step=1, num_steps=10, step_nonlinearity=1.0, callback::Union{Nothing,Function}=nothing)\n\nCalculates surface roughness over a range of spatial scales.\n\nArguments\n\ndem: Input raster DEM file. \nout_mag: Output raster roughness magnitude file. \nout_scale: Output raster roughness scale file. \nmin_scale: Minimum search neighbourhood radius in grid cells. \nstep: Step size as any positive non-zero integer. \nnum_steps: Number of steps. \nstep_nonlinearity: Step nonlinearity factor (1.0-2.0 is typical). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.multiscale_std_dev_normals_signature","page":"Reference","title":"Whitebox.multiscale_std_dev_normals_signature","text":"multiscale_std_dev_normals_signature(wbt_info::WhiteboxTools = wbt_info; dem, points, output, min_scale=1, step=1, num_steps=10, step_nonlinearity=1.0, callback::Union{Nothing,Function}=nothing)\n\nCalculates the surface roughness for points over a range of spatial scales.\n\nArguments\n\ndem: Input raster DEM file. \npoints: Input vector points file. \noutput: Output HTML file. \nmin_scale: Minimum search neighbourhood radius in grid cells. \nstep: Step size as any positive non-zero integer. \nnum_steps: Number of steps. \nstep_nonlinearity: Step nonlinearity factor (1.0-2.0 is typical). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.multiscale_topographic_position_image","page":"Reference","title":"Whitebox.multiscale_topographic_position_image","text":"multiscale_topographic_position_image(wbt_info::WhiteboxTools = wbt_info; localrast, meso, broad, output, lightness=1.2, callback::Union{Nothing,Function}=nothing)\n\nCreates a multiscale topographic position image from three DEVmax rasters of differing spatial scale ranges.\n\nArguments\n\nlocalrast: Input local-scale topographic position (DEVmax) raster file. \nmeso: Input meso-scale topographic position (DEVmax) raster file. \nbroad: Input broad-scale topographic position (DEVmax) raster file. \noutput: Output raster file. \nlightness: Image lightness value (default is 1.2). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.narrowness_index","page":"Reference","title":"Whitebox.narrowness_index","text":"narrowness_index(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the narrowness of raster polygons.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.natural_neighbour_interpolation","page":"Reference","title":"Whitebox.natural_neighbour_interpolation","text":"natural_neighbour_interpolation(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, use_z=false, cell_size=nothing, base=nothing, clip=true, callback::Union{Nothing,Function}=nothing)\n\nCreates a raster grid based on Sibson's natural neighbour method.\n\nArguments\n\ni: Input vector points file. \nfield: Input field name in attribute table. \nuse_z: Use the 'z' dimension of the Shapefile's geometry instead of an attribute field?. \noutput: Output raster file. \ncell_size: Optionally specified cell size of output raster. Not used when base raster is specified. \nbase: Optionally specified input base raster file. Not used when a cell size is specified. \nclip: Clip the data to the convex hull of the points?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.nearest_neighbour_gridding","page":"Reference","title":"Whitebox.nearest_neighbour_gridding","text":"nearest_neighbour_gridding(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, cell_size=nothing, base=nothing, max_dist=nothing, callback::Union{Nothing,Function}=nothing)\n\nCreates a raster grid based on a set of vector points and assigns grid values using the nearest neighbour.\n\nArguments\n\ni: Input vector Points file. \nfield: Input field name in attribute table. \nuse_z: Use z-coordinate instead of field?. \noutput: Output raster file. \ncell_size: Optionally specified cell size of output raster. Not used when base raster is specified. \nbase: Optionally specified input base raster file. Not used when a cell size is specified. \nmax_dist: Maximum search distance (optional). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.negate","page":"Reference","title":"Whitebox.negate","text":"negate(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nChanges the sign of values in a raster or the 0-1 values of a Boolean raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.new_raster_from_base","page":"Reference","title":"Whitebox.new_raster_from_base","text":"new_raster_from_base(wbt_info::WhiteboxTools = wbt_info; base, output, value=\"nodata\", data_type=\"float\", cell_size=nothing, callback::Union{Nothing,Function}=nothing)\n\nCreates a new raster using a base image.\n\nArguments\n\nbase: Input base raster file. \noutput: Output raster file. \nvalue: Constant value to fill raster with; either 'nodata' or numeric value. \ndata_type: Output raster data type; options include 'double' (64-bit), 'float' (32-bit), and 'integer' (signed 16-bit) (default is 'float'). \ncell_size: Optionally specified cell size of output raster. Not used when base raster is specified. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.normal_vectors","page":"Reference","title":"Whitebox.normal_vectors","text":"normal_vectors(wbt_info::WhiteboxTools = wbt_info; i, output, radius=1.0, callback::Union{Nothing,Function}=nothing)\n\nCalculates normal vectors for points within a LAS file and stores these data (XYZ vector components) in the RGB field.\n\nArguments\n\ni: Input LiDAR file. \noutput: Output LiDAR file. \nradius: Search Radius. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.normalized_difference_index","page":"Reference","title":"Whitebox.normalized_difference_index","text":"normalized_difference_index(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, clip=0.0, correction=0.0, callback::Union{Nothing,Function}=nothing)\n\nCalculate a normalized-difference index (NDI) from two bands of multispectral image data.\n\nArguments\n\ninput1: Input image 1 (e.g. near-infrared band). \ninput2: Input image 2 (e.g. red band). \noutput: Output raster file. \nclip: Optional amount to clip the distribution tails by, in percent. \ncorrection: Optional adjustment value (e.g. 1, or 0.16 for the optimal soil adjusted vegetation index, OSAVI). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.not_equal_to","page":"Reference","title":"Whitebox.not_equal_to","text":"not_equal_to(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a not-equal-to comparison operation on two rasters or a raster and a constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.num_downslope_neighbours","page":"Reference","title":"Whitebox.num_downslope_neighbours","text":"num_downslope_neighbours(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the number of downslope neighbours to each grid cell in a DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.num_inflowing_neighbours","page":"Reference","title":"Whitebox.num_inflowing_neighbours","text":"num_inflowing_neighbours(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nComputes the number of inflowing neighbours to each cell in an input DEM based on the D8 algorithm.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.num_upslope_neighbours","page":"Reference","title":"Whitebox.num_upslope_neighbours","text":"num_upslope_neighbours(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the number of upslope neighbours to each grid cell in a DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.olympic_filter","page":"Reference","title":"Whitebox.olympic_filter","text":"olympic_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nPerforms an olympic smoothing filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.opening","page":"Reference","title":"Whitebox.opening","text":"opening(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nAn opening is a mathematical morphology operation involving a dilation (max filter) of an erosion (min filter) set.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.paired_sample_t_test","page":"Reference","title":"Whitebox.paired_sample_t_test","text":"paired_sample_t_test(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, num_samples=nothing, callback::Union{Nothing,Function}=nothing)\n\nPerforms a 2-sample K-S test for significant differences on two input rasters.\n\nArguments\n\ninput1: First input raster file. \ninput2: Second input raster file. \noutput: Output HTML file. \nnum_samples: Number of samples. Leave blank to use whole image. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.panchromatic_sharpening","page":"Reference","title":"Whitebox.panchromatic_sharpening","text":"panchromatic_sharpening(wbt_info::WhiteboxTools = wbt_info; pan, output, red=nothing, green=nothing, blue=nothing, composite=nothing, method=\"brovey\", callback::Union{Nothing,Function}=nothing)\n\nIncreases the spatial resolution of image data by combining multispectral bands with panchromatic data.\n\nArguments\n\nred: Input red band image file. Optionally specified if colour-composite not specified. \ngreen: Input green band image file. Optionally specified if colour-composite not specified. \nblue: Input blue band image file. Optionally specified if colour-composite not specified. \ncomposite: Input colour-composite image file. Only used if individual bands are not specified. \npan: Input panchromatic band file. \noutput: Output colour composite file. \nmethod: Options include 'brovey' (default) and 'ihs'. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.patch_orientation","page":"Reference","title":"Whitebox.patch_orientation","text":"patch_orientation(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nCalculates the orientation of vector polygons.\n\nArguments\n\ni: Input vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.pennock_landform_class","page":"Reference","title":"Whitebox.pennock_landform_class","text":"pennock_landform_class(wbt_info::WhiteboxTools = wbt_info; dem, output, slope=3.0, prof=0.1, plan=0.0, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nClassifies hillslope zones based on slope, profile curvature, and plan curvature.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nslope: Slope threshold value, in degrees (default is 3.0). \nprof: Profile curvature threshold value (default is 0.1). \nplan: Plan curvature threshold value (default is 0.0). \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.percent_elev_range","page":"Reference","title":"Whitebox.percent_elev_range","text":"percent_elev_range(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=3, filtery=3, callback::Union{Nothing,Function}=nothing)\n\nCalculates percent of elevation range from a DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.percent_equal_to","page":"Reference","title":"Whitebox.percent_equal_to","text":"percent_equal_to(wbt_info::WhiteboxTools = wbt_info; inputs, comparison, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the percentage of a raster stack that have cell values equal to an input on a cell-by-cell basis.\n\nArguments\n\ninputs: Input raster files. \ncomparison: Input comparison raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.percent_greater_than","page":"Reference","title":"Whitebox.percent_greater_than","text":"percent_greater_than(wbt_info::WhiteboxTools = wbt_info; inputs, comparison, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the percentage of a raster stack that have cell values greater than an input on a cell-by-cell basis.\n\nArguments\n\ninputs: Input raster files. \ncomparison: Input comparison raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.percent_less_than","page":"Reference","title":"Whitebox.percent_less_than","text":"percent_less_than(wbt_info::WhiteboxTools = wbt_info; inputs, comparison, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the percentage of a raster stack that have cell values less than an input on a cell-by-cell basis.\n\nArguments\n\ninputs: Input raster files. \ncomparison: Input comparison raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.percentage_contrast_stretch","page":"Reference","title":"Whitebox.percentage_contrast_stretch","text":"percentage_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, clip=1.0, tail=\"both\", num_tones=256, callback::Union{Nothing,Function}=nothing)\n\nPerforms a percentage linear contrast stretch on input images.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nclip: Optional amount to clip the distribution tails by, in percent. \ntail: Specified which tails to clip; options include 'upper', 'lower', and 'both' (default is 'both'). \nnum_tones: Number of tones in the output image. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.percentile_filter","page":"Reference","title":"Whitebox.percentile_filter","text":"percentile_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, sig_digits=2, callback::Union{Nothing,Function}=nothing)\n\nPerforms a percentile filter on an input image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \nsig_digits: Number of significant digits. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.perimeter_area_ratio","page":"Reference","title":"Whitebox.perimeter_area_ratio","text":"perimeter_area_ratio(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nCalculates the perimeter-area ratio of vector polygons.\n\nArguments\n\ni: Input vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.pick_from_list","page":"Reference","title":"Whitebox.pick_from_list","text":"pick_from_list(wbt_info::WhiteboxTools = wbt_info; inputs, pos_input, output, callback::Union{Nothing,Function}=nothing)\n\nOutputs the value from a raster stack specified by a position raster.\n\nArguments\n\ninputs: Input raster files. \npos_input: Input position raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.plan_curvature","page":"Reference","title":"Whitebox.plan_curvature","text":"plan_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates a plan (contour) curvature raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nlog: Display output values using a log-scale. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.polygon_area","page":"Reference","title":"Whitebox.polygon_area","text":"polygon_area(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nCalculates the area of vector polygons.\n\nArguments\n\ni: Input vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.polygon_long_axis","page":"Reference","title":"Whitebox.polygon_long_axis","text":"polygon_long_axis(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nThis tool can be used to map the long axis of polygon features.\n\nArguments\n\ni: Input vector polygons file. \noutput: Output vector polyline file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.polygon_perimeter","page":"Reference","title":"Whitebox.polygon_perimeter","text":"polygon_perimeter(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nCalculates the perimeter of vector polygons.\n\nArguments\n\ni: Input vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.polygon_short_axis","page":"Reference","title":"Whitebox.polygon_short_axis","text":"polygon_short_axis(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nThis tool can be used to map the short axis of polygon features.\n\nArguments\n\ni: Input vector polygons file. \noutput: Output vector polyline file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.polygonize","page":"Reference","title":"Whitebox.polygonize","text":"polygonize(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)\n\nCreates a polygon layer from two or more intersecting line features contained in one or more input vector line files.\n\nArguments\n\ninputs: Input vector polyline file. \noutput: Output vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.polygons_to_lines","page":"Reference","title":"Whitebox.polygons_to_lines","text":"polygons_to_lines(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nConverts vector polygons to polylines.\n\nArguments\n\ni: Input vector polygon file. \noutput: Output vector lines file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.power","page":"Reference","title":"Whitebox.power","text":"power(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nRaises the values in grid cells of one rasters, or a constant value, by values in another raster or constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.prewitt_filter","page":"Reference","title":"Whitebox.prewitt_filter","text":"prewitt_filter(wbt_info::WhiteboxTools = wbt_info; i, output, clip=0.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a Prewitt edge-detection filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nclip: Optional amount to clip the distribution tails by, in percent. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.principal_component_analysis","page":"Reference","title":"Whitebox.principal_component_analysis","text":"principal_component_analysis(wbt_info::WhiteboxTools = wbt_info; inputs, output, num_comp=nothing, standardized=false, callback::Union{Nothing,Function}=nothing)\n\nPerforms a principal component analysis (PCA) on a multi-spectral dataset.\n\nArguments\n\ninputs: Input raster files. \noutput: Output HTML report file. \nnum_comp: Number of component images to output; <= to num. input images. \nstandardized: Perform standardized PCA?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.print_geo_tiff_tags","page":"Reference","title":"Whitebox.print_geo_tiff_tags","text":"print_geo_tiff_tags(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nPrints the tags within a GeoTIFF.\n\nArguments\n\ni: Input GeoTIFF file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.profile","page":"Reference","title":"Whitebox.profile","text":"profile(wbt_info::WhiteboxTools = wbt_info; lines, surface, output, callback::Union{Nothing,Function}=nothing)\n\nPlots profiles from digital surface models.\n\nArguments\n\nlines: Input vector line file. \nsurface: Input raster surface file. \noutput: Output HTML file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.profile_curvature","page":"Reference","title":"Whitebox.profile_curvature","text":"profile_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates a profile curvature raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nlog: Display output values using a log-scale. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.qin_flow_accumulation","page":"Reference","title":"Whitebox.qin_flow_accumulation","text":"qin_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; dem, output, out_type=\"specific contributing area\", exponent=10.0, max_slope=45.0, threshold=nothing, log=false, clip=false, callback::Union{Nothing,Function}=nothing)\n\nThis tool calculates Qin et al. (2007) flow accumulation.\n\nArguments\n\ndem: Name of the input DEM raster file; must be depressionless. \noutput: Name of the output raster file. \nout_type: Output type; one of 'cells', 'specific contributing area' (default), and 'catchment area'. \nexponent: Optional upper-bound exponent parameter; default is 10.0. \nmax_slope: Optional upper-bound slope parameter, in degrees (0-90); default is 45.0. \nthreshold: Optional convergence threshold parameter, in grid cells; default is infinity. \nlog: Log-transform the output values?. \nclip: Optional flag to request clipping the display max by 1%. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.quantiles","page":"Reference","title":"Whitebox.quantiles","text":"quantiles(wbt_info::WhiteboxTools = wbt_info; i, output, num_quantiles=5, callback::Union{Nothing,Function}=nothing)\n\nTransforms raster values into quantiles.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nnum_quantiles: Number of quantiles. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.quinn_flow_accumulation","page":"Reference","title":"Whitebox.quinn_flow_accumulation","text":"quinn_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; dem, output, out_type=\"specific contributing area\", exponent=1.0, threshold=nothing, log=false, clip=false, callback::Union{Nothing,Function}=nothing)\n\nThis tool calculates Quinn et al. (1995) flow accumulation.\n\nArguments\n\ndem: Name of the input DEM raster file; must be depressionless. \noutput: Name of the output raster file. \nout_type: Output type; one of 'cells', 'specific contributing area' (default), and 'catchment area'. \nexponent: Optional exponent parameter; default is 1.0. \nthreshold: Optional convergence threshold parameter, in grid cells; default is infinity. \nlog: Log-transform the output values?. \nclip: Optional flag to request clipping the display max by 1%. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.radial_basis_function_interpolation","page":"Reference","title":"Whitebox.radial_basis_function_interpolation","text":"radial_basis_function_interpolation(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, radius=nothing, min_points=nothing, func_type=\"ThinPlateSpline\", poly_order=\"none\", weight=0.1, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)\n\nInterpolates vector points into a raster surface using a radial basis function scheme.\n\nArguments\n\ni: Input vector points file. \nfield: Input field name in attribute table. \nuse_z: Use z-coordinate instead of field?. \noutput: Output raster file. \nradius: Search Radius (in map units). \nmin_points: Minimum number of points. \nfunc_type: Radial basis function type; options are 'ThinPlateSpline' (default), 'PolyHarmonic', 'Gaussian', 'MultiQuadric', 'InverseMultiQuadric'. \npoly_order: Polynomial order; options are 'none' (default), 'constant', 'affine'. \nweight: Weight parameter used in basis function. \ncell_size: Optionally specified cell size of output raster. Not used when base raster is specified. \nbase: Optionally specified input base raster file. Not used when a cell size is specified. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.radius_of_gyration","page":"Reference","title":"Whitebox.radius_of_gyration","text":"radius_of_gyration(wbt_info::WhiteboxTools = wbt_info; i, output, text_output=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates the distance of cells from their polygon's centroid.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ntext_output: Optional text output. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.raise_walls","page":"Reference","title":"Whitebox.raise_walls","text":"raise_walls(wbt_info::WhiteboxTools = wbt_info; i, dem, output, breach=nothing, height=100.0, callback::Union{Nothing,Function}=nothing)\n\nRaises walls in a DEM along a line or around a polygon, e.g. a watershed.\n\nArguments\n\ni: Input vector lines or polygons file. \nbreach: Optional input vector breach lines. \ndem: Input raster DEM file. \noutput: Output raster file. \nheight: Wall height. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.random_field","page":"Reference","title":"Whitebox.random_field","text":"random_field(wbt_info::WhiteboxTools = wbt_info; base, output, callback::Union{Nothing,Function}=nothing)\n\nCreates an image containing random values.\n\nArguments\n\nbase: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.random_sample","page":"Reference","title":"Whitebox.random_sample","text":"random_sample(wbt_info::WhiteboxTools = wbt_info; base, output, num_samples=1000, callback::Union{Nothing,Function}=nothing)\n\nCreates an image containing randomly located sample grid cells with unique IDs.\n\nArguments\n\nbase: Input raster file. \noutput: Output raster file. \nnum_samples: Number of samples. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.range_filter","page":"Reference","title":"Whitebox.range_filter","text":"range_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nAssigns each cell in the output grid the range of values in a moving window centred on each grid cell in the input raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.raster_area","page":"Reference","title":"Whitebox.raster_area","text":"raster_area(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, out_text=false, units=\"grid cells\", zero_back=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates the area of polygons or classes within a raster image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nout_text: Would you like to output polygon areas to text?. \nunits: Area units; options include 'grid cells' and 'map units'. \nzero_back: Flag indicating whether zero values should be treated as a background. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.raster_calculator","page":"Reference","title":"Whitebox.raster_calculator","text":"raster_calculator(wbt_info::WhiteboxTools = wbt_info; output, statement=\"\", callback::Union{Nothing,Function}=nothing)\n\nThis tool performs a complex mathematical operations on one or more input raster images on a cell-to-cell basis.\n\nArguments\n\nstatement: Statement e.g. cos(\"raster1\") * 35.0 + \"raster2\". This statement must be a valid Rust statement. \noutput: Name of the output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.raster_cell_assignment","page":"Reference","title":"Whitebox.raster_cell_assignment","text":"raster_cell_assignment(wbt_info::WhiteboxTools = wbt_info; i, output, assign=\"column\", callback::Union{Nothing,Function}=nothing)\n\nAssign row or column number to cells.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nassign: Which variable would you like to assign to grid cells? Options include 'column', 'row', 'x', and 'y'. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.raster_histogram","page":"Reference","title":"Whitebox.raster_histogram","text":"raster_histogram(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nCreates a histogram from raster values.\n\nArguments\n\ni: Input raster file. \noutput: Output HTML file (default name will be based on input file if unspecified). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.raster_perimeter","page":"Reference","title":"Whitebox.raster_perimeter","text":"raster_perimeter(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, out_text=false, units=\"grid cells\", zero_back=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates the perimeters of polygons or classes within a raster image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nout_text: Would you like to output polygon areas to text?. \nunits: Area units; options include 'grid cells' and 'map units'. \nzero_back: Flag indicating whether zero values should be treated as a background. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.raster_streams_to_vector","page":"Reference","title":"Whitebox.raster_streams_to_vector","text":"raster_streams_to_vector(wbt_info::WhiteboxTools = wbt_info; streams, d8_pntr, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nConverts a raster stream file into a vector file.\n\nArguments\n\nstreams: Input raster streams file. \nd8_pntr: Input raster D8 pointer file. \noutput: Output vector file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.raster_summary_stats","page":"Reference","title":"Whitebox.raster_summary_stats","text":"raster_summary_stats(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nMeasures a rasters min, max, average, standard deviation, num. non-nodata cells, and total.\n\nArguments\n\ni: Input raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.raster_to_vector_lines","page":"Reference","title":"Whitebox.raster_to_vector_lines","text":"raster_to_vector_lines(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nConverts a raster lines features into a vector of the POLYLINE shapetype.\n\nArguments\n\ni: Input raster lines file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.raster_to_vector_points","page":"Reference","title":"Whitebox.raster_to_vector_points","text":"raster_to_vector_points(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nConverts a raster dataset to a vector of the POINT shapetype.\n\nArguments\n\ni: Input raster file. \noutput: Output vector points file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.raster_to_vector_polygons","page":"Reference","title":"Whitebox.raster_to_vector_polygons","text":"raster_to_vector_polygons(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nConverts a raster dataset to a vector of the POLYGON shapetype.\n\nArguments\n\ni: Input raster file. \noutput: Output vector polygons file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.rasterize_streams","page":"Reference","title":"Whitebox.rasterize_streams","text":"rasterize_streams(wbt_info::WhiteboxTools = wbt_info; streams, base, output, nodata=true, feature_id=false, callback::Union{Nothing,Function}=nothing)\n\nRasterizes vector streams based on Lindsay (2016) method.\n\nArguments\n\nstreams: Input vector streams file. \nbase: Input base raster file. \noutput: Output raster file. \nnodata: Use NoData value for background?. \nfeature_id: Use feature number as output value?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.reciprocal","page":"Reference","title":"Whitebox.reciprocal","text":"reciprocal(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the reciprocal (i.e. 1 / z) of values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.reclass","page":"Reference","title":"Whitebox.reclass","text":"reclass(wbt_info::WhiteboxTools = wbt_info; i, output, reclass_vals, assign_mode=false, callback::Union{Nothing,Function}=nothing)\n\nReclassifies the values in a raster image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nreclass_vals: Reclassification triplet values (new value; from value; to less than), e.g. '0.0;0.0;1.0;1.0;1.0;2.0'. \nassign_mode: Optional Boolean flag indicating whether to operate in assign mode, reclass_vals values are interpreted as new value; old value pairs. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.reclass_equal_interval","page":"Reference","title":"Whitebox.reclass_equal_interval","text":"reclass_equal_interval(wbt_info::WhiteboxTools = wbt_info; i, output, interval=10.0, start_val=nothing, end_val=nothing, callback::Union{Nothing,Function}=nothing)\n\nReclassifies the values in a raster image based on equal-ranges.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ninterval: Class interval size. \nstart_val: Optional starting value (default is input minimum value). \nend_val: Optional ending value (default is input maximum value). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.reclass_from_file","page":"Reference","title":"Whitebox.reclass_from_file","text":"reclass_from_file(wbt_info::WhiteboxTools = wbt_info; i, reclass_file, output, callback::Union{Nothing,Function}=nothing)\n\nReclassifies the values in a raster image using reclass ranges in a text file.\n\nArguments\n\ni: Input raster file. \nreclass_file: Input text file containing reclass ranges. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.reinitialize_attribute_table","page":"Reference","title":"Whitebox.reinitialize_attribute_table","text":"reinitialize_attribute_table(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nReinitializes a vector's attribute table deleting all fields but the feature ID (FID).\n\nArguments\n\ni: Input vector file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.related_circumscribing_circle","page":"Reference","title":"Whitebox.related_circumscribing_circle","text":"related_circumscribing_circle(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nCalculates the related circumscribing circle of vector polygons.\n\nArguments\n\ni: Input vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.relative_aspect","page":"Reference","title":"Whitebox.relative_aspect","text":"relative_aspect(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=0.0, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates relative aspect (relative to a user-specified direction) from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nazimuth: Illumination source azimuth. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.relative_topographic_position","page":"Reference","title":"Whitebox.relative_topographic_position","text":"relative_topographic_position(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nCalculates the relative topographic position index from a DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.remove_off_terrain_objects","page":"Reference","title":"Whitebox.remove_off_terrain_objects","text":"remove_off_terrain_objects(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, slope=15.0, callback::Union{Nothing,Function}=nothing)\n\nRemoves off-terrain objects from a raster digital elevation model (DEM).\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfilter: Filter size (cells). \nslope: Slope threshold value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.remove_polygon_holes","page":"Reference","title":"Whitebox.remove_polygon_holes","text":"remove_polygon_holes(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nRemoves holes within the features of a vector polygon file.\n\nArguments\n\ni: Input vector polygon file. \noutput: Output vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.remove_short_streams","page":"Reference","title":"Whitebox.remove_short_streams","text":"remove_short_streams(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, min_length, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nRemoves short first-order streams from a stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nmin_length: Minimum tributary length (in map units) used for network pruning. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.remove_spurs","page":"Reference","title":"Whitebox.remove_spurs","text":"remove_spurs(wbt_info::WhiteboxTools = wbt_info; i, output, iterations=10, callback::Union{Nothing,Function}=nothing)\n\nRemoves the spurs (pruning operation) from a Boolean line image; intended to be used on the output of the LineThinning tool.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \niterations: Maximum number of iterations. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.resample","page":"Reference","title":"Whitebox.resample","text":"resample(wbt_info::WhiteboxTools = wbt_info; inputs, output, cell_size=nothing, base=nothing, method=\"cc\", callback::Union{Nothing,Function}=nothing)\n\nResamples one or more input images into a destination image.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \ncell_size: Optionally specified cell size of output raster. Not used when base raster is specified. \nbase: Optionally specified input base raster file. Not used when a cell size is specified. \nmethod: Resampling method; options include 'nn' (nearest neighbour), 'bilinear', and 'cc' (cubic convolution). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.rescale_value_range","page":"Reference","title":"Whitebox.rescale_value_range","text":"rescale_value_range(wbt_info::WhiteboxTools = wbt_info; i, output, out_min_val, out_max_val, clip_min=nothing, clip_max=nothing, callback::Union{Nothing,Function}=nothing)\n\nPerforms a min-max contrast stretch on an input greytone image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nout_min_val: New minimum value in output image. \nout_max_val: New maximum value in output image. \nclip_min: Optional lower tail clip value. \nclip_max: Optional upper tail clip value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.rgb_to_ihs","page":"Reference","title":"Whitebox.rgb_to_ihs","text":"rgb_to_ihs(wbt_info::WhiteboxTools = wbt_info; intensity, hue, saturation, red=nothing, green=nothing, blue=nothing, composite=nothing, callback::Union{Nothing,Function}=nothing)\n\nConverts red, green, and blue (RGB) images into intensity, hue, and saturation (IHS) images.\n\nArguments\n\nred: Input red band image file. Optionally specified if colour-composite not specified. \ngreen: Input green band image file. Optionally specified if colour-composite not specified. \nblue: Input blue band image file. Optionally specified if colour-composite not specified. \ncomposite: Input colour-composite image file. Only used if individual bands are not specified. \nintensity: Output intensity raster file. \nhue: Output hue raster file. \nsaturation: Output saturation raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.rho8_flow_accumulation","page":"Reference","title":"Whitebox.rho8_flow_accumulation","text":"rho8_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; i, output, out_type=\"specific contributing area\", log=false, clip=false, pntr=false, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nThis tool calculates Fairfield and Leymarie (1991) flow accumulation.\n\nArguments\n\ni: Input DEM or Rho8 pointer file; if a DEM is used, it must be depressionless. \noutput: Name of the output raster file. \nout_type: Output type; one of 'cells', 'specific contributing area' (default), and 'catchment area'. \nlog: Log-transform the output values?. \nclip: Optional flag to request clipping the display max by 1%. \npntr: Is the input raster a Rho8 flow pointer rather than a DEM?. \nesri_pntr: Does the input Rho8 pointer use the ESRI style scheme?. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.rho8_pointer","page":"Reference","title":"Whitebox.rho8_pointer","text":"rho8_pointer(wbt_info::WhiteboxTools = wbt_info; dem, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nCalculates a stochastic Rho8 flow pointer raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.roberts_cross_filter","page":"Reference","title":"Whitebox.roberts_cross_filter","text":"roberts_cross_filter(wbt_info::WhiteboxTools = wbt_info; i, output, clip=0.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a Robert's cross edge-detection filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nclip: Optional amount to clip the distribution tails by, in percent. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.root_mean_square_error","page":"Reference","title":"Whitebox.root_mean_square_error","text":"root_mean_square_error(wbt_info::WhiteboxTools = wbt_info; i, base, callback::Union{Nothing,Function}=nothing)\n\nCalculates the RMSE and other accuracy statistics.\n\nArguments\n\ni: Input raster file. \nbase: Input base raster file used for comparison. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.round","page":"Reference","title":"Whitebox.round","text":"round(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nRounds the values in an input raster to the nearest integer value.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.ruggedness_index","page":"Reference","title":"Whitebox.ruggedness_index","text":"ruggedness_index(wbt_info::WhiteboxTools = wbt_info; dem, output, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates the Riley et al.'s (1999) terrain ruggedness index from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.run_tool","page":"Reference","title":"Whitebox.run_tool","text":"run_tool(tool_name::String, wbt_info::WhiteboxTools = wbt_info; callback=nothing, args::Union{Nothing, Vector{Any}}=nothing)\n\nRuns a tool and specifies tool arguments. Returns 0 if completes without error. Returns 1 on error with details.\n\nReturns 2 if process is cancelled by user.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.scharr_filter","page":"Reference","title":"Whitebox.scharr_filter","text":"scharr_filter(wbt_info::WhiteboxTools = wbt_info; i, output, clip=0.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a Scharr edge-detection filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nclip: Optional amount to clip the distribution tails by, in percent. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.sediment_transport_index","page":"Reference","title":"Whitebox.sediment_transport_index","text":"sediment_transport_index(wbt_info::WhiteboxTools = wbt_info; sca, slope, output, sca_exponent=0.4, slope_exponent=1.3, callback::Union{Nothing,Function}=nothing)\n\nCalculates the sediment transport index.\n\nArguments\n\nsca: Input raster specific contributing area (SCA) file. \nslope: Input raster slope file. \noutput: Output raster file. \nsca_exponent: SCA exponent value. \nslope_exponent: Slope exponent value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.select_tiles_by_polygon","page":"Reference","title":"Whitebox.select_tiles_by_polygon","text":"select_tiles_by_polygon(wbt_info::WhiteboxTools = wbt_info; indir, outdir, polygons, callback::Union{Nothing,Function}=nothing)\n\nCopies LiDAR tiles overlapping with a polygon into an output directory.\n\nArguments\n\nindir: Input LAS file source directory. \noutdir: Output directory into which LAS files within the polygon are copied. \npolygons: Input vector polygons file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.set_compress_rasters","page":"Reference","title":"Whitebox.set_compress_rasters","text":"set_compress_rasters(compress_rasters::Bool, wbt_info::WhiteboxTools = wbt_info)\n\nSets the flag used by WhiteboxTools to determine whether to use compression for output rasters.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.set_nodata_value","page":"Reference","title":"Whitebox.set_nodata_value","text":"set_nodata_value(wbt_info::WhiteboxTools = wbt_info; i, output, back_value=0.0, callback::Union{Nothing,Function}=nothing)\n\nAssign a specified value in an input image to the NoData value.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nback_value: Background value to set to nodata. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.set_verbose_mode","page":"Reference","title":"Whitebox.set_verbose_mode","text":"set_verbose_mode(val::Bool=true, wbt_info::WhiteboxTools = wbt_info)\n\nSets verbose mode. If verbose mode is False, tools will not print output messages. Tools will frequently provide substantial feedback while they are operating, e.g. updating progress for  various sub-routines. When the user has scripted a workflow that ties many tools in sequence, this level of tool output can be problematic. By setting verbose mode to False, these\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.set_whitebox_dir","page":"Reference","title":"Whitebox.set_whitebox_dir","text":"set_whitebox_dir(path_str::String, wbt_info::WhiteboxTools = wbt_info)\n\nSets the directory to the WhiteboxTools executable file.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.set_working_dir","page":"Reference","title":"Whitebox.set_working_dir","text":"set_working_dir(path_str::String, wbt_info::WhiteboxTools = wbt_info)\n\nSets the working directory, i.e. the directory in which the data files are located. By setting the working  directory, tool input parameters that are files need only specify the file name rather than the complete file path.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.shape_complexity_index","page":"Reference","title":"Whitebox.shape_complexity_index","text":"shape_complexity_index(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)\n\nCalculates overall polygon shape complexity or irregularity.\n\nArguments\n\ni: Input vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.shape_complexity_index_raster","page":"Reference","title":"Whitebox.shape_complexity_index_raster","text":"shape_complexity_index_raster(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the complexity of raster polygons or classes.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.shreve_stream_magnitude","page":"Reference","title":"Whitebox.shreve_stream_magnitude","text":"shreve_stream_magnitude(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nAssigns the Shreve stream magnitude to each link in a stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.sigmoidal_contrast_stretch","page":"Reference","title":"Whitebox.sigmoidal_contrast_stretch","text":"sigmoidal_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, cutoff=0.0, gain=1.0, num_tones=256, callback::Union{Nothing,Function}=nothing)\n\nPerforms a sigmoidal contrast stretch on input images.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncutoff: Cutoff value between 0.0 and 0.95. \ngain: Gain value. \nnum_tones: Number of tones in the output image. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.sin","page":"Reference","title":"Whitebox.sin","text":"sin(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the sine (sin) of each values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.single_part_to_multi_part","page":"Reference","title":"Whitebox.single_part_to_multi_part","text":"single_part_to_multi_part(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, callback::Union{Nothing,Function}=nothing)\n\nConverts a vector file containing multi-part features into a vector containing only single-part features.\n\nArguments\n\ni: Input vector line or polygon file. \nfield: Grouping ID field name in attribute table. \noutput: Output vector line or polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.sinh","page":"Reference","title":"Whitebox.sinh","text":"sinh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the hyperbolic sine (sinh) of each values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.sink","page":"Reference","title":"Whitebox.sink","text":"sink(wbt_info::WhiteboxTools = wbt_info; i, output, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nIdentifies the depressions in a DEM, giving each feature a unique identifier.\n\nArguments\n\ni: Input raster DEM file. \noutput: Output raster file. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.slope","page":"Reference","title":"Whitebox.slope","text":"slope(wbt_info::WhiteboxTools = wbt_info; dem, output, zfactor=nothing, units=\"degrees\", callback::Union{Nothing,Function}=nothing)\n\nCalculates a slope raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \nunits: Units of output raster; options include 'degrees', 'radians', 'percent'. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.slope_vs_elevation_plot","page":"Reference","title":"Whitebox.slope_vs_elevation_plot","text":"slope_vs_elevation_plot(wbt_info::WhiteboxTools = wbt_info; inputs, output, watershed=nothing, callback::Union{Nothing,Function}=nothing)\n\nCreates a slope vs. elevation plot for one or more DEMs.\n\nArguments\n\ninputs: Input DEM files. \nwatershed: Input watershed files (optional). \noutput: Output HTML file (default name will be based on input file if unspecified). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.smooth_vectors","page":"Reference","title":"Whitebox.smooth_vectors","text":"smooth_vectors(wbt_info::WhiteboxTools = wbt_info; i, output, filter=3, callback::Union{Nothing,Function}=nothing)\n\nSmooths a vector coverage of either a POLYLINE or POLYGON base ShapeType.\n\nArguments\n\ni: Input vector POLYLINE or POLYGON file. \noutput: Output vector file. \nfilter: The filter size, any odd integer greater than or equal to 3; default is 3. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.snap_pour_points","page":"Reference","title":"Whitebox.snap_pour_points","text":"snap_pour_points(wbt_info::WhiteboxTools = wbt_info; pour_pts, flow_accum, output, snap_dist, callback::Union{Nothing,Function}=nothing)\n\nMoves outlet points used to specify points of interest in a watershedding operation to the cell with the highest flow accumulation in its neighbourhood.\n\nArguments\n\npour_pts: Input vector pour points (outlet) file. \nflow_accum: Input raster D8 flow accumulation file. \noutput: Output vector file. \nsnap_dist: Maximum snap distance in map units. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.sobel_filter","page":"Reference","title":"Whitebox.sobel_filter","text":"sobel_filter(wbt_info::WhiteboxTools = wbt_info; i, output, variant=\"3x3\", clip=0.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a Sobel edge-detection filter on an image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nvariant: Optional variant value. Options include 3x3 and 5x5 (default is 3x3). \nclip: Optional amount to clip the distribution tails by, in percent (default is 0.0). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.spherical_std_dev_of_normals","page":"Reference","title":"Whitebox.spherical_std_dev_of_normals","text":"spherical_std_dev_of_normals(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, callback::Union{Nothing,Function}=nothing)\n\nCalculates the spherical standard deviation of surface normals for a DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nfilter: Size of the filter kernel. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.split_colour_composite","page":"Reference","title":"Whitebox.split_colour_composite","text":"split_colour_composite(wbt_info::WhiteboxTools = wbt_info; i, red=nothing, green=nothing, blue=nothing, callback::Union{Nothing,Function}=nothing)\n\nThis tool splits an RGB colour composite image into separate multispectral images.\n\nArguments\n\ni: Input colour composite image file. \nred: Output red band file. \ngreen: Output green band file. \nblue: Output blue band file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.split_vector_lines","page":"Reference","title":"Whitebox.split_vector_lines","text":"split_vector_lines(wbt_info::WhiteboxTools = wbt_info; i, output, length=nothing, callback::Union{Nothing,Function}=nothing)\n\nThis tool can be used to split a vector line coverage into even-lengthed segments.\n\nArguments\n\ni: Name of the input lines shapefile. \noutput: Name of the output lines shapefile. \nlength: Maximum segment length (m). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.split_with_lines","page":"Reference","title":"Whitebox.split_with_lines","text":"split_with_lines(wbt_info::WhiteboxTools = wbt_info; i, split, output, callback::Union{Nothing,Function}=nothing)\n\nSplits the lines or polygons in one layer using the lines in another layer.\n\nArguments\n\ni: Input vector line or polygon file. \nsplit: Input vector polyline file. \noutput: Output vector file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.square","page":"Reference","title":"Whitebox.square","text":"square(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nSquares the values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.square_root","page":"Reference","title":"Whitebox.square_root","text":"square_root(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the square root of the values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.standard_deviation_contrast_stretch","page":"Reference","title":"Whitebox.standard_deviation_contrast_stretch","text":"standard_deviation_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, stdev=2.0, num_tones=256, callback::Union{Nothing,Function}=nothing)\n\nPerforms a standard-deviation contrast stretch on input images.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nstdev: Standard deviation clip value. \nnum_tones: Number of tones in the output image. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.standard_deviation_filter","page":"Reference","title":"Whitebox.standard_deviation_filter","text":"standard_deviation_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nAssigns each cell in the output grid the standard deviation of values in a moving window centred on each grid cell in the input raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.standard_deviation_of_slope","page":"Reference","title":"Whitebox.standard_deviation_of_slope","text":"standard_deviation_of_slope(wbt_info::WhiteboxTools = wbt_info; i, output, zfactor=nothing, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nCalculates the standard deviation of slope from an input DEM.\n\nArguments\n\ni: Input raster DEM file. \noutput: Output raster DEM file. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.stochastic_depression_analysis","page":"Reference","title":"Whitebox.stochastic_depression_analysis","text":"stochastic_depression_analysis(wbt_info::WhiteboxTools = wbt_info; dem, output, rmse, range, iterations=100, callback::Union{Nothing,Function}=nothing)\n\nPerforms a stochastic analysis of depressions within a DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output file. \nrmse: The DEM's root-mean-square-error (RMSE), in z units. This determines error magnitude. \nrange: The error field's correlation length, in xy-units. \niterations: The number of iterations. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.strahler_order_basins","page":"Reference","title":"Whitebox.strahler_order_basins","text":"strahler_order_basins(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nIdentifies Strahler-order basins from an input stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.strahler_stream_order","page":"Reference","title":"Whitebox.strahler_stream_order","text":"strahler_stream_order(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nAssigns the Strahler stream order to each link in a stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.stream_link_class","page":"Reference","title":"Whitebox.stream_link_class","text":"stream_link_class(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nIdentifies the exterior/interior links and nodes in a stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.stream_link_identifier","page":"Reference","title":"Whitebox.stream_link_identifier","text":"stream_link_identifier(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nAssigns a unique identifier to each link in a stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.stream_link_length","page":"Reference","title":"Whitebox.stream_link_length","text":"stream_link_length(wbt_info::WhiteboxTools = wbt_info; d8_pntr, linkid, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nEstimates the length of each link (or tributary) in a stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nlinkid: Input raster streams link ID (or tributary ID) file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.stream_link_slope","page":"Reference","title":"Whitebox.stream_link_slope","text":"stream_link_slope(wbt_info::WhiteboxTools = wbt_info; d8_pntr, linkid, dem, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nEstimates the average slope of each link (or tributary) in a stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nlinkid: Input raster streams link ID (or tributary ID) file. \ndem: Input raster DEM file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.stream_power_index","page":"Reference","title":"Whitebox.stream_power_index","text":"stream_power_index(wbt_info::WhiteboxTools = wbt_info; sca, slope, output, exponent=1.0, callback::Union{Nothing,Function}=nothing)\n\nCalculates the relative stream power index.\n\nArguments\n\nsca: Input raster specific contributing area (SCA) file. \nslope: Input raster slope file. \noutput: Output raster file. \nexponent: SCA exponent value. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.stream_slope_continuous","page":"Reference","title":"Whitebox.stream_slope_continuous","text":"stream_slope_continuous(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, dem, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nEstimates the slope of each grid cell in a stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \ndem: Input raster DEM file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.subbasins","page":"Reference","title":"Whitebox.subbasins","text":"subbasins(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nIdentifies the catchments, or sub-basin, draining to each link in a stream network.\n\nArguments\n\nd8_pntr: Input D8 pointer raster file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.subtract","page":"Reference","title":"Whitebox.subtract","text":"subtract(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a differencing operation on two rasters or a raster and a constant value.\n\nArguments\n\ninput1: Input raster file or constant value. \ninput2: Input raster file or constant value. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.sum_overlay","page":"Reference","title":"Whitebox.sum_overlay","text":"sum_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the sum for each grid cell from a group of raster images.\n\nArguments\n\ninputs: Input raster files. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.surface_area_ratio","page":"Reference","title":"Whitebox.surface_area_ratio","text":"surface_area_ratio(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates a the surface area ratio of each grid cell in an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.symmetrical_difference","page":"Reference","title":"Whitebox.symmetrical_difference","text":"symmetrical_difference(wbt_info::WhiteboxTools = wbt_info; i, overlay, output, snap=0.0, callback::Union{Nothing,Function}=nothing)\n\nOutputs the features that occur in one of the two vector inputs but not both, i.e. no overlapping features.\n\nArguments\n\ni: Input vector file. \noverlay: Input overlay vector file. \noutput: Output vector file. \nsnap: Snap tolerance. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.tan","page":"Reference","title":"Whitebox.tan","text":"tan(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the tangent (tan) of each values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.tangential_curvature","page":"Reference","title":"Whitebox.tangential_curvature","text":"tangential_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates a tangential curvature raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nlog: Display output values using a log-scale. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.tanh","page":"Reference","title":"Whitebox.tanh","text":"tanh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nReturns the hyperbolic tangent (tanh) of each values in a raster.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.thicken_raster_line","page":"Reference","title":"Whitebox.thicken_raster_line","text":"thicken_raster_line(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nThickens single-cell wide lines within a raster image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.time_in_daylight","page":"Reference","title":"Whitebox.time_in_daylight","text":"time_in_daylight(wbt_info::WhiteboxTools = wbt_info; dem, output, lat, long, az_fraction=10.0, max_dist=100.0, utc_offset=\"00:00\", start_day=1, end_day=365, start_time=\"00:00:00\", end_time=\"23:59:59\", callback::Union{Nothing,Function}=nothing)\n\nCalculates the proportion of time a location is not within an area of shadow.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \naz_fraction: Azimuth fraction in degrees. \nmax_dist: Optional maximum search distance. Minimum value is 5 x cell size. \nlat: Centre point latitude. \nlong: Centre point longitude. \nutc_offset: UTC time offset, in hours (e.g. -04:00, +06:00). \nstart_day: Start day of the year (1-365). \nend_day: End day of the year (1-365). \nstart_time: Starting hour to track shadows (e.g. 5, 5:00, 05:00:00). Assumes 24-hour time: HH:MM:SS. 'sunrise' is also a valid time. \nend_time: Starting hour to track shadows (e.g. 21, 21:00, 21:00:00). Assumes 24-hour time: HH:MM:SS. 'sunset' is also a valid time. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.tin_gridding","page":"Reference","title":"Whitebox.tin_gridding","text":"tin_gridding(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, use_z=false, resolution=nothing, base=nothing, max_triangle_edge_length=nothing, callback::Union{Nothing,Function}=nothing)\n\nCreates a raster grid based on a triangular irregular network (TIN) fitted to vector points.\n\nArguments\n\ni: Input vector points file. \nfield: Input field name in attribute table. \nuse_z: Use the 'z' dimension of the Shapefile's geometry instead of an attribute field?. \noutput: Output raster file. \nresolution: Output raster's grid resolution. \nbase: Optionally specified input base raster file. Not used when a cell size is specified. \nmax_triangle_edge_length: Optional maximum triangle edge length; triangles larger than this size will not be gridded. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.to_camelcase-Tuple{String}","page":"Reference","title":"Whitebox.to_camelcase","text":"to_camelcase(name::String)\n\nConvert snake_case name to CamelCase name \n\n\n\n\n\n","category":"method"},{"location":"reference/#Whitebox.to_degrees","page":"Reference","title":"Whitebox.to_degrees","text":"to_degrees(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nConverts a raster from radians to degrees.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.to_radians","page":"Reference","title":"Whitebox.to_radians","text":"to_radians(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nConverts a raster from degrees to radians.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.to_snakecase-Tuple{String}","page":"Reference","title":"Whitebox.to_snakecase","text":"to_snakecase(name::String)\n\nConvert CamelCase name to snake_case name \n\n\n\n\n\n","category":"method"},{"location":"reference/#Whitebox.tool_help","page":"Reference","title":"Whitebox.tool_help","text":"tool_help(tool_name::String, wbt_info::WhiteboxTools = wbt_info)\n\nRetrieves the help description for a specific tool.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.tool_parameters","page":"Reference","title":"Whitebox.tool_parameters","text":"tool_parameters(tool_name::String, wbt_info::WhiteboxTools = wbt_info; return_obj::Bool = false)\n\nRetrieves the tool parameter descriptions for a specific tool.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.toolbox","page":"Reference","title":"Whitebox.toolbox","text":"toolbox(tool_name::String=\"\", wbt_info::WhiteboxTools = wbt_info; return_obj::Bool=false)\n\nRetrieves the toolbox for a specific tool.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.tophat_transform","page":"Reference","title":"Whitebox.tophat_transform","text":"tophat_transform(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, variant=\"white\", callback::Union{Nothing,Function}=nothing)\n\nPerforms either a white or black top-hat transform on an input image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \nvariant: Optional variant value. Options include 'white' and 'black'. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.topological_stream_order","page":"Reference","title":"Whitebox.topological_stream_order","text":"topological_stream_order(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nAssigns each link in a stream network its topological order.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.total_curvature","page":"Reference","title":"Whitebox.total_curvature","text":"total_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)\n\nCalculates a total curvature raster from an input DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nlog: Display output values using a log-scale. \nzfactor: Optional multiplier for when the vertical and horizontal units are not the same. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.total_filter","page":"Reference","title":"Whitebox.total_filter","text":"total_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)\n\nPerforms a total filter on an input image.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nfilterx: Size of the filter kernel in the x-direction. \nfiltery: Size of the filter kernel in the y-direction. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.trace_downslope_flowpaths","page":"Reference","title":"Whitebox.trace_downslope_flowpaths","text":"trace_downslope_flowpaths(wbt_info::WhiteboxTools = wbt_info; seed_pts, d8_pntr, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nTraces downslope flowpaths from one or more target sites (i.e. seed points).\n\nArguments\n\nseed_pts: Input vector seed points file. \nd8_pntr: Input D8 pointer raster file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.trend_surface","page":"Reference","title":"Whitebox.trend_surface","text":"trend_surface(wbt_info::WhiteboxTools = wbt_info; i, output, order=1, callback::Union{Nothing,Function}=nothing)\n\nEstimates the trend surface of an input raster file.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \norder: Polynomial order (1 to 10). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.trend_surface_vector_points","page":"Reference","title":"Whitebox.trend_surface_vector_points","text":"trend_surface_vector_points(wbt_info::WhiteboxTools = wbt_info; i, field, output, cell_size, order=1, callback::Union{Nothing,Function}=nothing)\n\nEstimates a trend surface from vector points.\n\nArguments\n\ni: Input vector Points file. \nfield: Input field name in attribute table. \noutput: Output raster file. \norder: Polynomial order (1 to 10). \ncell_size: Optionally specified cell size of output raster. Not used when base raster is specified. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.tributary_identifier","page":"Reference","title":"Whitebox.tributary_identifier","text":"tributary_identifier(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)\n\nAssigns a unique identifier to each tributary in a stream network.\n\nArguments\n\nd8_pntr: Input raster D8 pointer file. \nstreams: Input raster streams file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \nzero_background: Flag indicating whether a background value of zero should be used. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.truncate","page":"Reference","title":"Whitebox.truncate","text":"truncate(wbt_info::WhiteboxTools = wbt_info; i, output, num_decimals=nothing, callback::Union{Nothing,Function}=nothing)\n\nTruncates the values in a raster to the desired number of decimal places.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nnum_decimals: Number of decimals left after truncation (default is zero). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.turning_bands_simulation","page":"Reference","title":"Whitebox.turning_bands_simulation","text":"turning_bands_simulation(wbt_info::WhiteboxTools = wbt_info; base, output, range, iterations=1000, callback::Union{Nothing,Function}=nothing)\n\nCreates an image containing random values based on a turning-bands simulation.\n\nArguments\n\nbase: Input base raster file. \noutput: Output file. \nrange: The field's range, in xy-units, related to the extent of spatial autocorrelation. \niterations: The number of iterations. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.two_sample_ks_test","page":"Reference","title":"Whitebox.two_sample_ks_test","text":"two_sample_ks_test(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, num_samples=nothing, callback::Union{Nothing,Function}=nothing)\n\nPerforms a 2-sample K-S test for significant differences on two input rasters.\n\nArguments\n\ninput1: First input raster file. \ninput2: Second input raster file. \noutput: Output HTML file. \nnum_samples: Number of samples. Leave blank to use whole image. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.union","page":"Reference","title":"Whitebox.union","text":"union(wbt_info::WhiteboxTools = wbt_info; i, overlay, output, snap=0.0, callback::Union{Nothing,Function}=nothing)\n\nSplits vector layers at their overlaps, creating a layer containing all the portions from both input and overlay layers.\n\nArguments\n\ni: Input vector file. \noverlay: Input overlay vector file. \noutput: Output vector file. \nsnap: Snap tolerance. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.unnest_basins","page":"Reference","title":"Whitebox.unnest_basins","text":"unnest_basins(wbt_info::WhiteboxTools = wbt_info; d8_pntr, pour_pts, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nExtract whole watersheds for a set of outlet points.\n\nArguments\n\nd8_pntr: Input D8 pointer raster file. \npour_pts: Input vector pour points (outlet) file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.unsharp_masking","page":"Reference","title":"Whitebox.unsharp_masking","text":"unsharp_masking(wbt_info::WhiteboxTools = wbt_info; i, output, sigma=0.75, amount=100.0, threshold=0.0, callback::Union{Nothing,Function}=nothing)\n\nAn image sharpening technique that enhances edges.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \nsigma: Standard deviation distance in pixels. \namount: A percentage and controls the magnitude of each overshoot. \nthreshold: Controls the minimal brightness change that will be sharpened. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.unzip-Tuple{String}","page":"Reference","title":"Whitebox.unzip","text":"unzip(file::String; exdir::String=\"\")\n\nUnzip a .zip folder and put contents in exdir. \n\nModified from https://discourse.julialang.org/t/how-to-extract-a-file-in-a-zip-archive-without-using-os-specific-tools/34585\n\n\n\n\n\n","category":"method"},{"location":"reference/#Whitebox.update_nodata_cells","page":"Reference","title":"Whitebox.update_nodata_cells","text":"update_nodata_cells(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nReplaces the NoData values in an input raster with the corresponding values contained in a second update layer.\n\nArguments\n\ninput1: Input raster file 1. \ninput2: Input raster file 2; update layer. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.upslope_depression_storage","page":"Reference","title":"Whitebox.upslope_depression_storage","text":"upslope_depression_storage(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)\n\nEstimates the average upslope depression storage depth.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.user_defined_weights_filter","page":"Reference","title":"Whitebox.user_defined_weights_filter","text":"user_defined_weights_filter(wbt_info::WhiteboxTools = wbt_info; i, weights, output, center=\"center\", normalize=false, callback::Union{Nothing,Function}=nothing)\n\nPerforms a user-defined weights filter on an image.\n\nArguments\n\ni: Input raster file. \nweights: Input weights file. \noutput: Output raster file. \ncenter: Kernel center cell; options include 'center', 'upper-left', 'upper-right', 'lower-left', 'lower-right'. \nnormalize: Normalize kernel weights? This can reduce edge effects and lessen the impact of data gaps (nodata) but is not suited when the kernel weights sum to zero. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.vector_hex_binning","page":"Reference","title":"Whitebox.vector_hex_binning","text":"vector_hex_binning(wbt_info::WhiteboxTools = wbt_info; i, output, width, orientation=\"horizontal\", callback::Union{Nothing,Function}=nothing)\n\nHex-bins a set of vector points.\n\nArguments\n\ni: Input base file. \noutput: Output vector polygon file. \nwidth: The grid cell width. \norientation: Grid Orientation, 'horizontal' or 'vertical'. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.vector_lines_to_raster","page":"Reference","title":"Whitebox.vector_lines_to_raster","text":"vector_lines_to_raster(wbt_info::WhiteboxTools = wbt_info; i, output, field=\"FID\", nodata=true, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)\n\nConverts a vector containing polylines into a raster.\n\nArguments\n\ni: Input vector lines file. \nfield: Input field name in attribute table. \noutput: Output raster file. \nnodata: Background value to set to NoData. Without this flag, it will be set to 0.0. \ncell_size: Optionally specified cell size of output raster. Not used when base raster is specified. \nbase: Optionally specified input base raster file. Not used when a cell size is specified. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.vector_points_to_raster","page":"Reference","title":"Whitebox.vector_points_to_raster","text":"vector_points_to_raster(wbt_info::WhiteboxTools = wbt_info; i, output, field=\"FID\", assign=\"last\", nodata=true, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)\n\nConverts a vector containing points into a raster.\n\nArguments\n\ni: Input vector Points file. \nfield: Input field name in attribute table. \noutput: Output raster file. \nassign: Assignment operation, where multiple points are in the same grid cell; options include 'first', 'last' (default), 'min', 'max', 'sum'. \nnodata: Background value to set to NoData. Without this flag, it will be set to 0.0. \ncell_size: Optionally specified cell size of output raster. Not used when base raster is specified. \nbase: Optionally specified input base raster file. Not used when a cell size is specified. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.vector_polygons_to_raster","page":"Reference","title":"Whitebox.vector_polygons_to_raster","text":"vector_polygons_to_raster(wbt_info::WhiteboxTools = wbt_info; i, output, field=\"FID\", nodata=true, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)\n\nConverts a vector containing polygons into a raster.\n\nArguments\n\ni: Input vector polygons file. \nfield: Input field name in attribute table. \noutput: Output raster file. \nnodata: Background value to set to NoData. Without this flag, it will be set to 0.0. \ncell_size: Optionally specified cell size of output raster. Not used when base raster is specified. \nbase: Optionally specified input base raster file. Not used when a cell size is specified. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.version","page":"Reference","title":"Whitebox.version","text":"version(wbt_info::WhiteboxTools = wbt_info)\n\nRetrieves the version information for WhiteboxTools.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.view_code","page":"Reference","title":"Whitebox.view_code","text":"view_code(tool_name::String, wbt_info::WhiteboxTools = wbt_info)\n\nOpens a web browser to view the source code for a specific tool on the projects source code repository.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.viewshed","page":"Reference","title":"Whitebox.viewshed","text":"viewshed(wbt_info::WhiteboxTools = wbt_info; dem, stations, output, height=2.0, callback::Union{Nothing,Function}=nothing)\n\nIdentifies the viewshed for a point or set of points.\n\nArguments\n\ndem: Input raster DEM file. \nstations: Input viewing station vector file. \noutput: Output raster file. \nheight: Viewing station height, in z units. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.visibility_index","page":"Reference","title":"Whitebox.visibility_index","text":"visibility_index(wbt_info::WhiteboxTools = wbt_info; dem, output, height=2.0, res_factor=2, callback::Union{Nothing,Function}=nothing)\n\nEstimates the relative visibility of sites in a DEM.\n\nArguments\n\ndem: Input raster DEM file. \noutput: Output raster file. \nheight: Viewing station height, in z units. \nres_factor: The resolution factor determines the density of measured viewsheds. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.voronoi_diagram","page":"Reference","title":"Whitebox.voronoi_diagram","text":"voronoi_diagram(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nCreates a vector Voronoi diagram for a set of vector points.\n\nArguments\n\ni: Input vector points file. \noutput: Output vector polygon file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.watershed","page":"Reference","title":"Whitebox.watershed","text":"watershed(wbt_info::WhiteboxTools = wbt_info; d8_pntr, pour_pts, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)\n\nIdentifies the watershed, or drainage basin, draining to a set of target cells.\n\nArguments\n\nd8_pntr: Input D8 pointer raster file. \npour_pts: Input pour points (outlet) file. \noutput: Output raster file. \nesri_pntr: D8 pointer uses the ESRI style scheme. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.weighted_overlay","page":"Reference","title":"Whitebox.weighted_overlay","text":"weighted_overlay(wbt_info::WhiteboxTools = wbt_info; factors, weights, output, cost=nothing, constraints=nothing, scale_max=1.0, callback::Union{Nothing,Function}=nothing)\n\nPerforms a weighted sum on multiple input rasters after converting each image to a common scale. The tool performs a multi-criteria evaluation (MCE).\n\nArguments\n\nfactors: Input factor raster files. \nweights: Weight values, contained in quotes and separated by commas or semicolons. Must have the same number as factors. \ncost: Weight values, contained in quotes and separated by commas or semicolons. Must have the same number as factors. \nconstraints: Input constraints raster files. \noutput: Output raster file. \nscale_max: Suitability scale maximum value (common values are 1.0, 100.0, and 255.0). \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.weighted_sum","page":"Reference","title":"Whitebox.weighted_sum","text":"weighted_sum(wbt_info::WhiteboxTools = wbt_info; inputs, weights, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a weighted-sum overlay on multiple input raster images.\n\nArguments\n\ninputs: Input raster files. \nweights: Weight values, contained in quotes and separated by commas or semicolons. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.wetness_index","page":"Reference","title":"Whitebox.wetness_index","text":"wetness_index(wbt_info::WhiteboxTools = wbt_info; sca, slope, output, callback::Union{Nothing,Function}=nothing)\n\nCalculates the topographic wetness index, Ln(A / tan(slope)).\n\nArguments\n\nsca: Input raster specific contributing area (SCA) file. \nslope: Input raster slope file (in degrees). \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.wilcoxon_signed_rank_test","page":"Reference","title":"Whitebox.wilcoxon_signed_rank_test","text":"wilcoxon_signed_rank_test(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, num_samples=nothing, callback::Union{Nothing,Function}=nothing)\n\nPerforms a 2-sample K-S test for significant differences on two input rasters.\n\nArguments\n\ninput1: First input raster file. \ninput2: Second input raster file. \noutput: Output HTML file. \nnum_samples: Number of samples. Leave blank to use whole image. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.write_function_memory_insertion","page":"Reference","title":"Whitebox.write_function_memory_insertion","text":"write_function_memory_insertion(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, input3=nothing, callback::Union{Nothing,Function}=nothing)\n\nPerforms a write function memory insertion for single-band multi-date change detection.\n\nArguments\n\ninput1: Input raster file associated with the first date. \ninput2: Input raster file associated with the second date. \ninput3: Optional input raster file associated with the third date. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.xor","page":"Reference","title":"Whitebox.xor","text":"xor(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)\n\nPerforms a logical XOR operator on two Boolean raster images.\n\nArguments\n\ninput1: Input raster file. \ninput2: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.z_scores","page":"Reference","title":"Whitebox.z_scores","text":"z_scores(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)\n\nStandardizes the values in an input raster by converting to z-scores.\n\nArguments\n\ni: Input raster file. \noutput: Output raster file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.zlidar_to_las","page":"Reference","title":"Whitebox.zlidar_to_las","text":"zlidar_to_las(wbt_info::WhiteboxTools = wbt_info; inputs=nothing, outdir=nothing, callback::Union{Nothing,Function}=nothing)\n\nConverts one or more zlidar files into the LAS data format.\n\nArguments\n\ninputs: Input ZLidar files. \noutdir: Output directory into which zlidar files are created. If unspecified, it is assumed to be the same as the inputs. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Whitebox.zonal_statistics","page":"Reference","title":"Whitebox.zonal_statistics","text":"zonal_statistics(wbt_info::WhiteboxTools = wbt_info; i, features, output=nothing, stat=\"mean\", out_table=nothing, callback::Union{Nothing,Function}=nothing)\n\nExtracts descriptive statistics for a group of patches in a raster.\n\nArguments\n\ni: Input data raster file. \nfeatures: Input feature definition raster file. \noutput: Output raster file. \nstat: Statistic to extract, including 'mean', 'median', 'minimum', 'maximum', 'range', 'standard deviation', and 'total'. \nout_table: Output HTML Table file. \ncallback::Union{Nothing,Function}: Custom function for handling tool text outputs.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Whitebox","category":"page"},{"location":"#Whitebox.jl","page":"Home","title":"Whitebox.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Dev) (Image: Build Status) <!â€“ (Image: Coverage) â€“>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Link to GitHub Repo","category":"page"},{"location":"#A-Julia-frontend-for-WhiteboxTools","page":"Home","title":"A Julia frontend for WhiteboxTools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"WhiteboxTools is an open-source command-line program for geospatial analysis created by Dr. John Lindsay.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Whitebox.jl installs WhiteboxTools and allows users to run any WhiteboxTools function from Julia.","category":"page"},{"location":"#Notes","page":"Home","title":"Notes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Whitebox.jl is not affiliated with WhiteboxTools. \nThis package is in active development and testing.\nReport bugs here.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Whitebox.jl can be installed directly from GitHub:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url = \"https://github.com/acgold/Whitebox.jl.git\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Installing Whitebox.jl will automatically install a version of WhiteboxTools within the Whitebox.jl package directory (see more about this in How it works)","category":"page"},{"location":"#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Adapted from the Python frontend example.","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Whitebox as wbt\n\n# Some helper functions\nwbt.version()\nwbt.help()\n\n# Set working directory to your data location. By default, it is your project's working directory (found via `pwd()`)\nwbt.set_working_dir(joinpath(pwd(),\"Data\"))\n\n# Set the verbose mode to `false` if you want less printing\nwbt.set_verbose_mode(false)\n\n# Run some hydrology tools!\nwbt.feature_preserving_smoothing(dem = \"DEM.tif\", output = \"smoothed.tif\")\nwbt.breach_depressions(dem = \"smoothed.tif\", output = \"breached.tif\")\nwbt.d_inf_flow_accumulation(i = \"breached.tif\", output = \"flow_accum.tif\")\n","category":"page"},{"location":"how_it_works/#How-it-works","page":"How it Works","title":"How it works","text":"","category":"section"},{"location":"how_it_works/#Getting-**WhiteboxTools**","page":"How it Works","title":"Getting WhiteboxTools","text":"","category":"section"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"Whitebox.jl depends on the WhiteboxTools_jll.jl package to provide a build of WhiteboxTools.","category":"page"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"The WhiteboxTools_jll.jl repo says: ","category":"page"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"\"This is an autogenerated package constructed using BinaryBuilder.jl. The originating build_tarballs.jl script can be found on Yggdrasil, the community build tree. If you have any issue, please report it to the Yggdrasil bug tracker.For more details about JLL packages and how to use them, see BinaryBuilder.jl documentation.\"","category":"page"},{"location":"how_it_works/#Setting-defaults","page":"How it Works","title":"Setting defaults","text":"","category":"section"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"Loading the Whitebox.jl package will automatically create an object containing info about default parameters, the working directory, and location of WhiteboxTools. ","category":"page"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"This object is called wbt_info, and it is a struct of type WhiteboxTools.","category":"page"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"Users can use dump to view all its info:","category":"page"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"dump(wbt.wbt_info)\n\n# Whitebox.WhiteboxTools\n#   exe_name: String \"whitebox_tools\"\n#   exe_path: String \"/Users/.../bin/whitebox_tools\"\n#   work_dir: String \"/Users/...your_wd\"\n#   verbose: Bool true\n#   cancel_op: Bool false\n#   default_callback: default_callback (function of type typeof(Whitebox.default_callback))\n#   start_minimized: Bool false\n#   __compress_rasters: Bool false","category":"page"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"Every function in the Whitebox.jl package requires an object of type WhiteboxTools, and every function uses the wbt_info object as the default.","category":"page"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"To change the default settings of the WhiteboxTools program for your session, you should change them using the provided functions.","category":"page"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"For example:","category":"page"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"wbt.set_verbose_mode(false)","category":"page"},{"location":"how_it_works/#Generating-functions","page":"How it Works","title":"Generating functions","text":"","category":"section"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"Most of the functions in this package were generated using the included whitebox_plugin_generator.py. This file was adapted from the file of the same name in the WhiteboxTools repo","category":"page"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"Using a python script was intentional so that future updates or added functions could be generated from the Python package.","category":"page"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"Some additional changes to the generated functions were required:","category":"page"},{"location":"how_it_works/","page":"How it Works","title":"How it Works","text":"wbt.multiscale_topographic_position_image: changed local input argument references to localrast. local is a reserved word for Julia.\nwbt.conditional_evaluation: true and false input arguments were changed to True and False. ","category":"page"}]
}
