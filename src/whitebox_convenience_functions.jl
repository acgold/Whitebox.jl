import WhiteboxTools_jll as WBT_jll
using Downloads
using ZipFile
using OutputCollectors
using DefaultApplication

##########################################################################
# These functions were generated by `whitebox_plugin_generator_julia.py` #
##########################################################################


##############
# Data Tools #
##############

"""
    add_point_coordinates_to_table(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Modifies the attribute table of a point vector by adding fields containing each point's X and Y coordinates.
# Arguments
- `i`: Input vector Points file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function add_point_coordinates_to_table(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("add_point_coordinates_to_table"; args, callback) # returns 1 if error
end
    

"""
    clean_vector(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Removes null features and lines/polygons with fewer than the required number of vertices.
# Arguments
- `i`: Input vector file. 
- `output`: Output vector file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function clean_vector(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("clean_vector"; args, callback) # returns 1 if error
end
    

"""
    convert_nodata_to_zero(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Converts nodata values in a raster to zero.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function convert_nodata_to_zero(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("convert_nodata_to_zero"; args, callback) # returns 1 if error
end
    

"""
    convert_raster_format(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Converts raster data from one format to another.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function convert_raster_format(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("convert_raster_format"; args, callback) # returns 1 if error
end
    

"""
    csv_points_to_vector(wbt_info::WhiteboxTools = wbt_info; i, output, xfield=0, yfield=1, epsg=nothing, callback::Union{Nothing,Function}=nothing)
Converts a CSV text file to vector points.
# Arguments
- `i`: Input CSV file (i.e. source of data to be imported). 
- `output`: Output vector file. 
- `xfield`: X field number (e.g. 0 for first field). 
- `yfield`: Y field number (e.g. 1 for second field). 
- `epsg`: EPSG projection (e.g. 2958). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function csv_points_to_vector(wbt_info::WhiteboxTools = wbt_info; i, output, xfield=0, yfield=1, epsg=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--xfield=" * string(xfield))
    push!(args, "--yfield=" * string(yfield))
    if isnothing(epsg) === false
        push!(args, "--epsg=" * string(epsg))
    end
    return run_tool("csv_points_to_vector"; args, callback) # returns 1 if error
end
    

"""
    export_table_to_csv(wbt_info::WhiteboxTools = wbt_info; i, output, headers=true, callback::Union{Nothing,Function}=nothing)
Exports an attribute table to a CSV text file.
# Arguments
- `i`: Input vector file. 
- `output`: Output csv file. 
- `headers`: Export field names as file header?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function export_table_to_csv(wbt_info::WhiteboxTools = wbt_info; i, output, headers=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if headers === true
        push!(args, "--headers")
    end
    return run_tool("export_table_to_csv"; args, callback) # returns 1 if error
end
    

"""
    join_tables(wbt_info::WhiteboxTools = wbt_info; input1, pkey, input2, fkey, import_field, callback::Union{Nothing,Function}=nothing)
Merge a vector's attribute table with another table based on a common field.
# Arguments
- `input1`: Input primary vector file (i.e. the table to be modified). 
- `pkey`: Primary key field. 
- `input2`: Input foreign vector file (i.e. source of data to be imported). 
- `fkey`: Foreign key field. 
- `import_field`: Imported field (all fields will be imported if not specified). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function join_tables(wbt_info::WhiteboxTools = wbt_info; input1, pkey, input2, fkey, import_field, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--pkey=" * string(pkey))
    push!(args, "--input2=" * string(input2))
    push!(args, "--fkey=" * string(fkey))
    push!(args, "--import_field=" * string(import_field))
    return run_tool("join_tables"; args, callback) # returns 1 if error
end
    

"""
    lines_to_polygons(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Converts vector polylines to polygons.
# Arguments
- `i`: Input vector line file. 
- `output`: Output vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lines_to_polygons(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("lines_to_polygons"; args, callback) # returns 1 if error
end
    

"""
    merge_table_with_csv(wbt_info::WhiteboxTools = wbt_info; i, pkey, csv, fkey, import_field=nothing, callback::Union{Nothing,Function}=nothing)
Merge a vector's attribute table with a table contained within a CSV text file.
# Arguments
- `i`: Input primary vector file (i.e. the table to be modified). 
- `pkey`: Primary key field. 
- `csv`: Input CSV file (i.e. source of data to be imported). 
- `fkey`: Foreign key field. 
- `import_field`: Imported field (all fields will be imported if not specified). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function merge_table_with_csv(wbt_info::WhiteboxTools = wbt_info; i, pkey, csv, fkey, import_field=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--pkey=" * string(pkey))
    push!(args, "--csv=" * string(csv))
    push!(args, "--fkey=" * string(fkey))
    if isnothing(import_field) === false
        push!(args, "--import_field=" * string(import_field))
    end
    return run_tool("merge_table_with_csv"; args, callback) # returns 1 if error
end
    

"""
    merge_vectors(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
Combines two or more input vectors of the same ShapeType creating a single, new output vector.
# Arguments
- `inputs`: Input vector files. 
- `output`: Output vector file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function merge_vectors(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    return run_tool("merge_vectors"; args, callback) # returns 1 if error
end
    

"""
    modify_no_data_value(wbt_info::WhiteboxTools = wbt_info; i, new_value="-32768.0", callback::Union{Nothing,Function}=nothing)
Converts nodata values in a raster to zero.
# Arguments
- `i`: Input raster file. 
- `new_value`: New NoData value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function modify_no_data_value(wbt_info::WhiteboxTools = wbt_info; i, new_value="-32768.0", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--new_value=" * string(new_value))
    return run_tool("modify_no_data_value"; args, callback) # returns 1 if error
end
    

"""
    multi_part_to_single_part(wbt_info::WhiteboxTools = wbt_info; i, output, exclude_holes=true, callback::Union{Nothing,Function}=nothing)
Converts a vector file containing multi-part features into a vector containing only single-part features.
# Arguments
- `i`: Input vector line or polygon file. 
- `output`: Output vector line or polygon file. 
- `exclude_holes`: Exclude hole parts from the feature splitting? (holes will continue to belong to their features in output.). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function multi_part_to_single_part(wbt_info::WhiteboxTools = wbt_info; i, output, exclude_holes=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if exclude_holes === true
        push!(args, "--exclude_holes")
    end
    return run_tool("multi_part_to_single_part"; args, callback) # returns 1 if error
end
    

"""
    new_raster_from_base(wbt_info::WhiteboxTools = wbt_info; base, output, value="nodata", data_type="float", cell_size=nothing, callback::Union{Nothing,Function}=nothing)
Creates a new raster using a base image.
# Arguments
- `base`: Input base raster file. 
- `output`: Output raster file. 
- `value`: Constant value to fill raster with; either 'nodata' or numeric value. 
- `data_type`: Output raster data type; options include 'double' (64-bit), 'float' (32-bit), and 'integer' (signed 16-bit) (default is 'float'). 
- `cell_size`: Optionally specified cell size of output raster. Not used when base raster is specified. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function new_raster_from_base(wbt_info::WhiteboxTools = wbt_info; base, output, value="nodata", data_type="float", cell_size=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--base=" * string(base))
    push!(args, "--output=" * string(output))
    push!(args, "--value=" * string(value))
    push!(args, "--data_type=" * string(data_type))
    if isnothing(cell_size) === false
        push!(args, "--cell_size=" * string(cell_size))
    end
    return run_tool("new_raster_from_base"; args, callback) # returns 1 if error
end
    

"""
    polygons_to_lines(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Converts vector polygons to polylines.
# Arguments
- `i`: Input vector polygon file. 
- `output`: Output vector lines file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function polygons_to_lines(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("polygons_to_lines"; args, callback) # returns 1 if error
end
    

"""
    print_geo_tiff_tags(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Prints the tags within a GeoTIFF.
# Arguments
- `i`: Input GeoTIFF file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function print_geo_tiff_tags(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("print_geo_tiff_tags"; args, callback) # returns 1 if error
end
    

"""
    raster_to_vector_lines(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Converts a raster lines features into a vector of the POLYLINE shapetype.
# Arguments
- `i`: Input raster lines file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function raster_to_vector_lines(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("raster_to_vector_lines"; args, callback) # returns 1 if error
end
    

"""
    raster_to_vector_points(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Converts a raster dataset to a vector of the POINT shapetype.
# Arguments
- `i`: Input raster file. 
- `output`: Output vector points file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function raster_to_vector_points(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("raster_to_vector_points"; args, callback) # returns 1 if error
end
    

"""
    raster_to_vector_polygons(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Converts a raster dataset to a vector of the POLYGON shapetype.
# Arguments
- `i`: Input raster file. 
- `output`: Output vector polygons file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function raster_to_vector_polygons(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("raster_to_vector_polygons"; args, callback) # returns 1 if error
end
    

"""
    reinitialize_attribute_table(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Reinitializes a vector's attribute table deleting all fields but the feature ID (FID).
# Arguments
- `i`: Input vector file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function reinitialize_attribute_table(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("reinitialize_attribute_table"; args, callback) # returns 1 if error
end
    

"""
    remove_polygon_holes(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Removes holes within the features of a vector polygon file.
# Arguments
- `i`: Input vector polygon file. 
- `output`: Output vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function remove_polygon_holes(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("remove_polygon_holes"; args, callback) # returns 1 if error
end
    

"""
    set_nodata_value(wbt_info::WhiteboxTools = wbt_info; i, output, back_value=0.0, callback::Union{Nothing,Function}=nothing)
Assign a specified value in an input image to the NoData value.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `back_value`: Background value to set to nodata. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function set_nodata_value(wbt_info::WhiteboxTools = wbt_info; i, output, back_value=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--back_value=" * string(back_value))
    return run_tool("set_nodata_value"; args, callback) # returns 1 if error
end
    

"""
    single_part_to_multi_part(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, callback::Union{Nothing,Function}=nothing)
Converts a vector file containing multi-part features into a vector containing only single-part features.
# Arguments
- `i`: Input vector line or polygon file. 
- `field`: Grouping ID field name in attribute table. 
- `output`: Output vector line or polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function single_part_to_multi_part(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(field) === false
        push!(args, "--field=" * string(field))
    end
    push!(args, "--output=" * string(output))
    return run_tool("single_part_to_multi_part"; args, callback) # returns 1 if error
end
    

"""
    vector_lines_to_raster(wbt_info::WhiteboxTools = wbt_info; i, output, field="FID", nodata=true, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
Converts a vector containing polylines into a raster.
# Arguments
- `i`: Input vector lines file. 
- `field`: Input field name in attribute table. 
- `output`: Output raster file. 
- `nodata`: Background value to set to NoData. Without this flag, it will be set to 0.0. 
- `cell_size`: Optionally specified cell size of output raster. Not used when base raster is specified. 
- `base`: Optionally specified input base raster file. Not used when a cell size is specified. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function vector_lines_to_raster(wbt_info::WhiteboxTools = wbt_info; i, output, field="FID", nodata=true, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--field=" * string(field))
    push!(args, "--output=" * string(output))
    if nodata === true
        push!(args, "--nodata")
    end
    if isnothing(cell_size) === false
        push!(args, "--cell_size=" * string(cell_size))
    end
    if isnothing(base) === false
        push!(args, "--base=" * string(base))
    end
    return run_tool("vector_lines_to_raster"; args, callback) # returns 1 if error
end
    

"""
    vector_points_to_raster(wbt_info::WhiteboxTools = wbt_info; i, output, field="FID", assign="last", nodata=true, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
Converts a vector containing points into a raster.
# Arguments
- `i`: Input vector Points file. 
- `field`: Input field name in attribute table. 
- `output`: Output raster file. 
- `assign`: Assignment operation, where multiple points are in the same grid cell; options include 'first', 'last' (default), 'min', 'max', 'sum'. 
- `nodata`: Background value to set to NoData. Without this flag, it will be set to 0.0. 
- `cell_size`: Optionally specified cell size of output raster. Not used when base raster is specified. 
- `base`: Optionally specified input base raster file. Not used when a cell size is specified. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function vector_points_to_raster(wbt_info::WhiteboxTools = wbt_info; i, output, field="FID", assign="last", nodata=true, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--field=" * string(field))
    push!(args, "--output=" * string(output))
    push!(args, "--assign=" * string(assign))
    if nodata === true
        push!(args, "--nodata")
    end
    if isnothing(cell_size) === false
        push!(args, "--cell_size=" * string(cell_size))
    end
    if isnothing(base) === false
        push!(args, "--base=" * string(base))
    end
    return run_tool("vector_points_to_raster"; args, callback) # returns 1 if error
end
    

"""
    vector_polygons_to_raster(wbt_info::WhiteboxTools = wbt_info; i, output, field="FID", nodata=true, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
Converts a vector containing polygons into a raster.
# Arguments
- `i`: Input vector polygons file. 
- `field`: Input field name in attribute table. 
- `output`: Output raster file. 
- `nodata`: Background value to set to NoData. Without this flag, it will be set to 0.0. 
- `cell_size`: Optionally specified cell size of output raster. Not used when base raster is specified. 
- `base`: Optionally specified input base raster file. Not used when a cell size is specified. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function vector_polygons_to_raster(wbt_info::WhiteboxTools = wbt_info; i, output, field="FID", nodata=true, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--field=" * string(field))
    push!(args, "--output=" * string(output))
    if nodata === true
        push!(args, "--nodata")
    end
    if isnothing(cell_size) === false
        push!(args, "--cell_size=" * string(cell_size))
    end
    if isnothing(base) === false
        push!(args, "--base=" * string(base))
    end
    return run_tool("vector_polygons_to_raster"; args, callback) # returns 1 if error
end
    

################
# GIS Analysis #
################

"""
    aggregate_raster(wbt_info::WhiteboxTools = wbt_info; i, output, agg_factor=2, type="mean", callback::Union{Nothing,Function}=nothing)
Aggregates a raster to a lower resolution.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `agg_factor`: Aggregation factor, in pixels. 
- `type`: Statistic used to fill output pixels. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function aggregate_raster(wbt_info::WhiteboxTools = wbt_info; i, output, agg_factor=2, type="mean", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--agg_factor=" * string(agg_factor))
    push!(args, "--type=" * string(type))
    return run_tool("aggregate_raster"; args, callback) # returns 1 if error
end
    

"""
    block_maximum_gridding(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
Creates a raster grid based on a set of vector points and assigns grid values using a block maximum scheme.
# Arguments
- `i`: Input vector Points file. 
- `field`: Input field name in attribute table. 
- `use_z`: Use z-coordinate instead of field?. 
- `output`: Output raster file. 
- `cell_size`: Optionally specified cell size of output raster. Not used when base raster is specified. 
- `base`: Optionally specified input base raster file. Not used when a cell size is specified. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function block_maximum_gridding(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--field=" * string(field))
    if use_z === true
        push!(args, "--use_z")
    end
    push!(args, "--output=" * string(output))
    if isnothing(cell_size) === false
        push!(args, "--cell_size=" * string(cell_size))
    end
    if isnothing(base) === false
        push!(args, "--base=" * string(base))
    end
    return run_tool("block_maximum_gridding"; args, callback) # returns 1 if error
end
    

"""
    block_minimum_gridding(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
Creates a raster grid based on a set of vector points and assigns grid values using a block minimum scheme.
# Arguments
- `i`: Input vector Points file. 
- `field`: Input field name in attribute table. 
- `use_z`: Use z-coordinate instead of field?. 
- `output`: Output raster file. 
- `cell_size`: Optionally specified cell size of output raster. Not used when base raster is specified. 
- `base`: Optionally specified input base raster file. Not used when a cell size is specified. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function block_minimum_gridding(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--field=" * string(field))
    if use_z === true
        push!(args, "--use_z")
    end
    push!(args, "--output=" * string(output))
    if isnothing(cell_size) === false
        push!(args, "--cell_size=" * string(cell_size))
    end
    if isnothing(base) === false
        push!(args, "--base=" * string(base))
    end
    return run_tool("block_minimum_gridding"; args, callback) # returns 1 if error
end
    

"""
    centroid(wbt_info::WhiteboxTools = wbt_info; i, output, text_output=false, callback::Union{Nothing,Function}=nothing)
Calculates the centroid, or average location, of raster polygon objects.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `text_output`: Optional text output. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function centroid(wbt_info::WhiteboxTools = wbt_info; i, output, text_output=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if text_output === true
        push!(args, "--text_output")
    end
    return run_tool("centroid"; args, callback) # returns 1 if error
end
    

"""
    centroid_vector(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Identifies the centroid point of a vector polyline or polygon feature or a group of vector points.
# Arguments
- `i`: Input vector file. 
- `output`: Output vector file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function centroid_vector(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("centroid_vector"; args, callback) # returns 1 if error
end
    

"""
    clump(wbt_info::WhiteboxTools = wbt_info; i, output, diag=true, zero_back=false, callback::Union{Nothing,Function}=nothing)
Groups cells that form discrete areas, assigning them unique identifiers.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `diag`: Flag indicating whether diagonal connections should be considered. 
- `zero_back`: Flag indicating whether zero values should be treated as a background. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function clump(wbt_info::WhiteboxTools = wbt_info; i, output, diag=true, zero_back=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if diag === true
        push!(args, "--diag")
    end
    if zero_back === true
        push!(args, "--zero_back")
    end
    return run_tool("clump"; args, callback) # returns 1 if error
end
    

"""
    construct_vector_tin(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, use_z=false, max_triangle_edge_length=nothing, callback::Union{Nothing,Function}=nothing)
Creates a vector triangular irregular network (TIN) for a set of vector points.
# Arguments
- `i`: Input vector points file. 
- `field`: Input field name in attribute table. 
- `use_z`: Use the 'z' dimension of the Shapefile's geometry instead of an attribute field?. 
- `output`: Output vector polygon file. 
- `max_triangle_edge_length`: Optional maximum triangle edge length; triangles larger than this size will not be gridded. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function construct_vector_tin(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, use_z=false, max_triangle_edge_length=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(field) === false
        push!(args, "--field=" * string(field))
    end
    if use_z === true
        push!(args, "--use_z")
    end
    push!(args, "--output=" * string(output))
    if isnothing(max_triangle_edge_length) === false
        push!(args, "--max_triangle_edge_length=" * string(max_triangle_edge_length))
    end
    return run_tool("construct_vector_tin"; args, callback) # returns 1 if error
end
    

"""
    create_hexagonal_vector_grid(wbt_info::WhiteboxTools = wbt_info; i, output, width, orientation="horizontal", callback::Union{Nothing,Function}=nothing)
Creates a hexagonal vector grid.
# Arguments
- `i`: Input base file. 
- `output`: Output vector polygon file. 
- `width`: The grid cell width. 
- `orientation`: Grid Orientation, 'horizontal' or 'vertical'. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function create_hexagonal_vector_grid(wbt_info::WhiteboxTools = wbt_info; i, output, width, orientation="horizontal", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--width=" * string(width))
    push!(args, "--orientation=" * string(orientation))
    return run_tool("create_hexagonal_vector_grid"; args, callback) # returns 1 if error
end
    

"""
    create_plane(wbt_info::WhiteboxTools = wbt_info; base, output, gradient=15.0, aspect=90.0, constant=0.0, callback::Union{Nothing,Function}=nothing)
Creates a raster image based on the equation for a simple plane.
# Arguments
- `base`: Input base raster file. 
- `output`: Output raster file. 
- `gradient`: Slope gradient in degrees (-85.0 to 85.0). 
- `aspect`: Aspect (direction) in degrees clockwise from north (0.0-360.0). 
- `constant`: Constant value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function create_plane(wbt_info::WhiteboxTools = wbt_info; base, output, gradient=15.0, aspect=90.0, constant=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--base=" * string(base))
    push!(args, "--output=" * string(output))
    push!(args, "--gradient=" * string(gradient))
    push!(args, "--aspect=" * string(aspect))
    push!(args, "--constant=" * string(constant))
    return run_tool("create_plane"; args, callback) # returns 1 if error
end
    

"""
    create_rectangular_vector_grid(wbt_info::WhiteboxTools = wbt_info; i, output, width, height, xorig=0, yorig=0, callback::Union{Nothing,Function}=nothing)
Creates a rectangular vector grid.
# Arguments
- `i`: Input base file. 
- `output`: Output vector polygon file. 
- `width`: The grid cell width. 
- `height`: The grid cell height. 
- `xorig`: The grid origin x-coordinate. 
- `yorig`: The grid origin y-coordinate. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function create_rectangular_vector_grid(wbt_info::WhiteboxTools = wbt_info; i, output, width, height, xorig=0, yorig=0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--width=" * string(width))
    push!(args, "--height=" * string(height))
    push!(args, "--xorig=" * string(xorig))
    push!(args, "--yorig=" * string(yorig))
    return run_tool("create_rectangular_vector_grid"; args, callback) # returns 1 if error
end
    

"""
    dissolve(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, snap=0.0, callback::Union{Nothing,Function}=nothing)
Removes the interior, or shared, boundaries within a vector polygon coverage.
# Arguments
- `i`: Input vector file. 
- `field`: Dissolve field attribute (optional). 
- `output`: Output vector file. 
- `snap`: Snap tolerance. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function dissolve(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, snap=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(field) === false
        push!(args, "--field=" * string(field))
    end
    push!(args, "--output=" * string(output))
    push!(args, "--snap=" * string(snap))
    return run_tool("dissolve"; args, callback) # returns 1 if error
end
    

"""
    eliminate_coincident_points(wbt_info::WhiteboxTools = wbt_info; i, output, tolerance, callback::Union{Nothing,Function}=nothing)
Removes any coincident, or nearly coincident, points from a vector points file.
# Arguments
- `i`: Input vector file. 
- `output`: Output vector polygon file. 
- `tolerance`: The distance tolerance for points. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function eliminate_coincident_points(wbt_info::WhiteboxTools = wbt_info; i, output, tolerance, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--tolerance=" * string(tolerance))
    return run_tool("eliminate_coincident_points"; args, callback) # returns 1 if error
end
    

"""
    extend_vector_lines(wbt_info::WhiteboxTools = wbt_info; i, output, dist, extend="both ends", callback::Union{Nothing,Function}=nothing)
Extends vector lines by a specified distance.
# Arguments
- `i`: Input vector polyline file. 
- `output`: Output vector polyline file. 
- `dist`: The distance to extend. 
- `extend`: Extend direction, 'both ends' (default), 'line start', 'line end'. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function extend_vector_lines(wbt_info::WhiteboxTools = wbt_info; i, output, dist, extend="both ends", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--dist=" * string(dist))
    push!(args, "--extend=" * string(extend))
    return run_tool("extend_vector_lines"; args, callback) # returns 1 if error
end
    

"""
    extract_nodes(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Converts vector lines or polygons into vertex points.
# Arguments
- `i`: Input vector lines or polygon file. 
- `output`: Output vector points file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function extract_nodes(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("extract_nodes"; args, callback) # returns 1 if error
end
    

"""
    extract_raster_values_at_points(wbt_info::WhiteboxTools = wbt_info; inputs, points, out_text=false, callback::Union{Nothing,Function}=nothing)
Extracts the values of raster(s) at vector point locations.
# Arguments
- `inputs`: Input raster files. 
- `points`: Input vector points file. 
- `out_text`: Output point values as text? Otherwise, the only output is to to the points file's attribute table. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function extract_raster_values_at_points(wbt_info::WhiteboxTools = wbt_info; inputs, points, out_text=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--points=" * string(points))
    if out_text === true
        push!(args, "--out_text")
    end
    return run_tool("extract_raster_values_at_points"; args, callback) # returns 1 if error
end
    

"""
    filter_raster_features_by_area(wbt_info::WhiteboxTools = wbt_info; i, output, threshold, background="zero", callback::Union{Nothing,Function}=nothing)
Removes small-area features from a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `threshold`: Remove features with fewer grid cells than this threshold value. 
- `background`: Background value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function filter_raster_features_by_area(wbt_info::WhiteboxTools = wbt_info; i, output, threshold, background="zero", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--threshold=" * string(threshold))
    push!(args, "--background=" * string(background))
    return run_tool("filter_raster_features_by_area"; args, callback) # returns 1 if error
end
    

"""
    find_lowest_or_highest_points(wbt_info::WhiteboxTools = wbt_info; i, output, out_type="lowest", callback::Union{Nothing,Function}=nothing)
Locates the lowest and/or highest valued cells in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output vector points file. 
- `out_type`: Output type; one of 'area' (default) and 'volume'. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function find_lowest_or_highest_points(wbt_info::WhiteboxTools = wbt_info; i, output, out_type="lowest", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--out_type=" * string(out_type))
    return run_tool("find_lowest_or_highest_points"; args, callback) # returns 1 if error
end
    

"""
    idw_interpolation(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, weight=2.0, radius=nothing, min_points=nothing, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
Interpolates vector points into a raster surface using an inverse-distance weighted scheme.
# Arguments
- `i`: Input vector Points file. 
- `field`: Input field name in attribute table. 
- `use_z`: Use z-coordinate instead of field?. 
- `output`: Output raster file. 
- `weight`: IDW weight value. 
- `radius`: Search Radius in map units. 
- `min_points`: Minimum number of points. 
- `cell_size`: Optionally specified cell size of output raster. Not used when base raster is specified. 
- `base`: Optionally specified input base raster file. Not used when a cell size is specified. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function idw_interpolation(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, weight=2.0, radius=nothing, min_points=nothing, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--field=" * string(field))
    if use_z === true
        push!(args, "--use_z")
    end
    push!(args, "--output=" * string(output))
    push!(args, "--weight=" * string(weight))
    if isnothing(radius) === false
        push!(args, "--radius=" * string(radius))
    end
    if isnothing(min_points) === false
        push!(args, "--min_points=" * string(min_points))
    end
    if isnothing(cell_size) === false
        push!(args, "--cell_size=" * string(cell_size))
    end
    if isnothing(base) === false
        push!(args, "--base=" * string(base))
    end
    return run_tool("idw_interpolation"; args, callback) # returns 1 if error
end
    

"""
    layer_footprint(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Creates a vector polygon footprint of the area covered by a raster grid or vector layer.
# Arguments
- `i`: Input raster or vector file. 
- `output`: Output vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function layer_footprint(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("layer_footprint"; args, callback) # returns 1 if error
end
    

"""
    medoid(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Calculates the medoid for a series of vector features contained in a shapefile.
# Arguments
- `i`: Input vector file. 
- `output`: Output vector file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function medoid(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("medoid"; args, callback) # returns 1 if error
end
    

"""
    minimum_bounding_box(wbt_info::WhiteboxTools = wbt_info; i, output, criterion="area", features=true, callback::Union{Nothing,Function}=nothing)
Creates a vector minimum bounding rectangle around vector features.
# Arguments
- `i`: Input vector file. 
- `output`: Output vector polygon file. 
- `criterion`: Minimization criterion; options include 'area' (default), 'length', 'width', and 'perimeter'. 
- `features`: Find the minimum bounding rectangles around each individual vector feature. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function minimum_bounding_box(wbt_info::WhiteboxTools = wbt_info; i, output, criterion="area", features=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--criterion=" * string(criterion))
    if features === true
        push!(args, "--features")
    end
    return run_tool("minimum_bounding_box"; args, callback) # returns 1 if error
end
    

"""
    minimum_bounding_circle(wbt_info::WhiteboxTools = wbt_info; i, output, features=true, callback::Union{Nothing,Function}=nothing)
Delineates the minimum bounding circle (i.e. smallest enclosing circle) for a group of vectors.
# Arguments
- `i`: Input vector file. 
- `output`: Output vector polygon file. 
- `features`: Find the minimum bounding circle around each individual vector feature. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function minimum_bounding_circle(wbt_info::WhiteboxTools = wbt_info; i, output, features=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if features === true
        push!(args, "--features")
    end
    return run_tool("minimum_bounding_circle"; args, callback) # returns 1 if error
end
    

"""
    minimum_bounding_envelope(wbt_info::WhiteboxTools = wbt_info; i, output, features=true, callback::Union{Nothing,Function}=nothing)
Creates a vector axis-aligned minimum bounding rectangle (envelope) around vector features.
# Arguments
- `i`: Input vector file. 
- `output`: Output vector polygon file. 
- `features`: Find the minimum bounding envelop around each individual vector feature. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function minimum_bounding_envelope(wbt_info::WhiteboxTools = wbt_info; i, output, features=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if features === true
        push!(args, "--features")
    end
    return run_tool("minimum_bounding_envelope"; args, callback) # returns 1 if error
end
    

"""
    minimum_convex_hull(wbt_info::WhiteboxTools = wbt_info; i, output, features=true, callback::Union{Nothing,Function}=nothing)
Creates a vector convex polygon around vector features.
# Arguments
- `i`: Input vector file. 
- `output`: Output vector polygon file. 
- `features`: Find the hulls around each vector feature. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function minimum_convex_hull(wbt_info::WhiteboxTools = wbt_info; i, output, features=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if features === true
        push!(args, "--features")
    end
    return run_tool("minimum_convex_hull"; args, callback) # returns 1 if error
end
    

"""
    natural_neighbour_interpolation(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, use_z=false, cell_size=nothing, base=nothing, clip=true, callback::Union{Nothing,Function}=nothing)
Creates a raster grid based on Sibson's natural neighbour method.
# Arguments
- `i`: Input vector points file. 
- `field`: Input field name in attribute table. 
- `use_z`: Use the 'z' dimension of the Shapefile's geometry instead of an attribute field?. 
- `output`: Output raster file. 
- `cell_size`: Optionally specified cell size of output raster. Not used when base raster is specified. 
- `base`: Optionally specified input base raster file. Not used when a cell size is specified. 
- `clip`: Clip the data to the convex hull of the points?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function natural_neighbour_interpolation(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, use_z=false, cell_size=nothing, base=nothing, clip=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(field) === false
        push!(args, "--field=" * string(field))
    end
    if use_z === true
        push!(args, "--use_z")
    end
    push!(args, "--output=" * string(output))
    if isnothing(cell_size) === false
        push!(args, "--cell_size=" * string(cell_size))
    end
    if isnothing(base) === false
        push!(args, "--base=" * string(base))
    end
    if clip === true
        push!(args, "--clip")
    end
    return run_tool("natural_neighbour_interpolation"; args, callback) # returns 1 if error
end
    

"""
    nearest_neighbour_gridding(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, cell_size=nothing, base=nothing, max_dist=nothing, callback::Union{Nothing,Function}=nothing)
Creates a raster grid based on a set of vector points and assigns grid values using the nearest neighbour.
# Arguments
- `i`: Input vector Points file. 
- `field`: Input field name in attribute table. 
- `use_z`: Use z-coordinate instead of field?. 
- `output`: Output raster file. 
- `cell_size`: Optionally specified cell size of output raster. Not used when base raster is specified. 
- `base`: Optionally specified input base raster file. Not used when a cell size is specified. 
- `max_dist`: Maximum search distance (optional). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function nearest_neighbour_gridding(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, cell_size=nothing, base=nothing, max_dist=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--field=" * string(field))
    if use_z === true
        push!(args, "--use_z")
    end
    push!(args, "--output=" * string(output))
    if isnothing(cell_size) === false
        push!(args, "--cell_size=" * string(cell_size))
    end
    if isnothing(base) === false
        push!(args, "--base=" * string(base))
    end
    if isnothing(max_dist) === false
        push!(args, "--max_dist=" * string(max_dist))
    end
    return run_tool("nearest_neighbour_gridding"; args, callback) # returns 1 if error
end
    

"""
    polygon_area(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Calculates the area of vector polygons.
# Arguments
- `i`: Input vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function polygon_area(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("polygon_area"; args, callback) # returns 1 if error
end
    

"""
    polygon_long_axis(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
This tool can be used to map the long axis of polygon features.
# Arguments
- `i`: Input vector polygons file. 
- `output`: Output vector polyline file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function polygon_long_axis(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("polygon_long_axis"; args, callback) # returns 1 if error
end
    

"""
    polygon_perimeter(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Calculates the perimeter of vector polygons.
# Arguments
- `i`: Input vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function polygon_perimeter(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("polygon_perimeter"; args, callback) # returns 1 if error
end
    

"""
    polygon_short_axis(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
This tool can be used to map the short axis of polygon features.
# Arguments
- `i`: Input vector polygons file. 
- `output`: Output vector polyline file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function polygon_short_axis(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("polygon_short_axis"; args, callback) # returns 1 if error
end
    

"""
    radial_basis_function_interpolation(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, radius=nothing, min_points=nothing, func_type="ThinPlateSpline", poly_order="none", weight=0.1, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
Interpolates vector points into a raster surface using a radial basis function scheme.
# Arguments
- `i`: Input vector points file. 
- `field`: Input field name in attribute table. 
- `use_z`: Use z-coordinate instead of field?. 
- `output`: Output raster file. 
- `radius`: Search Radius (in map units). 
- `min_points`: Minimum number of points. 
- `func_type`: Radial basis function type; options are 'ThinPlateSpline' (default), 'PolyHarmonic', 'Gaussian', 'MultiQuadric', 'InverseMultiQuadric'. 
- `poly_order`: Polynomial order; options are 'none' (default), 'constant', 'affine'. 
- `weight`: Weight parameter used in basis function. 
- `cell_size`: Optionally specified cell size of output raster. Not used when base raster is specified. 
- `base`: Optionally specified input base raster file. Not used when a cell size is specified. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function radial_basis_function_interpolation(wbt_info::WhiteboxTools = wbt_info; i, field, output, use_z=false, radius=nothing, min_points=nothing, func_type="ThinPlateSpline", poly_order="none", weight=0.1, cell_size=nothing, base=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--field=" * string(field))
    if use_z === true
        push!(args, "--use_z")
    end
    push!(args, "--output=" * string(output))
    if isnothing(radius) === false
        push!(args, "--radius=" * string(radius))
    end
    if isnothing(min_points) === false
        push!(args, "--min_points=" * string(min_points))
    end
    push!(args, "--func_type=" * string(func_type))
    push!(args, "--poly_order=" * string(poly_order))
    push!(args, "--weight=" * string(weight))
    if isnothing(cell_size) === false
        push!(args, "--cell_size=" * string(cell_size))
    end
    if isnothing(base) === false
        push!(args, "--base=" * string(base))
    end
    return run_tool("radial_basis_function_interpolation"; args, callback) # returns 1 if error
end
    

"""
    raster_area(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, out_text=false, units="grid cells", zero_back=false, callback::Union{Nothing,Function}=nothing)
Calculates the area of polygons or classes within a raster image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `out_text`: Would you like to output polygon areas to text?. 
- `units`: Area units; options include 'grid cells' and 'map units'. 
- `zero_back`: Flag indicating whether zero values should be treated as a background. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function raster_area(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, out_text=false, units="grid cells", zero_back=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    if out_text === true
        push!(args, "--out_text")
    end
    push!(args, "--units=" * string(units))
    if zero_back === true
        push!(args, "--zero_back")
    end
    return run_tool("raster_area"; args, callback) # returns 1 if error
end
    

"""
    raster_cell_assignment(wbt_info::WhiteboxTools = wbt_info; i, output, assign="column", callback::Union{Nothing,Function}=nothing)
Assign row or column number to cells.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `assign`: Which variable would you like to assign to grid cells? Options include 'column', 'row', 'x', and 'y'. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function raster_cell_assignment(wbt_info::WhiteboxTools = wbt_info; i, output, assign="column", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--assign=" * string(assign))
    return run_tool("raster_cell_assignment"; args, callback) # returns 1 if error
end
    

"""
    raster_perimeter(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, out_text=false, units="grid cells", zero_back=false, callback::Union{Nothing,Function}=nothing)
Calculates the perimeters of polygons or classes within a raster image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `out_text`: Would you like to output polygon areas to text?. 
- `units`: Area units; options include 'grid cells' and 'map units'. 
- `zero_back`: Flag indicating whether zero values should be treated as a background. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function raster_perimeter(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, out_text=false, units="grid cells", zero_back=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    if out_text === true
        push!(args, "--out_text")
    end
    push!(args, "--units=" * string(units))
    if zero_back === true
        push!(args, "--zero_back")
    end
    return run_tool("raster_perimeter"; args, callback) # returns 1 if error
end
    

"""
    reclass(wbt_info::WhiteboxTools = wbt_info; i, output, reclass_vals, assign_mode=false, callback::Union{Nothing,Function}=nothing)
Reclassifies the values in a raster image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `reclass_vals`: Reclassification triplet values (new value; from value; to less than), e.g. '0.0;0.0;1.0;1.0;1.0;2.0'. 
- `assign_mode`: Optional Boolean flag indicating whether to operate in assign mode, reclass_vals values are interpreted as new value; old value pairs. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function reclass(wbt_info::WhiteboxTools = wbt_info; i, output, reclass_vals, assign_mode=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--reclass_vals=" * string(reclass_vals))
    if assign_mode === true
        push!(args, "--assign_mode")
    end
    return run_tool("reclass"; args, callback) # returns 1 if error
end
    

"""
    reclass_equal_interval(wbt_info::WhiteboxTools = wbt_info; i, output, interval=10.0, start_val=nothing, end_val=nothing, callback::Union{Nothing,Function}=nothing)
Reclassifies the values in a raster image based on equal-ranges.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `interval`: Class interval size. 
- `start_val`: Optional starting value (default is input minimum value). 
- `end_val`: Optional ending value (default is input maximum value). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function reclass_equal_interval(wbt_info::WhiteboxTools = wbt_info; i, output, interval=10.0, start_val=nothing, end_val=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--interval=" * string(interval))
    if isnothing(start_val) === false
        push!(args, "--start_val=" * string(start_val))
    end
    if isnothing(end_val) === false
        push!(args, "--end_val=" * string(end_val))
    end
    return run_tool("reclass_equal_interval"; args, callback) # returns 1 if error
end
    

"""
    reclass_from_file(wbt_info::WhiteboxTools = wbt_info; i, reclass_file, output, callback::Union{Nothing,Function}=nothing)
Reclassifies the values in a raster image using reclass ranges in a text file.
# Arguments
- `i`: Input raster file. 
- `reclass_file`: Input text file containing reclass ranges. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function reclass_from_file(wbt_info::WhiteboxTools = wbt_info; i, reclass_file, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--reclass_file=" * string(reclass_file))
    push!(args, "--output=" * string(output))
    return run_tool("reclass_from_file"; args, callback) # returns 1 if error
end
    

"""
    smooth_vectors(wbt_info::WhiteboxTools = wbt_info; i, output, filter=3, callback::Union{Nothing,Function}=nothing)
Smooths a vector coverage of either a POLYLINE or POLYGON base ShapeType.
# Arguments
- `i`: Input vector POLYLINE or POLYGON file. 
- `output`: Output vector file. 
- `filter`: The filter size, any odd integer greater than or equal to 3; default is 3. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function smooth_vectors(wbt_info::WhiteboxTools = wbt_info; i, output, filter=3, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filter=" * string(filter))
    return run_tool("smooth_vectors"; args, callback) # returns 1 if error
end
    

"""
    split_vector_lines(wbt_info::WhiteboxTools = wbt_info; i, output, length=nothing, callback::Union{Nothing,Function}=nothing)
This tool can be used to split a vector line coverage into even-lengthed segments.
# Arguments
- `i`: Name of the input lines shapefile. 
- `output`: Name of the output lines shapefile. 
- `length`: Maximum segment length (m). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function split_vector_lines(wbt_info::WhiteboxTools = wbt_info; i, output, length=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if isnothing(length) === false
        push!(args, "--length=" * string(length))
    end
    return run_tool("split_vector_lines"; args, callback) # returns 1 if error
end
    

"""
    tin_gridding(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, use_z=false, resolution=nothing, base=nothing, max_triangle_edge_length=nothing, callback::Union{Nothing,Function}=nothing)
Creates a raster grid based on a triangular irregular network (TIN) fitted to vector points.
# Arguments
- `i`: Input vector points file. 
- `field`: Input field name in attribute table. 
- `use_z`: Use the 'z' dimension of the Shapefile's geometry instead of an attribute field?. 
- `output`: Output raster file. 
- `resolution`: Output raster's grid resolution. 
- `base`: Optionally specified input base raster file. Not used when a cell size is specified. 
- `max_triangle_edge_length`: Optional maximum triangle edge length; triangles larger than this size will not be gridded. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function tin_gridding(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, use_z=false, resolution=nothing, base=nothing, max_triangle_edge_length=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(field) === false
        push!(args, "--field=" * string(field))
    end
    if use_z === true
        push!(args, "--use_z")
    end
    push!(args, "--output=" * string(output))
    if isnothing(resolution) === false
        push!(args, "--resolution=" * string(resolution))
    end
    if isnothing(base) === false
        push!(args, "--base=" * string(base))
    end
    if isnothing(max_triangle_edge_length) === false
        push!(args, "--max_triangle_edge_length=" * string(max_triangle_edge_length))
    end
    return run_tool("tin_gridding"; args, callback) # returns 1 if error
end
    

"""
    vector_hex_binning(wbt_info::WhiteboxTools = wbt_info; i, output, width, orientation="horizontal", callback::Union{Nothing,Function}=nothing)
Hex-bins a set of vector points.
# Arguments
- `i`: Input base file. 
- `output`: Output vector polygon file. 
- `width`: The grid cell width. 
- `orientation`: Grid Orientation, 'horizontal' or 'vertical'. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function vector_hex_binning(wbt_info::WhiteboxTools = wbt_info; i, output, width, orientation="horizontal", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--width=" * string(width))
    push!(args, "--orientation=" * string(orientation))
    return run_tool("vector_hex_binning"; args, callback) # returns 1 if error
end
    

"""
    voronoi_diagram(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Creates a vector Voronoi diagram for a set of vector points.
# Arguments
- `i`: Input vector points file. 
- `output`: Output vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function voronoi_diagram(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("voronoi_diagram"; args, callback) # returns 1 if error
end
    

###############################
# GIS Analysis/Distance Tools #
###############################

"""
    buffer_raster(wbt_info::WhiteboxTools = wbt_info; i, output, size, gridcells=false, callback::Union{Nothing,Function}=nothing)
Maps a distance-based buffer around each non-background (non-zero/non-nodata) grid cell in an input image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `size`: Buffer size. 
- `gridcells`: Optional flag to indicate that the 'size' threshold should be measured in grid cells instead of the default map units. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function buffer_raster(wbt_info::WhiteboxTools = wbt_info; i, output, size, gridcells=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--size=" * string(size))
    if gridcells === true
        push!(args, "--gridcells")
    end
    return run_tool("buffer_raster"; args, callback) # returns 1 if error
end
    

"""
    cost_allocation(wbt_info::WhiteboxTools = wbt_info; source, backlink, output, callback::Union{Nothing,Function}=nothing)
Identifies the source cell to which each grid cell is connected by a least-cost pathway in a cost-distance analysis.
# Arguments
- `source`: Input source raster file. 
- `backlink`: Input backlink raster file generated by the cost-distance tool. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function cost_allocation(wbt_info::WhiteboxTools = wbt_info; source, backlink, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--source=" * string(source))
    push!(args, "--backlink=" * string(backlink))
    push!(args, "--output=" * string(output))
    return run_tool("cost_allocation"; args, callback) # returns 1 if error
end
    

"""
    cost_distance(wbt_info::WhiteboxTools = wbt_info; source, cost, out_accum, out_backlink, callback::Union{Nothing,Function}=nothing)
Performs cost-distance accumulation on a cost surface and a group of source cells.
# Arguments
- `source`: Input source raster file. 
- `cost`: Input cost (friction) raster file. 
- `out_accum`: Output cost accumulation raster file. 
- `out_backlink`: Output backlink raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function cost_distance(wbt_info::WhiteboxTools = wbt_info; source, cost, out_accum, out_backlink, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--source=" * string(source))
    push!(args, "--cost=" * string(cost))
    push!(args, "--out_accum=" * string(out_accum))
    push!(args, "--out_backlink=" * string(out_backlink))
    return run_tool("cost_distance"; args, callback) # returns 1 if error
end
    

"""
    cost_pathway(wbt_info::WhiteboxTools = wbt_info; destination, backlink, output, zero_background=false, callback::Union{Nothing,Function}=nothing)
Performs cost-distance pathway analysis using a series of destination grid cells.
# Arguments
- `destination`: Input destination raster file. 
- `backlink`: Input backlink raster file generated by the cost-distance tool. 
- `output`: Output cost pathway raster file. 
- `zero_background`: Flag indicating whether zero values should be treated as a background. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function cost_pathway(wbt_info::WhiteboxTools = wbt_info; destination, backlink, output, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--destination=" * string(destination))
    push!(args, "--backlink=" * string(backlink))
    push!(args, "--output=" * string(output))
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("cost_pathway"; args, callback) # returns 1 if error
end
    

"""
    euclidean_allocation(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Assigns grid cells in the output raster the value of the nearest target cell in the input image, measured by the Shih and Wu (2004) Euclidean distance transform.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function euclidean_allocation(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("euclidean_allocation"; args, callback) # returns 1 if error
end
    

"""
    euclidean_distance(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Calculates the Shih and Wu (2004) Euclidean distance transform.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function euclidean_distance(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("euclidean_distance"; args, callback) # returns 1 if error
end
    

##############################
# GIS Analysis/Overlay Tools #
##############################

"""
    average_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
Calculates the average for each grid cell from a group of raster images.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function average_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    return run_tool("average_overlay"; args, callback) # returns 1 if error
end
    

"""
    clip(wbt_info::WhiteboxTools = wbt_info; i, clip, output, callback::Union{Nothing,Function}=nothing)
Extract all the features, or parts of features, that overlap with the features of the clip vector.
# Arguments
- `i`: Input vector file. 
- `clip`: Input clip polygon vector file. 
- `output`: Output vector file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function clip(wbt_info::WhiteboxTools = wbt_info; i, clip, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--clip=" * string(clip))
    push!(args, "--output=" * string(output))
    return run_tool("clip"; args, callback) # returns 1 if error
end
    

"""
    clip_raster_to_polygon(wbt_info::WhiteboxTools = wbt_info; i, polygons, output, maintain_dimensions=false, callback::Union{Nothing,Function}=nothing)
Clips a raster to a vector polygon.
# Arguments
- `i`: Input raster file. 
- `polygons`: Input vector polygons file. 
- `output`: Output raster file. 
- `maintain_dimensions`: Maintain input raster dimensions?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function clip_raster_to_polygon(wbt_info::WhiteboxTools = wbt_info; i, polygons, output, maintain_dimensions=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--polygons=" * string(polygons))
    push!(args, "--output=" * string(output))
    if maintain_dimensions === true
        push!(args, "--maintain_dimensions")
    end
    return run_tool("clip_raster_to_polygon"; args, callback) # returns 1 if error
end
    

"""
    count_if(wbt_info::WhiteboxTools = wbt_info; inputs, output, value, callback::Union{Nothing,Function}=nothing)
Counts the number of occurrences of a specified value in a cell-stack of rasters.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `value`: Search value (e.g. countif value = 5.0). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function count_if(wbt_info::WhiteboxTools = wbt_info; inputs, output, value, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    push!(args, "--value=" * string(value))
    return run_tool("count_if"; args, callback) # returns 1 if error
end
    

"""
    difference(wbt_info::WhiteboxTools = wbt_info; i, overlay, output, callback::Union{Nothing,Function}=nothing)
Outputs the features that occur in one of the two vector inputs but not both, i.e. no overlapping features.
# Arguments
- `i`: Input vector file. 
- `overlay`: Input overlay vector file. 
- `output`: Output vector file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function difference(wbt_info::WhiteboxTools = wbt_info; i, overlay, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--overlay=" * string(overlay))
    push!(args, "--output=" * string(output))
    return run_tool("difference"; args, callback) # returns 1 if error
end
    

"""
    erase(wbt_info::WhiteboxTools = wbt_info; i, erase, output, callback::Union{Nothing,Function}=nothing)
Removes all the features, or parts of features, that overlap with the features of the erase vector polygon.
# Arguments
- `i`: Input vector file. 
- `erase`: Input erase polygon vector file. 
- `output`: Output vector file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function erase(wbt_info::WhiteboxTools = wbt_info; i, erase, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--erase=" * string(erase))
    push!(args, "--output=" * string(output))
    return run_tool("erase"; args, callback) # returns 1 if error
end
    

"""
    erase_polygon_from_raster(wbt_info::WhiteboxTools = wbt_info; i, polygons, output, callback::Union{Nothing,Function}=nothing)
Erases (cuts out) a vector polygon from a raster.
# Arguments
- `i`: Input raster file. 
- `polygons`: Input vector polygons file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function erase_polygon_from_raster(wbt_info::WhiteboxTools = wbt_info; i, polygons, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--polygons=" * string(polygons))
    push!(args, "--output=" * string(output))
    return run_tool("erase_polygon_from_raster"; args, callback) # returns 1 if error
end
    

"""
    highest_position(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
Identifies the stack position of the maximum value within a raster stack on a cell-by-cell basis.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function highest_position(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    return run_tool("highest_position"; args, callback) # returns 1 if error
end
    

"""
    intersect(wbt_info::WhiteboxTools = wbt_info; i, overlay, output, snap=0.0, callback::Union{Nothing,Function}=nothing)
Identifies the parts of features in common between two input vector layers.
# Arguments
- `i`: Input vector file. 
- `overlay`: Input overlay vector file. 
- `output`: Output vector file. 
- `snap`: Snap tolerance. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function intersect(wbt_info::WhiteboxTools = wbt_info; i, overlay, output, snap=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--overlay=" * string(overlay))
    push!(args, "--output=" * string(output))
    push!(args, "--snap=" * string(snap))
    return run_tool("intersect"; args, callback) # returns 1 if error
end
    

"""
    line_intersections(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Identifies points where the features of two vector line layers intersect.
# Arguments
- `input1`: Input vector polyline file. 
- `input2`: Input vector polyline file. 
- `output`: Output vector point file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function line_intersections(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("line_intersections"; args, callback) # returns 1 if error
end
    

"""
    lowest_position(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
Identifies the stack position of the minimum value within a raster stack on a cell-by-cell basis.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lowest_position(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    return run_tool("lowest_position"; args, callback) # returns 1 if error
end
    

"""
    max_absolute_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
Evaluates the maximum absolute value for each grid cell from a stack of input rasters.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function max_absolute_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    return run_tool("max_absolute_overlay"; args, callback) # returns 1 if error
end
    

"""
    max_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
Evaluates the maximum value for each grid cell from a stack of input rasters.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function max_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    return run_tool("max_overlay"; args, callback) # returns 1 if error
end
    

"""
    merge_line_segments(wbt_info::WhiteboxTools = wbt_info; i, output, snap=0.0, callback::Union{Nothing,Function}=nothing)
Merges vector line segments into larger features.
# Arguments
- `i`: Input vector file. 
- `output`: Output vector file. 
- `snap`: Snap tolerance. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function merge_line_segments(wbt_info::WhiteboxTools = wbt_info; i, output, snap=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--snap=" * string(snap))
    return run_tool("merge_line_segments"; args, callback) # returns 1 if error
end
    

"""
    min_absolute_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
Evaluates the minimum absolute value for each grid cell from a stack of input rasters.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function min_absolute_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    return run_tool("min_absolute_overlay"; args, callback) # returns 1 if error
end
    

"""
    min_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
Evaluates the minimum value for each grid cell from a stack of input rasters.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function min_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    return run_tool("min_overlay"; args, callback) # returns 1 if error
end
    

"""
    percent_equal_to(wbt_info::WhiteboxTools = wbt_info; inputs, comparison, output, callback::Union{Nothing,Function}=nothing)
Calculates the percentage of a raster stack that have cell values equal to an input on a cell-by-cell basis.
# Arguments
- `inputs`: Input raster files. 
- `comparison`: Input comparison raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function percent_equal_to(wbt_info::WhiteboxTools = wbt_info; inputs, comparison, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--comparison=" * string(comparison))
    push!(args, "--output=" * string(output))
    return run_tool("percent_equal_to"; args, callback) # returns 1 if error
end
    

"""
    percent_greater_than(wbt_info::WhiteboxTools = wbt_info; inputs, comparison, output, callback::Union{Nothing,Function}=nothing)
Calculates the percentage of a raster stack that have cell values greater than an input on a cell-by-cell basis.
# Arguments
- `inputs`: Input raster files. 
- `comparison`: Input comparison raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function percent_greater_than(wbt_info::WhiteboxTools = wbt_info; inputs, comparison, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--comparison=" * string(comparison))
    push!(args, "--output=" * string(output))
    return run_tool("percent_greater_than"; args, callback) # returns 1 if error
end
    

"""
    percent_less_than(wbt_info::WhiteboxTools = wbt_info; inputs, comparison, output, callback::Union{Nothing,Function}=nothing)
Calculates the percentage of a raster stack that have cell values less than an input on a cell-by-cell basis.
# Arguments
- `inputs`: Input raster files. 
- `comparison`: Input comparison raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function percent_less_than(wbt_info::WhiteboxTools = wbt_info; inputs, comparison, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--comparison=" * string(comparison))
    push!(args, "--output=" * string(output))
    return run_tool("percent_less_than"; args, callback) # returns 1 if error
end
    

"""
    pick_from_list(wbt_info::WhiteboxTools = wbt_info; inputs, pos_input, output, callback::Union{Nothing,Function}=nothing)
Outputs the value from a raster stack specified by a position raster.
# Arguments
- `inputs`: Input raster files. 
- `pos_input`: Input position raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function pick_from_list(wbt_info::WhiteboxTools = wbt_info; inputs, pos_input, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--pos_input=" * string(pos_input))
    push!(args, "--output=" * string(output))
    return run_tool("pick_from_list"; args, callback) # returns 1 if error
end
    

"""
    polygonize(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
Creates a polygon layer from two or more intersecting line features contained in one or more input vector line files.
# Arguments
- `inputs`: Input vector polyline file. 
- `output`: Output vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function polygonize(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    return run_tool("polygonize"; args, callback) # returns 1 if error
end
    

"""
    split_with_lines(wbt_info::WhiteboxTools = wbt_info; i, split, output, callback::Union{Nothing,Function}=nothing)
Splits the lines or polygons in one layer using the lines in another layer.
# Arguments
- `i`: Input vector line or polygon file. 
- `split`: Input vector polyline file. 
- `output`: Output vector file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function split_with_lines(wbt_info::WhiteboxTools = wbt_info; i, split, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--split=" * string(split))
    push!(args, "--output=" * string(output))
    return run_tool("split_with_lines"; args, callback) # returns 1 if error
end
    

"""
    sum_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
Calculates the sum for each grid cell from a group of raster images.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function sum_overlay(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    return run_tool("sum_overlay"; args, callback) # returns 1 if error
end
    

"""
    symmetrical_difference(wbt_info::WhiteboxTools = wbt_info; i, overlay, output, snap=0.0, callback::Union{Nothing,Function}=nothing)
Outputs the features that occur in one of the two vector inputs but not both, i.e. no overlapping features.
# Arguments
- `i`: Input vector file. 
- `overlay`: Input overlay vector file. 
- `output`: Output vector file. 
- `snap`: Snap tolerance. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function symmetrical_difference(wbt_info::WhiteboxTools = wbt_info; i, overlay, output, snap=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--overlay=" * string(overlay))
    push!(args, "--output=" * string(output))
    push!(args, "--snap=" * string(snap))
    return run_tool("symmetrical_difference"; args, callback) # returns 1 if error
end
    

"""
    union(wbt_info::WhiteboxTools = wbt_info; i, overlay, output, snap=0.0, callback::Union{Nothing,Function}=nothing)
Splits vector layers at their overlaps, creating a layer containing all the portions from both input and overlay layers.
# Arguments
- `i`: Input vector file. 
- `overlay`: Input overlay vector file. 
- `output`: Output vector file. 
- `snap`: Snap tolerance. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function union(wbt_info::WhiteboxTools = wbt_info; i, overlay, output, snap=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--overlay=" * string(overlay))
    push!(args, "--output=" * string(output))
    push!(args, "--snap=" * string(snap))
    return run_tool("union"; args, callback) # returns 1 if error
end
    

"""
    update_nodata_cells(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Replaces the NoData values in an input raster with the corresponding values contained in a second update layer.
# Arguments
- `input1`: Input raster file 1. 
- `input2`: Input raster file 2; update layer. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function update_nodata_cells(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("update_nodata_cells"; args, callback) # returns 1 if error
end
    

"""
    weighted_overlay(wbt_info::WhiteboxTools = wbt_info; factors, weights, output, cost=nothing, constraints=nothing, scale_max=1.0, callback::Union{Nothing,Function}=nothing)
Performs a weighted sum on multiple input rasters after converting each image to a common scale. The tool performs a multi-criteria evaluation (MCE).
# Arguments
- `factors`: Input factor raster files. 
- `weights`: Weight values, contained in quotes and separated by commas or semicolons. Must have the same number as factors. 
- `cost`: Weight values, contained in quotes and separated by commas or semicolons. Must have the same number as factors. 
- `constraints`: Input constraints raster files. 
- `output`: Output raster file. 
- `scale_max`: Suitability scale maximum value (common values are 1.0, 100.0, and 255.0). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function weighted_overlay(wbt_info::WhiteboxTools = wbt_info; factors, weights, output, cost=nothing, constraints=nothing, scale_max=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--factors=" * string(factors))
    push!(args, "--weights=" * string(weights))
    if isnothing(cost) === false
        push!(args, "--cost=" * string(cost))
    end
    if isnothing(constraints) === false
        push!(args, "--constraints=" * string(constraints))
    end
    push!(args, "--output=" * string(output))
    push!(args, "--scale_max=" * string(scale_max))
    return run_tool("weighted_overlay"; args, callback) # returns 1 if error
end
    

"""
    weighted_sum(wbt_info::WhiteboxTools = wbt_info; inputs, weights, output, callback::Union{Nothing,Function}=nothing)
Performs a weighted-sum overlay on multiple input raster images.
# Arguments
- `inputs`: Input raster files. 
- `weights`: Weight values, contained in quotes and separated by commas or semicolons. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function weighted_sum(wbt_info::WhiteboxTools = wbt_info; inputs, weights, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--weights=" * string(weights))
    push!(args, "--output=" * string(output))
    return run_tool("weighted_sum"; args, callback) # returns 1 if error
end
    

##################################
# GIS Analysis/Patch Shape Tools #
##################################

"""
    boundary_shape_complexity(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Calculates the complexity of the boundaries of raster polygons.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function boundary_shape_complexity(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("boundary_shape_complexity"; args, callback) # returns 1 if error
end
    

"""
    compactness_ratio(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Calculates the compactness ratio (A/P), a measure of shape complexity, for vector polygons.
# Arguments
- `i`: Input vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function compactness_ratio(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("compactness_ratio"; args, callback) # returns 1 if error
end
    

"""
    edge_proportion(wbt_info::WhiteboxTools = wbt_info; i, output, output_text=false, callback::Union{Nothing,Function}=nothing)
Calculate the proportion of cells in a raster polygon that are edge cells.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `output_text`: flag indicating whether a text report should also be output. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function edge_proportion(wbt_info::WhiteboxTools = wbt_info; i, output, output_text=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if output_text === true
        push!(args, "--output_text")
    end
    return run_tool("edge_proportion"; args, callback) # returns 1 if error
end
    

"""
    elongation_ratio(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Calculates the elongation ratio for vector polygons.
# Arguments
- `i`: Input vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function elongation_ratio(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("elongation_ratio"; args, callback) # returns 1 if error
end
    

"""
    find_patch_or_class_edge_cells(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Finds all cells located on the edge of patch or class features.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function find_patch_or_class_edge_cells(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("find_patch_or_class_edge_cells"; args, callback) # returns 1 if error
end
    

"""
    hole_proportion(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Calculates the proportion of the total area of a polygon's holes relative to the area of the polygon's hull.
# Arguments
- `i`: Input vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function hole_proportion(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("hole_proportion"; args, callback) # returns 1 if error
end
    

"""
    linearity_index(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Calculates the linearity index for vector polygons.
# Arguments
- `i`: Input vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function linearity_index(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("linearity_index"; args, callback) # returns 1 if error
end
    

"""
    narrowness_index(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Calculates the narrowness of raster polygons.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function narrowness_index(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("narrowness_index"; args, callback) # returns 1 if error
end
    

"""
    patch_orientation(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Calculates the orientation of vector polygons.
# Arguments
- `i`: Input vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function patch_orientation(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("patch_orientation"; args, callback) # returns 1 if error
end
    

"""
    perimeter_area_ratio(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Calculates the perimeter-area ratio of vector polygons.
# Arguments
- `i`: Input vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function perimeter_area_ratio(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("perimeter_area_ratio"; args, callback) # returns 1 if error
end
    

"""
    radius_of_gyration(wbt_info::WhiteboxTools = wbt_info; i, output, text_output=false, callback::Union{Nothing,Function}=nothing)
Calculates the distance of cells from their polygon's centroid.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `text_output`: Optional text output. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function radius_of_gyration(wbt_info::WhiteboxTools = wbt_info; i, output, text_output=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if text_output === true
        push!(args, "--text_output")
    end
    return run_tool("radius_of_gyration"; args, callback) # returns 1 if error
end
    

"""
    related_circumscribing_circle(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Calculates the related circumscribing circle of vector polygons.
# Arguments
- `i`: Input vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function related_circumscribing_circle(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("related_circumscribing_circle"; args, callback) # returns 1 if error
end
    

"""
    shape_complexity_index(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Calculates overall polygon shape complexity or irregularity.
# Arguments
- `i`: Input vector polygon file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function shape_complexity_index(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("shape_complexity_index"; args, callback) # returns 1 if error
end
    

"""
    shape_complexity_index_raster(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Calculates the complexity of raster polygons or classes.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function shape_complexity_index_raster(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("shape_complexity_index_raster"; args, callback) # returns 1 if error
end
    

############################
# Geomorphometric Analysis #
############################

"""
    aspect(wbt_info::WhiteboxTools = wbt_info; dem, output, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates an aspect raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function aspect(wbt_info::WhiteboxTools = wbt_info; dem, output, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("aspect"; args, callback) # returns 1 if error
end
    

"""
    average_normal_vector_angular_deviation(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, callback::Union{Nothing,Function}=nothing)
Calculates the circular variance of aspect at a scale for a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `filter`: Size of the filter kernel. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function average_normal_vector_angular_deviation(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--filter=" * string(filter))
    return run_tool("average_normal_vector_angular_deviation"; args, callback) # returns 1 if error
end
    

"""
    circular_variance_of_aspect(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, callback::Union{Nothing,Function}=nothing)
Calculates the circular variance of aspect at a scale for a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `filter`: Size of the filter kernel. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function circular_variance_of_aspect(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--filter=" * string(filter))
    return run_tool("circular_variance_of_aspect"; args, callback) # returns 1 if error
end
    

"""
    contours_from_points(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, use_z=false, max_triangle_edge_length=nothing, interval=10.0, base=0.0, smooth=5, callback::Union{Nothing,Function}=nothing)
Creates a contour coverage from a set of input points.
# Arguments
- `i`: Input vector points file. 
- `field`: Input field name in attribute table. 
- `use_z`: Use the 'z' dimension of the Shapefile's geometry instead of an attribute field?. 
- `output`: Output vector lines file. 
- `max_triangle_edge_length`: Optional maximum triangle edge length; triangles larger than this size will not be gridded. 
- `interval`: Contour interval. 
- `base`: Base contour height. 
- `smooth`: Smoothing filter size (in num. points), e.g. 3, 5, 7, 9, 11. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function contours_from_points(wbt_info::WhiteboxTools = wbt_info; i, output, field=nothing, use_z=false, max_triangle_edge_length=nothing, interval=10.0, base=0.0, smooth=5, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(field) === false
        push!(args, "--field=" * string(field))
    end
    if use_z === true
        push!(args, "--use_z")
    end
    push!(args, "--output=" * string(output))
    if isnothing(max_triangle_edge_length) === false
        push!(args, "--max_triangle_edge_length=" * string(max_triangle_edge_length))
    end
    push!(args, "--interval=" * string(interval))
    push!(args, "--base=" * string(base))
    push!(args, "--smooth=" * string(smooth))
    return run_tool("contours_from_points"; args, callback) # returns 1 if error
end
    

"""
    contours_from_raster(wbt_info::WhiteboxTools = wbt_info; i, output, interval=10.0, base=0.0, smooth=9, tolerance=10.0, callback::Union{Nothing,Function}=nothing)
Derives a vector contour coverage from a raster surface.
# Arguments
- `i`: Input surface raster file. 
- `output`: Output vector contour file. 
- `interval`: Contour interval. 
- `base`: Base contour height. 
- `smooth`: Smoothing filter size (in num. points), e.g. 3, 5, 7, 9, 11. 
- `tolerance`: Tolerance factor, in degrees (0-45); determines generalization level. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function contours_from_raster(wbt_info::WhiteboxTools = wbt_info; i, output, interval=10.0, base=0.0, smooth=9, tolerance=10.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--interval=" * string(interval))
    push!(args, "--base=" * string(base))
    push!(args, "--smooth=" * string(smooth))
    push!(args, "--tolerance=" * string(tolerance))
    return run_tool("contours_from_raster"; args, callback) # returns 1 if error
end
    

"""
    dev_from_mean_elev(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Calculates deviation from mean elevation.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function dev_from_mean_elev(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("dev_from_mean_elev"; args, callback) # returns 1 if error
end
    

"""
    diff_from_mean_elev(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Calculates difference from mean elevation (equivalent to a high-pass filter).
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function diff_from_mean_elev(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("diff_from_mean_elev"; args, callback) # returns 1 if error
end
    

"""
    directional_relief(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=0.0, max_dist=nothing, callback::Union{Nothing,Function}=nothing)
Calculates relief for cells in an input DEM for a specified direction.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `azimuth`: Wind azimuth in degrees. 
- `max_dist`: Optional maximum search distance (unspecified if none; in xy units). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function directional_relief(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=0.0, max_dist=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--azimuth=" * string(azimuth))
    if isnothing(max_dist) === false
        push!(args, "--max_dist=" * string(max_dist))
    end
    return run_tool("directional_relief"; args, callback) # returns 1 if error
end
    

"""
    downslope_index(wbt_info::WhiteboxTools = wbt_info; dem, output, drop=2.0, out_type="tangent", callback::Union{Nothing,Function}=nothing)
Calculates the Hjerdt et al. (2004) downslope index.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `drop`: Vertical drop value (default is 2.0). 
- `out_type`: Output type, options include 'tangent', 'degrees', 'radians', 'distance' (default is 'tangent'). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function downslope_index(wbt_info::WhiteboxTools = wbt_info; dem, output, drop=2.0, out_type="tangent", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--drop=" * string(drop))
    push!(args, "--out_type=" * string(out_type))
    return run_tool("downslope_index"; args, callback) # returns 1 if error
end
    

"""
    edge_density(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, norm_diff=5.0, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates the density of edges, or breaks-in-slope within DEMs.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `filter`: Size of the filter kernel. 
- `norm_diff`: Maximum difference in normal vectors, in degrees. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function edge_density(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, norm_diff=5.0, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--filter=" * string(filter))
    push!(args, "--norm_diff=" * string(norm_diff))
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("edge_density"; args, callback) # returns 1 if error
end
    

"""
    elev_above_pit(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Calculate the elevation of each grid cell above the nearest downstream pit cell or grid edge cell.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function elev_above_pit(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("elev_above_pit"; args, callback) # returns 1 if error
end
    

"""
    elev_percentile(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=11, filtery=11, sig_digits=2, callback::Union{Nothing,Function}=nothing)
Calculates the elevation percentile raster from a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `sig_digits`: Number of significant digits. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function elev_percentile(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=11, filtery=11, sig_digits=2, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    push!(args, "--sig_digits=" * string(sig_digits))
    return run_tool("elev_percentile"; args, callback) # returns 1 if error
end
    

"""
    elev_relative_to_min_max(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Calculates the elevation of a location relative to the minimum and maximum elevations in a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function elev_relative_to_min_max(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("elev_relative_to_min_max"; args, callback) # returns 1 if error
end
    

"""
    elev_relative_to_watershed_min_max(wbt_info::WhiteboxTools = wbt_info; dem, watersheds, output, callback::Union{Nothing,Function}=nothing)
Calculates the elevation of a location relative to the minimum and maximum elevations in a watershed.
# Arguments
- `dem`: Input raster DEM file. 
- `watersheds`: Input raster watersheds file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function elev_relative_to_watershed_min_max(wbt_info::WhiteboxTools = wbt_info; dem, watersheds, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--watersheds=" * string(watersheds))
    push!(args, "--output=" * string(output))
    return run_tool("elev_relative_to_watershed_min_max"; args, callback) # returns 1 if error
end
    

"""
    embankment_mapping(wbt_info::WhiteboxTools = wbt_info; dem, road_vec, output, search_dist=2.5, min_road_width=6.0, typical_width=30.0, max_height=2.0, max_width=60.0, max_increment=0.05, spillout_slope=4.0, remove_embankments=false, callback::Union{Nothing,Function}=nothing)
Maps and/or removes road embankments from an input fine-resolution DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `road_vec`: Input vector polygons file. 
- `output`: Output raster file. 
- `search_dist`: Search distance used to reposition transportation vectors onto road embankments (in map units). 
- `min_road_width`: Minimum road width; this is the width of the paved road surface (in map units). 
- `typical_width`: Typical embankment width; this is the maximum width of an embankment with roadside ditches (in map units). 
- `max_height`: Typical embankment maximum height; this is the height a typical embankment with roadside ditches (in map units). 
- `max_width`: Maximum embankment width, typically where embankments traverse steep-sided valleys (in map units). 
- `max_increment`: Maximum upwards increment between neighbouring cells on an embankment (in elevation units). 
- `spillout_slope`: Spillout slope (in degrees). 
- `remove_embankments`: Optional flag indicating whether to output a DEM with embankments removed (true) or an embankment raster map (false). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function embankment_mapping(wbt_info::WhiteboxTools = wbt_info; dem, road_vec, output, search_dist=2.5, min_road_width=6.0, typical_width=30.0, max_height=2.0, max_width=60.0, max_increment=0.05, spillout_slope=4.0, remove_embankments=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--road_vec=" * string(road_vec))
    push!(args, "--output=" * string(output))
    push!(args, "--search_dist=" * string(search_dist))
    push!(args, "--min_road_width=" * string(min_road_width))
    push!(args, "--typical_width=" * string(typical_width))
    push!(args, "--max_height=" * string(max_height))
    push!(args, "--max_width=" * string(max_width))
    push!(args, "--max_increment=" * string(max_increment))
    push!(args, "--spillout_slope=" * string(spillout_slope))
    if remove_embankments === true
        push!(args, "--remove_embankments")
    end
    return run_tool("embankment_mapping"; args, callback) # returns 1 if error
end
    

"""
    exposure_towards_wind_flux(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth="", max_dist="", zfactor="", callback::Union{Nothing,Function}=nothing)
This tool evaluates hydrologic connectivity within a DEM.
# Arguments
- `dem`: Name of the input DEM raster file. 
- `output`: Name of the output raster file. 
- `azimuth`: Wind azimuth, in degrees. 
- `max_dist`: Optional maximum search distance. Minimum value is 5 x cell size. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function exposure_towards_wind_flux(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth="", max_dist="", zfactor="", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--azimuth=" * string(azimuth))
    push!(args, "--max_dist=" * string(max_dist))
    push!(args, "--zfactor=" * string(zfactor))
    return run_tool("exposure_towards_wind_flux"; args, callback) # returns 1 if error
end
    

"""
    feature_preserving_smoothing(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, norm_diff=15.0, num_iter=3, max_diff=0.5, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Reduces short-scale variation in an input DEM using a modified Sun et al. (2007) algorithm.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `filter`: Size of the filter kernel. 
- `norm_diff`: Maximum difference in normal vectors, in degrees. 
- `num_iter`: Number of iterations. 
- `max_diff`: Maximum allowable absolute elevation change (optional). 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function feature_preserving_smoothing(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, norm_diff=15.0, num_iter=3, max_diff=0.5, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--filter=" * string(filter))
    push!(args, "--norm_diff=" * string(norm_diff))
    push!(args, "--num_iter=" * string(num_iter))
    push!(args, "--max_diff=" * string(max_diff))
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("feature_preserving_smoothing"; args, callback) # returns 1 if error
end
    

"""
    fetch_analysis(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=0.0, hgt_inc=0.05, callback::Union{Nothing,Function}=nothing)
Performs an analysis of fetch or upwind distance to an obstacle.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `azimuth`: Wind azimuth in degrees in degrees. 
- `hgt_inc`: Height increment value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function fetch_analysis(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=0.0, hgt_inc=0.05, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--azimuth=" * string(azimuth))
    push!(args, "--hgt_inc=" * string(hgt_inc))
    return run_tool("fetch_analysis"; args, callback) # returns 1 if error
end
    

"""
    fill_missing_data(wbt_info::WhiteboxTools = wbt_info; i, output, filter=11, weight=2.0, no_edges=true, callback::Union{Nothing,Function}=nothing)
Fills NoData holes in a DEM.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filter`: Filter size (cells). 
- `weight`: IDW weight value. 
- `no_edges`: Optional flag indicating whether to exclude NoData cells in edge regions. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function fill_missing_data(wbt_info::WhiteboxTools = wbt_info; i, output, filter=11, weight=2.0, no_edges=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filter=" * string(filter))
    push!(args, "--weight=" * string(weight))
    if no_edges === true
        push!(args, "--no_edges")
    end
    return run_tool("fill_missing_data"; args, callback) # returns 1 if error
end
    

"""
    find_ridges(wbt_info::WhiteboxTools = wbt_info; dem, output, line_thin=true, callback::Union{Nothing,Function}=nothing)
Identifies potential ridge and peak grid cells.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `line_thin`: Optional flag indicating whether post-processing line-thinning should be performed. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function find_ridges(wbt_info::WhiteboxTools = wbt_info; dem, output, line_thin=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if line_thin === true
        push!(args, "--line_thin")
    end
    return run_tool("find_ridges"; args, callback) # returns 1 if error
end
    

"""
    gaussian_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates a mean curvature raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `log`: Display output values using a log-scale. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function gaussian_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if log === true
        push!(args, "--log")
    end
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("gaussian_curvature"; args, callback) # returns 1 if error
end
    

"""
    gaussian_scale_space(wbt_info::WhiteboxTools = wbt_info; dem, output, output_zscore, output_scale, points=nothing, sigma=0.5, step=0.5, num_steps=10, lsp="Slope", z_factor=nothing, callback::Union{Nothing,Function}=nothing)
This tool uses the fast Gaussian approximation algorithm to produce scaled land-surface parameter measurements from an input DEM.
# Arguments
- `dem`: Name of the input DEM raster file. 
- `points`: Name of the input vector points shapefile. 
- `output`: Name of the output land-surface parameter raster file. 
- `output_zscore`: Name of the output z-score raster file. 
- `output_scale`: Name of the output scale raster file. 
- `sigma`: Initial sigma value (cells). 
- `step`: Step size as any positive non-zero integer. 
- `num_steps`: Number of steps. 
- `lsp`: Output land-surface parameter; one of 'AnisotropyLTP', 'Aspect', 'DiffMeanElev', 'Eastness', 'Elevation', 'Hillshade', 'MeanCurvature', 'Northness', 'PlanCurvature', 'ProfileCurvature', 'Ruggedness', 'Slope', 'TanCurvature', 'TotalCurvature'. 
- `z_factor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function gaussian_scale_space(wbt_info::WhiteboxTools = wbt_info; dem, output, output_zscore, output_scale, points=nothing, sigma=0.5, step=0.5, num_steps=10, lsp="Slope", z_factor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    if isnothing(points) === false
        push!(args, "--points=" * string(points))
    end
    push!(args, "--output=" * string(output))
    push!(args, "--output_zscore=" * string(output_zscore))
    push!(args, "--output_scale=" * string(output_scale))
    push!(args, "--sigma=" * string(sigma))
    push!(args, "--step=" * string(step))
    push!(args, "--num_steps=" * string(num_steps))
    push!(args, "--lsp=" * string(lsp))
    if isnothing(z_factor) === false
        push!(args, "--z_factor=" * string(z_factor))
    end
    return run_tool("gaussian_scale_space"; args, callback) # returns 1 if error
end
    

"""
    geomorphons(wbt_info::WhiteboxTools = wbt_info; dem, output, search=50, threshold=0.0, tdist=0, forms=true, callback::Union{Nothing,Function}=nothing)
Computes geomorphon patterns.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `search`: Look up distance. 
- `threshold`: Flatness threshold for the classification function (in degrees). 
- `tdist`: Distance (in cells) to begin reducing the flatness threshold to avoid problems with pseudo-flat lines-of-sight. 
- `forms`: Classify geomorphons into 10 common land morphologies, else, output ternary code. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function geomorphons(wbt_info::WhiteboxTools = wbt_info; dem, output, search=50, threshold=0.0, tdist=0, forms=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--search=" * string(search))
    push!(args, "--threshold=" * string(threshold))
    push!(args, "--tdist=" * string(tdist))
    if forms === true
        push!(args, "--forms")
    end
    return run_tool("geomorphons"; args, callback) # returns 1 if error
end
    

"""
    hillshade(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=315.0, altitude=30.0, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates a hillshade raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `azimuth`: Illumination source azimuth in degrees. 
- `altitude`: Illumination source altitude in degrees. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function hillshade(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=315.0, altitude=30.0, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--azimuth=" * string(azimuth))
    push!(args, "--altitude=" * string(altitude))
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("hillshade"; args, callback) # returns 1 if error
end
    

"""
    horizon_angle(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=0.0, max_dist=100.0, callback::Union{Nothing,Function}=nothing)
Calculates horizon angle (maximum upwind slope) for each grid cell in an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `azimuth`: Azimuth, in degrees. 
- `max_dist`: Optional maximum search distance (unspecified if none; in xy units). Minimum value is 5 x cell size. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function horizon_angle(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=0.0, max_dist=100.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--azimuth=" * string(azimuth))
    push!(args, "--max_dist=" * string(max_dist))
    return run_tool("horizon_angle"; args, callback) # returns 1 if error
end
    

"""
    hypsometric_analysis(wbt_info::WhiteboxTools = wbt_info; inputs, output, watershed=nothing, callback::Union{Nothing,Function}=nothing)
Calculates a hypsometric curve for one or more DEMs.
# Arguments
- `inputs`: Input DEM files. 
- `watershed`: Input watershed files (optional). 
- `output`: Output HTML file (default name will be based on input file if unspecified). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function hypsometric_analysis(wbt_info::WhiteboxTools = wbt_info; inputs, output, watershed=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    if isnothing(watershed) === false
        push!(args, "--watershed=" * string(watershed))
    end
    push!(args, "--output=" * string(output))
    return run_tool("hypsometric_analysis"; args, callback) # returns 1 if error
end
    

"""
    hypsometrically_tinted_hillshade(wbt_info::WhiteboxTools = wbt_info; dem, output, altitude=45.0, hs_weight=0.5, brightness=0.5, atmospheric=0.0, palette="atlas", reverse=false, zfactor=nothing, full_mode=false, callback::Union{Nothing,Function}=nothing)
Creates an colour shaded relief image from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `altitude`: Illumination source altitude in degrees. 
- `hs_weight`: Weight given to hillshade relative to relief (0.0-1.0). 
- `brightness`: Brightness factor (0.0-1.0). 
- `atmospheric`: Atmospheric effects weight (0.0-1.0). 
- `palette`: Options include 'atlas', 'high_relief', 'arid', 'soft', 'muted', 'purple', 'viridi', 'gn_yl', 'pi_y_g', 'bl_yl_rd', and 'deep'. 
- `reverse`: Optional flag indicating whether to use reverse the palette. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `full_mode`: Optional flag indicating whether to use full 360-degrees of illumination sources. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function hypsometrically_tinted_hillshade(wbt_info::WhiteboxTools = wbt_info; dem, output, altitude=45.0, hs_weight=0.5, brightness=0.5, atmospheric=0.0, palette="atlas", reverse=false, zfactor=nothing, full_mode=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--altitude=" * string(altitude))
    push!(args, "--hs_weight=" * string(hs_weight))
    push!(args, "--brightness=" * string(brightness))
    push!(args, "--atmospheric=" * string(atmospheric))
    push!(args, "--palette=" * string(palette))
    if reverse === true
        push!(args, "--reverse")
    end
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    if full_mode === true
        push!(args, "--full_mode")
    end
    return run_tool("hypsometrically_tinted_hillshade"; args, callback) # returns 1 if error
end
    

"""
    local_quadratic_regression(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=3, callback::Union{Nothing,Function}=nothing)
This tool is an implementation of the constrained quadratic regression algorithm using a flexible window size described in Wood (1996).
# Arguments
- `dem`: Name of the input DEM raster file. 
- `output`: Name of the output raster file. 
- `filter`: Edge length of the filter kernel. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function local_quadratic_regression(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=3, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--filter=" * string(filter))
    return run_tool("local_quadratic_regression"; args, callback) # returns 1 if error
end
    

"""
    map_off_terrain_objects(wbt_info::WhiteboxTools = wbt_info; dem, output, max_slope=40.0, min_size=1, callback::Union{Nothing,Function}=nothing)
Maps off-terrain objects in a digital elevation model (DEM).
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `max_slope`: Maximum inter-cell absolute slope. 
- `min_size`: Minimum feature size, in grid cells. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function map_off_terrain_objects(wbt_info::WhiteboxTools = wbt_info; dem, output, max_slope=40.0, min_size=1, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--max_slope=" * string(max_slope))
    push!(args, "--min_size=" * string(min_size))
    return run_tool("map_off_terrain_objects"; args, callback) # returns 1 if error
end
    

"""
    max_anisotropy_dev(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, max_scale, min_scale=3, step=2, callback::Union{Nothing,Function}=nothing)
Calculates the maximum anisotropy (directionality) in elevation deviation over a range of spatial scales.
# Arguments
- `dem`: Input raster DEM file. 
- `out_mag`: Output raster DEVmax magnitude file. 
- `out_scale`: Output raster DEVmax scale file. 
- `min_scale`: Minimum search neighbourhood radius in grid cells. 
- `max_scale`: Maximum search neighbourhood radius in grid cells. 
- `step`: Step size as any positive non-zero integer. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function max_anisotropy_dev(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, max_scale, min_scale=3, step=2, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--out_mag=" * string(out_mag))
    push!(args, "--out_scale=" * string(out_scale))
    push!(args, "--min_scale=" * string(min_scale))
    push!(args, "--max_scale=" * string(max_scale))
    push!(args, "--step=" * string(step))
    return run_tool("max_anisotropy_dev"; args, callback) # returns 1 if error
end
    

"""
    max_anisotropy_dev_signature(wbt_info::WhiteboxTools = wbt_info; dem, points, output, max_scale, min_scale=1, step=1, callback::Union{Nothing,Function}=nothing)
Calculates the anisotropy in deviation from mean for points over a range of spatial scales.
# Arguments
- `dem`: Input raster DEM file. 
- `points`: Input vector points file. 
- `output`: Output HTML file. 
- `min_scale`: Minimum search neighbourhood radius in grid cells. 
- `max_scale`: Maximum search neighbourhood radius in grid cells. 
- `step`: Step size as any positive non-zero integer. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function max_anisotropy_dev_signature(wbt_info::WhiteboxTools = wbt_info; dem, points, output, max_scale, min_scale=1, step=1, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--points=" * string(points))
    push!(args, "--output=" * string(output))
    push!(args, "--min_scale=" * string(min_scale))
    push!(args, "--max_scale=" * string(max_scale))
    push!(args, "--step=" * string(step))
    return run_tool("max_anisotropy_dev_signature"; args, callback) # returns 1 if error
end
    

"""
    max_branch_length(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, callback::Union{Nothing,Function}=nothing)
Lindsay and Seibert's (2013) branch length index is used to map drainage divides or ridge lines.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `log`: Optional flag to request the output be log-transformed. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function max_branch_length(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if log === true
        push!(args, "--log")
    end
    return run_tool("max_branch_length"; args, callback) # returns 1 if error
end
    

"""
    max_difference_from_mean(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, min_scale, max_scale, step=1, callback::Union{Nothing,Function}=nothing)
Calculates the maximum difference from mean elevation over a range of spatial scales.
# Arguments
- `dem`: Input raster DEM file. 
- `out_mag`: Output raster DIFFmax magnitude file. 
- `out_scale`: Output raster DIFFmax scale file. 
- `min_scale`: Minimum search neighbourhood radius in grid cells. 
- `max_scale`: Maximum search neighbourhood radius in grid cells. 
- `step`: Step size as any positive non-zero integer. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function max_difference_from_mean(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, min_scale, max_scale, step=1, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--out_mag=" * string(out_mag))
    push!(args, "--out_scale=" * string(out_scale))
    push!(args, "--min_scale=" * string(min_scale))
    push!(args, "--max_scale=" * string(max_scale))
    push!(args, "--step=" * string(step))
    return run_tool("max_difference_from_mean"; args, callback) # returns 1 if error
end
    

"""
    max_downslope_elev_change(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Calculates the maximum downslope change in elevation between a grid cell and its eight downslope neighbors.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function max_downslope_elev_change(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("max_downslope_elev_change"; args, callback) # returns 1 if error
end
    

"""
    max_elev_dev_signature(wbt_info::WhiteboxTools = wbt_info; dem, points, output, min_scale, max_scale, step=10, callback::Union{Nothing,Function}=nothing)
Calculates the maximum elevation deviation over a range of spatial scales and for a set of points.
# Arguments
- `dem`: Input raster DEM file. 
- `points`: Input vector points file. 
- `output`: Output HTML file. 
- `min_scale`: Minimum search neighbourhood radius in grid cells. 
- `max_scale`: Maximum search neighbourhood radius in grid cells. 
- `step`: Step size as any positive non-zero integer. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function max_elev_dev_signature(wbt_info::WhiteboxTools = wbt_info; dem, points, output, min_scale, max_scale, step=10, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--points=" * string(points))
    push!(args, "--output=" * string(output))
    push!(args, "--min_scale=" * string(min_scale))
    push!(args, "--max_scale=" * string(max_scale))
    push!(args, "--step=" * string(step))
    return run_tool("max_elev_dev_signature"; args, callback) # returns 1 if error
end
    

"""
    max_elevation_deviation(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, min_scale, max_scale, step=1, callback::Union{Nothing,Function}=nothing)
Calculates the maximum elevation deviation over a range of spatial scales.
# Arguments
- `dem`: Input raster DEM file. 
- `out_mag`: Output raster DEVmax magnitude file. 
- `out_scale`: Output raster DEVmax scale file. 
- `min_scale`: Minimum search neighbourhood radius in grid cells. 
- `max_scale`: Maximum search neighbourhood radius in grid cells. 
- `step`: Step size as any positive non-zero integer. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function max_elevation_deviation(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, min_scale, max_scale, step=1, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--out_mag=" * string(out_mag))
    push!(args, "--out_scale=" * string(out_scale))
    push!(args, "--min_scale=" * string(min_scale))
    push!(args, "--max_scale=" * string(max_scale))
    push!(args, "--step=" * string(step))
    return run_tool("max_elevation_deviation"; args, callback) # returns 1 if error
end
    

"""
    max_upslope_elev_change(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Calculates the maximum upslope change in elevation between a grid cell and its eight downslope neighbors.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function max_upslope_elev_change(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("max_upslope_elev_change"; args, callback) # returns 1 if error
end
    

"""
    maximal_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates a mean curvature raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `log`: Display output values using a log-scale. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function maximal_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if log === true
        push!(args, "--log")
    end
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("maximal_curvature"; args, callback) # returns 1 if error
end
    

"""
    mean_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates a mean curvature raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `log`: Display output values using a log-scale. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function mean_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if log === true
        push!(args, "--log")
    end
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("mean_curvature"; args, callback) # returns 1 if error
end
    

"""
    min_downslope_elev_change(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Calculates the minimum downslope change in elevation between a grid cell and its eight downslope neighbors.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function min_downslope_elev_change(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("min_downslope_elev_change"; args, callback) # returns 1 if error
end
    

"""
    minimal_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates a mean curvature raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `log`: Display output values using a log-scale. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function minimal_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if log === true
        push!(args, "--log")
    end
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("minimal_curvature"; args, callback) # returns 1 if error
end
    

"""
    multidirectional_hillshade(wbt_info::WhiteboxTools = wbt_info; dem, output, altitude=45.0, zfactor=nothing, full_mode=false, callback::Union{Nothing,Function}=nothing)
Calculates a multi-direction hillshade raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `altitude`: Illumination source altitude in degrees. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `full_mode`: Optional flag indicating whether to use full 360-degrees of illumination sources. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function multidirectional_hillshade(wbt_info::WhiteboxTools = wbt_info; dem, output, altitude=45.0, zfactor=nothing, full_mode=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--altitude=" * string(altitude))
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    if full_mode === true
        push!(args, "--full_mode")
    end
    return run_tool("multidirectional_hillshade"; args, callback) # returns 1 if error
end
    

"""
    multiscale_elevation_percentile(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, sig_digits=3, min_scale=4, step=1, num_steps=10, step_nonlinearity=1.0, callback::Union{Nothing,Function}=nothing)
Calculates surface roughness over a range of spatial scales.
# Arguments
- `dem`: Input raster DEM file. 
- `out_mag`: Output raster roughness magnitude file. 
- `out_scale`: Output raster roughness scale file. 
- `sig_digits`: Number of significant digits. 
- `min_scale`: Minimum search neighbourhood radius in grid cells. 
- `step`: Step size as any positive non-zero integer. 
- `num_steps`: Number of steps. 
- `step_nonlinearity`: Step nonlinearity factor (1.0-2.0 is typical). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function multiscale_elevation_percentile(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, sig_digits=3, min_scale=4, step=1, num_steps=10, step_nonlinearity=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--out_mag=" * string(out_mag))
    push!(args, "--out_scale=" * string(out_scale))
    push!(args, "--sig_digits=" * string(sig_digits))
    push!(args, "--min_scale=" * string(min_scale))
    push!(args, "--step=" * string(step))
    push!(args, "--num_steps=" * string(num_steps))
    push!(args, "--step_nonlinearity=" * string(step_nonlinearity))
    return run_tool("multiscale_elevation_percentile"; args, callback) # returns 1 if error
end
    

"""
    multiscale_roughness(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, max_scale, min_scale=1, step=1, callback::Union{Nothing,Function}=nothing)
Calculates surface roughness over a range of spatial scales.
# Arguments
- `dem`: Input raster DEM file. 
- `out_mag`: Output raster roughness magnitude file. 
- `out_scale`: Output raster roughness scale file. 
- `min_scale`: Minimum search neighbourhood radius in grid cells. 
- `max_scale`: Maximum search neighbourhood radius in grid cells. 
- `step`: Step size as any positive non-zero integer. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function multiscale_roughness(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, max_scale, min_scale=1, step=1, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--out_mag=" * string(out_mag))
    push!(args, "--out_scale=" * string(out_scale))
    push!(args, "--min_scale=" * string(min_scale))
    push!(args, "--max_scale=" * string(max_scale))
    push!(args, "--step=" * string(step))
    return run_tool("multiscale_roughness"; args, callback) # returns 1 if error
end
    

"""
    multiscale_roughness_signature(wbt_info::WhiteboxTools = wbt_info; dem, points, output, max_scale, min_scale=1, step=1, callback::Union{Nothing,Function}=nothing)
Calculates the surface roughness for points over a range of spatial scales.
# Arguments
- `dem`: Input raster DEM file. 
- `points`: Input vector points file. 
- `output`: Output HTML file. 
- `min_scale`: Minimum search neighbourhood radius in grid cells. 
- `max_scale`: Maximum search neighbourhood radius in grid cells. 
- `step`: Step size as any positive non-zero integer. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function multiscale_roughness_signature(wbt_info::WhiteboxTools = wbt_info; dem, points, output, max_scale, min_scale=1, step=1, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--points=" * string(points))
    push!(args, "--output=" * string(output))
    push!(args, "--min_scale=" * string(min_scale))
    push!(args, "--max_scale=" * string(max_scale))
    push!(args, "--step=" * string(step))
    return run_tool("multiscale_roughness_signature"; args, callback) # returns 1 if error
end
    

"""
    multiscale_std_dev_normals(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, min_scale=1, step=1, num_steps=10, step_nonlinearity=1.0, callback::Union{Nothing,Function}=nothing)
Calculates surface roughness over a range of spatial scales.
# Arguments
- `dem`: Input raster DEM file. 
- `out_mag`: Output raster roughness magnitude file. 
- `out_scale`: Output raster roughness scale file. 
- `min_scale`: Minimum search neighbourhood radius in grid cells. 
- `step`: Step size as any positive non-zero integer. 
- `num_steps`: Number of steps. 
- `step_nonlinearity`: Step nonlinearity factor (1.0-2.0 is typical). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function multiscale_std_dev_normals(wbt_info::WhiteboxTools = wbt_info; dem, out_mag, out_scale, min_scale=1, step=1, num_steps=10, step_nonlinearity=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--out_mag=" * string(out_mag))
    push!(args, "--out_scale=" * string(out_scale))
    push!(args, "--min_scale=" * string(min_scale))
    push!(args, "--step=" * string(step))
    push!(args, "--num_steps=" * string(num_steps))
    push!(args, "--step_nonlinearity=" * string(step_nonlinearity))
    return run_tool("multiscale_std_dev_normals"; args, callback) # returns 1 if error
end
    

"""
    multiscale_std_dev_normals_signature(wbt_info::WhiteboxTools = wbt_info; dem, points, output, min_scale=1, step=1, num_steps=10, step_nonlinearity=1.0, callback::Union{Nothing,Function}=nothing)
Calculates the surface roughness for points over a range of spatial scales.
# Arguments
- `dem`: Input raster DEM file. 
- `points`: Input vector points file. 
- `output`: Output HTML file. 
- `min_scale`: Minimum search neighbourhood radius in grid cells. 
- `step`: Step size as any positive non-zero integer. 
- `num_steps`: Number of steps. 
- `step_nonlinearity`: Step nonlinearity factor (1.0-2.0 is typical). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function multiscale_std_dev_normals_signature(wbt_info::WhiteboxTools = wbt_info; dem, points, output, min_scale=1, step=1, num_steps=10, step_nonlinearity=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--points=" * string(points))
    push!(args, "--output=" * string(output))
    push!(args, "--min_scale=" * string(min_scale))
    push!(args, "--step=" * string(step))
    push!(args, "--num_steps=" * string(num_steps))
    push!(args, "--step_nonlinearity=" * string(step_nonlinearity))
    return run_tool("multiscale_std_dev_normals_signature"; args, callback) # returns 1 if error
end
    

"""
    multiscale_topographic_position_image(wbt_info::WhiteboxTools = wbt_info; localrast, meso, broad, output, lightness=1.2, callback::Union{Nothing,Function}=nothing)
Creates a multiscale topographic position image from three DEVmax rasters of differing spatial scale ranges.
# Arguments
- `localrast`: Input local-scale topographic position (DEVmax) raster file. 
- `meso`: Input meso-scale topographic position (DEVmax) raster file. 
- `broad`: Input broad-scale topographic position (DEVmax) raster file. 
- `output`: Output raster file. 
- `lightness`: Image lightness value (default is 1.2). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function multiscale_topographic_position_image(wbt_info::WhiteboxTools = wbt_info; localrast, meso, broad, output, lightness=1.2, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--local=" * string(localrast))
    push!(args, "--meso=" * string(meso))
    push!(args, "--broad=" * string(broad))
    push!(args, "--output=" * string(output))
    push!(args, "--lightness=" * string(lightness))
    return run_tool("multiscale_topographic_position_image"; args, callback) # returns 1 if error
end
    

"""
    num_downslope_neighbours(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Calculates the number of downslope neighbours to each grid cell in a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function num_downslope_neighbours(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("num_downslope_neighbours"; args, callback) # returns 1 if error
end
    

"""
    num_upslope_neighbours(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Calculates the number of upslope neighbours to each grid cell in a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function num_upslope_neighbours(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("num_upslope_neighbours"; args, callback) # returns 1 if error
end
    

"""
    pennock_landform_class(wbt_info::WhiteboxTools = wbt_info; dem, output, slope=3.0, prof=0.1, plan=0.0, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Classifies hillslope zones based on slope, profile curvature, and plan curvature.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `slope`: Slope threshold value, in degrees (default is 3.0). 
- `prof`: Profile curvature threshold value (default is 0.1). 
- `plan`: Plan curvature threshold value (default is 0.0). 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function pennock_landform_class(wbt_info::WhiteboxTools = wbt_info; dem, output, slope=3.0, prof=0.1, plan=0.0, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--slope=" * string(slope))
    push!(args, "--prof=" * string(prof))
    push!(args, "--plan=" * string(plan))
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("pennock_landform_class"; args, callback) # returns 1 if error
end
    

"""
    percent_elev_range(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=3, filtery=3, callback::Union{Nothing,Function}=nothing)
Calculates percent of elevation range from a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function percent_elev_range(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=3, filtery=3, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("percent_elev_range"; args, callback) # returns 1 if error
end
    

"""
    plan_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates a plan (contour) curvature raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `log`: Display output values using a log-scale. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function plan_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if log === true
        push!(args, "--log")
    end
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("plan_curvature"; args, callback) # returns 1 if error
end
    

"""
    profile(wbt_info::WhiteboxTools = wbt_info; lines, surface, output, callback::Union{Nothing,Function}=nothing)
Plots profiles from digital surface models.
# Arguments
- `lines`: Input vector line file. 
- `surface`: Input raster surface file. 
- `output`: Output HTML file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function profile(wbt_info::WhiteboxTools = wbt_info; lines, surface, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--lines=" * string(lines))
    push!(args, "--surface=" * string(surface))
    push!(args, "--output=" * string(output))
    return run_tool("profile"; args, callback) # returns 1 if error
end
    

"""
    profile_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates a profile curvature raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `log`: Display output values using a log-scale. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function profile_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if log === true
        push!(args, "--log")
    end
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("profile_curvature"; args, callback) # returns 1 if error
end
    

"""
    relative_aspect(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=0.0, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates relative aspect (relative to a user-specified direction) from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `azimuth`: Illumination source azimuth. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function relative_aspect(wbt_info::WhiteboxTools = wbt_info; dem, output, azimuth=0.0, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--azimuth=" * string(azimuth))
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("relative_aspect"; args, callback) # returns 1 if error
end
    

"""
    relative_topographic_position(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Calculates the relative topographic position index from a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function relative_topographic_position(wbt_info::WhiteboxTools = wbt_info; dem, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("relative_topographic_position"; args, callback) # returns 1 if error
end
    

"""
    remove_off_terrain_objects(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, slope=15.0, callback::Union{Nothing,Function}=nothing)
Removes off-terrain objects from a raster digital elevation model (DEM).
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `filter`: Filter size (cells). 
- `slope`: Slope threshold value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function remove_off_terrain_objects(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, slope=15.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--filter=" * string(filter))
    push!(args, "--slope=" * string(slope))
    return run_tool("remove_off_terrain_objects"; args, callback) # returns 1 if error
end
    

"""
    ruggedness_index(wbt_info::WhiteboxTools = wbt_info; dem, output, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates the Riley et al.'s (1999) terrain ruggedness index from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function ruggedness_index(wbt_info::WhiteboxTools = wbt_info; dem, output, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("ruggedness_index"; args, callback) # returns 1 if error
end
    

"""
    sediment_transport_index(wbt_info::WhiteboxTools = wbt_info; sca, slope, output, sca_exponent=0.4, slope_exponent=1.3, callback::Union{Nothing,Function}=nothing)
Calculates the sediment transport index.
# Arguments
- `sca`: Input raster specific contributing area (SCA) file. 
- `slope`: Input raster slope file. 
- `output`: Output raster file. 
- `sca_exponent`: SCA exponent value. 
- `slope_exponent`: Slope exponent value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function sediment_transport_index(wbt_info::WhiteboxTools = wbt_info; sca, slope, output, sca_exponent=0.4, slope_exponent=1.3, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--sca=" * string(sca))
    push!(args, "--slope=" * string(slope))
    push!(args, "--output=" * string(output))
    push!(args, "--sca_exponent=" * string(sca_exponent))
    push!(args, "--slope_exponent=" * string(slope_exponent))
    return run_tool("sediment_transport_index"; args, callback) # returns 1 if error
end
    

"""
    slope(wbt_info::WhiteboxTools = wbt_info; dem, output, zfactor=nothing, units="degrees", callback::Union{Nothing,Function}=nothing)
Calculates a slope raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `units`: Units of output raster; options include 'degrees', 'radians', 'percent'. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function slope(wbt_info::WhiteboxTools = wbt_info; dem, output, zfactor=nothing, units="degrees", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    push!(args, "--units=" * string(units))
    return run_tool("slope"; args, callback) # returns 1 if error
end
    

"""
    slope_vs_elevation_plot(wbt_info::WhiteboxTools = wbt_info; inputs, output, watershed=nothing, callback::Union{Nothing,Function}=nothing)
Creates a slope vs. elevation plot for one or more DEMs.
# Arguments
- `inputs`: Input DEM files. 
- `watershed`: Input watershed files (optional). 
- `output`: Output HTML file (default name will be based on input file if unspecified). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function slope_vs_elevation_plot(wbt_info::WhiteboxTools = wbt_info; inputs, output, watershed=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    if isnothing(watershed) === false
        push!(args, "--watershed=" * string(watershed))
    end
    push!(args, "--output=" * string(output))
    return run_tool("slope_vs_elevation_plot"; args, callback) # returns 1 if error
end
    

"""
    spherical_std_dev_of_normals(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, callback::Union{Nothing,Function}=nothing)
Calculates the spherical standard deviation of surface normals for a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `filter`: Size of the filter kernel. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function spherical_std_dev_of_normals(wbt_info::WhiteboxTools = wbt_info; dem, output, filter=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--filter=" * string(filter))
    return run_tool("spherical_std_dev_of_normals"; args, callback) # returns 1 if error
end
    

"""
    standard_deviation_of_slope(wbt_info::WhiteboxTools = wbt_info; i, output, zfactor=nothing, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Calculates the standard deviation of slope from an input DEM.
# Arguments
- `i`: Input raster DEM file. 
- `output`: Output raster DEM file. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function standard_deviation_of_slope(wbt_info::WhiteboxTools = wbt_info; i, output, zfactor=nothing, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("standard_deviation_of_slope"; args, callback) # returns 1 if error
end
    

"""
    stream_power_index(wbt_info::WhiteboxTools = wbt_info; sca, slope, output, exponent=1.0, callback::Union{Nothing,Function}=nothing)
Calculates the relative stream power index.
# Arguments
- `sca`: Input raster specific contributing area (SCA) file. 
- `slope`: Input raster slope file. 
- `output`: Output raster file. 
- `exponent`: SCA exponent value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function stream_power_index(wbt_info::WhiteboxTools = wbt_info; sca, slope, output, exponent=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--sca=" * string(sca))
    push!(args, "--slope=" * string(slope))
    push!(args, "--output=" * string(output))
    push!(args, "--exponent=" * string(exponent))
    return run_tool("stream_power_index"; args, callback) # returns 1 if error
end
    

"""
    surface_area_ratio(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Calculates a the surface area ratio of each grid cell in an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function surface_area_ratio(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("surface_area_ratio"; args, callback) # returns 1 if error
end
    

"""
    tangential_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates a tangential curvature raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `log`: Display output values using a log-scale. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function tangential_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if log === true
        push!(args, "--log")
    end
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("tangential_curvature"; args, callback) # returns 1 if error
end
    

"""
    time_in_daylight(wbt_info::WhiteboxTools = wbt_info; dem, output, lat, long, az_fraction=10.0, max_dist=100.0, utc_offset="00:00", start_day=1, end_day=365, start_time="00:00:00", end_time="23:59:59", callback::Union{Nothing,Function}=nothing)
Calculates the proportion of time a location is not within an area of shadow.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `az_fraction`: Azimuth fraction in degrees. 
- `max_dist`: Optional maximum search distance. Minimum value is 5 x cell size. 
- `lat`: Centre point latitude. 
- `long`: Centre point longitude. 
- `utc_offset`: UTC time offset, in hours (e.g. -04:00, +06:00). 
- `start_day`: Start day of the year (1-365). 
- `end_day`: End day of the year (1-365). 
- `start_time`: Starting hour to track shadows (e.g. 5, 5:00, 05:00:00). Assumes 24-hour time: HH:MM:SS. 'sunrise' is also a valid time. 
- `end_time`: Starting hour to track shadows (e.g. 21, 21:00, 21:00:00). Assumes 24-hour time: HH:MM:SS. 'sunset' is also a valid time. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function time_in_daylight(wbt_info::WhiteboxTools = wbt_info; dem, output, lat, long, az_fraction=10.0, max_dist=100.0, utc_offset="00:00", start_day=1, end_day=365, start_time="00:00:00", end_time="23:59:59", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--az_fraction=" * string(az_fraction))
    push!(args, "--max_dist=" * string(max_dist))
    push!(args, "--lat=" * string(lat))
    push!(args, "--long=" * string(long))
    push!(args, "--utc_offset=" * string(utc_offset))
    push!(args, "--start_day=" * string(start_day))
    push!(args, "--end_day=" * string(end_day))
    push!(args, "--start_time=" * string(start_time))
    push!(args, "--end_time=" * string(end_time))
    return run_tool("time_in_daylight"; args, callback) # returns 1 if error
end
    

"""
    total_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
Calculates a total curvature raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `log`: Display output values using a log-scale. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function total_curvature(wbt_info::WhiteboxTools = wbt_info; dem, output, log=false, zfactor=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if log === true
        push!(args, "--log")
    end
    if isnothing(zfactor) === false
        push!(args, "--zfactor=" * string(zfactor))
    end
    return run_tool("total_curvature"; args, callback) # returns 1 if error
end
    

"""
    viewshed(wbt_info::WhiteboxTools = wbt_info; dem, stations, output, height=2.0, callback::Union{Nothing,Function}=nothing)
Identifies the viewshed for a point or set of points.
# Arguments
- `dem`: Input raster DEM file. 
- `stations`: Input viewing station vector file. 
- `output`: Output raster file. 
- `height`: Viewing station height, in z units. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function viewshed(wbt_info::WhiteboxTools = wbt_info; dem, stations, output, height=2.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--stations=" * string(stations))
    push!(args, "--output=" * string(output))
    push!(args, "--height=" * string(height))
    return run_tool("viewshed"; args, callback) # returns 1 if error
end
    

"""
    visibility_index(wbt_info::WhiteboxTools = wbt_info; dem, output, height=2.0, res_factor=2, callback::Union{Nothing,Function}=nothing)
Estimates the relative visibility of sites in a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `height`: Viewing station height, in z units. 
- `res_factor`: The resolution factor determines the density of measured viewsheds. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function visibility_index(wbt_info::WhiteboxTools = wbt_info; dem, output, height=2.0, res_factor=2, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--height=" * string(height))
    push!(args, "--res_factor=" * string(res_factor))
    return run_tool("visibility_index"; args, callback) # returns 1 if error
end
    

"""
    wetness_index(wbt_info::WhiteboxTools = wbt_info; sca, slope, output, callback::Union{Nothing,Function}=nothing)
Calculates the topographic wetness index, Ln(A / tan(slope)).
# Arguments
- `sca`: Input raster specific contributing area (SCA) file. 
- `slope`: Input raster slope file (in degrees). 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function wetness_index(wbt_info::WhiteboxTools = wbt_info; sca, slope, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--sca=" * string(sca))
    push!(args, "--slope=" * string(slope))
    push!(args, "--output=" * string(output))
    return run_tool("wetness_index"; args, callback) # returns 1 if error
end
    

#########################
# Hydrological Analysis #
#########################

"""
    average_flowpath_slope(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Measures the average slope gradient from each grid cell to all upslope divide cells.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function average_flowpath_slope(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("average_flowpath_slope"; args, callback) # returns 1 if error
end
    

"""
    average_upslope_flowpath_length(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Measures the average length of all upslope flowpaths draining each grid cell.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function average_upslope_flowpath_length(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("average_upslope_flowpath_length"; args, callback) # returns 1 if error
end
    

"""
    basins(wbt_info::WhiteboxTools = wbt_info; d8_pntr, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Identifies drainage basins that drain to the DEM edge.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function basins(wbt_info::WhiteboxTools = wbt_info; d8_pntr, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("basins"; args, callback) # returns 1 if error
end
    

"""
    breach_depressions(wbt_info::WhiteboxTools = wbt_info; dem, output, max_depth=nothing, max_length=nothing, flat_increment=nothing, fill_pits=false, callback::Union{Nothing,Function}=nothing)
Breaches all of the depressions in a DEM using Lindsay's (2016) algorithm. This should be preferred over depression filling in most cases.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `max_depth`: Optional maximum breach depth (default is Inf). 
- `max_length`: Optional maximum breach channel length (in grid cells; default is Inf). 
- `flat_increment`: Optional elevation increment applied to flat areas. 
- `fill_pits`: Optional flag indicating whether to fill single-cell pits. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function breach_depressions(wbt_info::WhiteboxTools = wbt_info; dem, output, max_depth=nothing, max_length=nothing, flat_increment=nothing, fill_pits=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if isnothing(max_depth) === false
        push!(args, "--max_depth=" * string(max_depth))
    end
    if isnothing(max_length) === false
        push!(args, "--max_length=" * string(max_length))
    end
    if isnothing(flat_increment) === false
        push!(args, "--flat_increment=" * string(flat_increment))
    end
    if fill_pits === true
        push!(args, "--fill_pits")
    end
    return run_tool("breach_depressions"; args, callback) # returns 1 if error
end
    

"""
    breach_depressions_least_cost(wbt_info::WhiteboxTools = wbt_info; dem, output, dist, max_cost=nothing, min_dist=true, flat_increment=nothing, fill=true, callback::Union{Nothing,Function}=nothing)
Breaches the depressions in a DEM using a least-cost pathway method.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `dist`: Maximum search distance for breach paths in cells. 
- `max_cost`: Optional maximum breach cost (default is Inf). 
- `min_dist`: Optional flag indicating whether to minimize breach distances. 
- `flat_increment`: Optional elevation increment applied to flat areas. 
- `fill`: Optional flag indicating whether to fill any remaining unbreached depressions. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function breach_depressions_least_cost(wbt_info::WhiteboxTools = wbt_info; dem, output, dist, max_cost=nothing, min_dist=true, flat_increment=nothing, fill=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--dist=" * string(dist))
    if isnothing(max_cost) === false
        push!(args, "--max_cost=" * string(max_cost))
    end
    if min_dist === true
        push!(args, "--min_dist")
    end
    if isnothing(flat_increment) === false
        push!(args, "--flat_increment=" * string(flat_increment))
    end
    if fill === true
        push!(args, "--fill")
    end
    return run_tool("breach_depressions_least_cost"; args, callback) # returns 1 if error
end
    

"""
    breach_single_cell_pits(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Removes single-cell pits from an input DEM by breaching.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function breach_single_cell_pits(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("breach_single_cell_pits"; args, callback) # returns 1 if error
end
    

"""
    burn_streams_at_roads(wbt_info::WhiteboxTools = wbt_info; dem, streams, roads, output, width=nothing, callback::Union{Nothing,Function}=nothing)
Burns-in streams at the sites of road embankments.
# Arguments
- `dem`: Input raster digital elevation model (DEM) file. 
- `streams`: Input vector streams file. 
- `roads`: Input vector roads file. 
- `output`: Output raster file. 
- `width`: Maximum road embankment width, in map units. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function burn_streams_at_roads(wbt_info::WhiteboxTools = wbt_info; dem, streams, roads, output, width=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--streams=" * string(streams))
    push!(args, "--roads=" * string(roads))
    push!(args, "--output=" * string(output))
    if isnothing(width) === false
        push!(args, "--width=" * string(width))
    end
    return run_tool("burn_streams_at_roads"; args, callback) # returns 1 if error
end
    

"""
    d8_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; i, output, out_type="cells", log=false, clip=false, pntr=false, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Calculates a D8 flow accumulation raster from an input DEM or flow pointer.
# Arguments
- `i`: Input raster DEM or D8 pointer file. 
- `output`: Output raster file. 
- `out_type`: Output type; one of 'cells' (default), 'catchment area', and 'specific contributing area'. 
- `log`: Optional flag to request the output be log-transformed. 
- `clip`: Optional flag to request clipping the display max by 1%. 
- `pntr`: Is the input raster a D8 flow pointer rather than a DEM?. 
- `esri_pntr`: Input D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function d8_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; i, output, out_type="cells", log=false, clip=false, pntr=false, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--out_type=" * string(out_type))
    if log === true
        push!(args, "--log")
    end
    if clip === true
        push!(args, "--clip")
    end
    if pntr === true
        push!(args, "--pntr")
    end
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("d8_flow_accumulation"; args, callback) # returns 1 if error
end
    

"""
    d8_mass_flux(wbt_info::WhiteboxTools = wbt_info; dem, loading, efficiency, absorption, output, callback::Union{Nothing,Function}=nothing)
Performs a D8 mass flux calculation.
# Arguments
- `dem`: Input raster DEM file. 
- `loading`: Input loading raster file. 
- `efficiency`: Input efficiency raster file. 
- `absorption`: Input absorption raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function d8_mass_flux(wbt_info::WhiteboxTools = wbt_info; dem, loading, efficiency, absorption, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--loading=" * string(loading))
    push!(args, "--efficiency=" * string(efficiency))
    push!(args, "--absorption=" * string(absorption))
    push!(args, "--output=" * string(output))
    return run_tool("d8_mass_flux"; args, callback) # returns 1 if error
end
    

"""
    d8_pointer(wbt_info::WhiteboxTools = wbt_info; dem, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Calculates a D8 flow pointer raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function d8_pointer(wbt_info::WhiteboxTools = wbt_info; dem, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("d8_pointer"; args, callback) # returns 1 if error
end
    

"""
    d_inf_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; i, output, out_type="Specific Contributing Area", threshold=nothing, log=false, clip=false, pntr=false, callback::Union{Nothing,Function}=nothing)
Calculates a D-infinity flow accumulation raster from an input DEM.
# Arguments
- `i`: Input raster DEM or D-infinity pointer file. 
- `output`: Output raster file. 
- `out_type`: Output type; one of 'cells', 'sca' (default), and 'ca'. 
- `threshold`: Optional convergence threshold parameter, in grid cells; default is infinity. 
- `log`: Optional flag to request the output be log-transformed. 
- `clip`: Optional flag to request clipping the display max by 1%. 
- `pntr`: Is the input raster a D-infinity flow pointer rather than a DEM?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function d_inf_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; i, output, out_type="Specific Contributing Area", threshold=nothing, log=false, clip=false, pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--out_type=" * string(out_type))
    if isnothing(threshold) === false
        push!(args, "--threshold=" * string(threshold))
    end
    if log === true
        push!(args, "--log")
    end
    if clip === true
        push!(args, "--clip")
    end
    if pntr === true
        push!(args, "--pntr")
    end
    return run_tool("d_inf_flow_accumulation"; args, callback) # returns 1 if error
end
    

"""
    d_inf_mass_flux(wbt_info::WhiteboxTools = wbt_info; dem, loading, efficiency, absorption, output, callback::Union{Nothing,Function}=nothing)
Performs a D-infinity mass flux calculation.
# Arguments
- `dem`: Input raster DEM file. 
- `loading`: Input loading raster file. 
- `efficiency`: Input efficiency raster file. 
- `absorption`: Input absorption raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function d_inf_mass_flux(wbt_info::WhiteboxTools = wbt_info; dem, loading, efficiency, absorption, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--loading=" * string(loading))
    push!(args, "--efficiency=" * string(efficiency))
    push!(args, "--absorption=" * string(absorption))
    push!(args, "--output=" * string(output))
    return run_tool("d_inf_mass_flux"; args, callback) # returns 1 if error
end
    

"""
    d_inf_pointer(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Calculates a D-infinity flow pointer (flow direction) raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function d_inf_pointer(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("d_inf_pointer"; args, callback) # returns 1 if error
end
    

"""
    depth_in_sink(wbt_info::WhiteboxTools = wbt_info; dem, output, zero_background=false, callback::Union{Nothing,Function}=nothing)
Measures the depth of sinks (depressions) in a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `zero_background`: Flag indicating whether the background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function depth_in_sink(wbt_info::WhiteboxTools = wbt_info; dem, output, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("depth_in_sink"; args, callback) # returns 1 if error
end
    

"""
    downslope_distance_to_stream(wbt_info::WhiteboxTools = wbt_info; dem, streams, output, dinf=false, callback::Union{Nothing,Function}=nothing)
Measures distance to the nearest downslope stream cell.
# Arguments
- `dem`: Input raster DEM file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `dinf`: Use the D-infinity flow algorithm instead of D8?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function downslope_distance_to_stream(wbt_info::WhiteboxTools = wbt_info; dem, streams, output, dinf=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if dinf === true
        push!(args, "--dinf")
    end
    return run_tool("downslope_distance_to_stream"; args, callback) # returns 1 if error
end
    

"""
    downslope_flowpath_length(wbt_info::WhiteboxTools = wbt_info; d8_pntr, output, watersheds=nothing, weights=nothing, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Calculates the downslope flowpath length from each cell to basin outlet.
# Arguments
- `d8_pntr`: Input D8 pointer raster file. 
- `watersheds`: Optional input watershed raster file. 
- `weights`: Optional input weights raster file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function downslope_flowpath_length(wbt_info::WhiteboxTools = wbt_info; d8_pntr, output, watersheds=nothing, weights=nothing, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    if isnothing(watersheds) === false
        push!(args, "--watersheds=" * string(watersheds))
    end
    if isnothing(weights) === false
        push!(args, "--weights=" * string(weights))
    end
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("downslope_flowpath_length"; args, callback) # returns 1 if error
end
    

"""
    edge_contamination(wbt_info::WhiteboxTools = wbt_info; dem, output, flow_type="mfd", zfactor="", callback::Union{Nothing,Function}=nothing)
This tool identifies grid cells within an input DEM that may be impacted by edge contamination for hydrological applications.
# Arguments
- `dem`: Name of the input DEM raster file; must be depressionless. 
- `output`: Name of the output raster file. 
- `flow_type`: Flow algorithm type, one of 'd8', 'mfd', or 'dinf'. 
- `zfactor`: Optional multiplier for when the vertical and horizontal units are not the same. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function edge_contamination(wbt_info::WhiteboxTools = wbt_info; dem, output, flow_type="mfd", zfactor="", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--flow_type=" * string(flow_type))
    push!(args, "--zfactor=" * string(zfactor))
    return run_tool("edge_contamination"; args, callback) # returns 1 if error
end
    

"""
    elevation_above_stream(wbt_info::WhiteboxTools = wbt_info; dem, streams, output, callback::Union{Nothing,Function}=nothing)
Calculates the elevation of cells above the nearest downslope stream cell.
# Arguments
- `dem`: Input raster DEM file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function elevation_above_stream(wbt_info::WhiteboxTools = wbt_info; dem, streams, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    return run_tool("elevation_above_stream"; args, callback) # returns 1 if error
end
    

"""
    elevation_above_stream_euclidean(wbt_info::WhiteboxTools = wbt_info; dem, streams, output, callback::Union{Nothing,Function}=nothing)
Calculates the elevation of cells above the nearest (Euclidean distance) stream cell.
# Arguments
- `dem`: Input raster DEM file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function elevation_above_stream_euclidean(wbt_info::WhiteboxTools = wbt_info; dem, streams, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    return run_tool("elevation_above_stream_euclidean"; args, callback) # returns 1 if error
end
    

"""
    fd8_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; dem, output, out_type="specific contributing area", exponent=1.1, threshold=nothing, log=false, clip=false, callback::Union{Nothing,Function}=nothing)
Calculates an FD8 flow accumulation raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `out_type`: Output type; one of 'cells', 'specific contributing area' (default), and 'catchment area'. 
- `exponent`: Optional exponent parameter; default is 1.1. 
- `threshold`: Optional convergence threshold parameter, in grid cells; default is infinity. 
- `log`: Optional flag to request the output be log-transformed. 
- `clip`: Optional flag to request clipping the display max by 1%. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function fd8_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; dem, output, out_type="specific contributing area", exponent=1.1, threshold=nothing, log=false, clip=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--out_type=" * string(out_type))
    push!(args, "--exponent=" * string(exponent))
    if isnothing(threshold) === false
        push!(args, "--threshold=" * string(threshold))
    end
    if log === true
        push!(args, "--log")
    end
    if clip === true
        push!(args, "--clip")
    end
    return run_tool("fd8_flow_accumulation"; args, callback) # returns 1 if error
end
    

"""
    fd8_pointer(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Calculates an FD8 flow pointer raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function fd8_pointer(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("fd8_pointer"; args, callback) # returns 1 if error
end
    

"""
    fill_burn(wbt_info::WhiteboxTools = wbt_info; dem, streams, output, callback::Union{Nothing,Function}=nothing)
Burns streams into a DEM using the FillBurn (Saunders, 1999) method.
# Arguments
- `dem`: Input raster DEM file. 
- `streams`: Input vector streams file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function fill_burn(wbt_info::WhiteboxTools = wbt_info; dem, streams, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    return run_tool("fill_burn"; args, callback) # returns 1 if error
end
    

"""
    fill_depressions(wbt_info::WhiteboxTools = wbt_info; dem, output, fix_flats=true, flat_increment=nothing, max_depth=nothing, callback::Union{Nothing,Function}=nothing)
Fills all of the depressions in a DEM. Depression breaching should be preferred in most cases.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `fix_flats`: Optional flag indicating whether flat areas should have a small gradient applied. 
- `flat_increment`: Optional elevation increment applied to flat areas. 
- `max_depth`: Optional maximum depression depth to fill. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function fill_depressions(wbt_info::WhiteboxTools = wbt_info; dem, output, fix_flats=true, flat_increment=nothing, max_depth=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if fix_flats === true
        push!(args, "--fix_flats")
    end
    if isnothing(flat_increment) === false
        push!(args, "--flat_increment=" * string(flat_increment))
    end
    if isnothing(max_depth) === false
        push!(args, "--max_depth=" * string(max_depth))
    end
    return run_tool("fill_depressions"; args, callback) # returns 1 if error
end
    

"""
    fill_depressions_planchon_and_darboux(wbt_info::WhiteboxTools = wbt_info; dem, output, fix_flats=true, flat_increment=nothing, callback::Union{Nothing,Function}=nothing)
Fills all of the depressions in a DEM using the Planchon and Darboux (2002) method.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `fix_flats`: Optional flag indicating whether flat areas should have a small gradient applied. 
- `flat_increment`: Optional elevation increment applied to flat areas. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function fill_depressions_planchon_and_darboux(wbt_info::WhiteboxTools = wbt_info; dem, output, fix_flats=true, flat_increment=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if fix_flats === true
        push!(args, "--fix_flats")
    end
    if isnothing(flat_increment) === false
        push!(args, "--flat_increment=" * string(flat_increment))
    end
    return run_tool("fill_depressions_planchon_and_darboux"; args, callback) # returns 1 if error
end
    

"""
    fill_depressions_wang_and_liu(wbt_info::WhiteboxTools = wbt_info; dem, output, fix_flats=true, flat_increment=nothing, callback::Union{Nothing,Function}=nothing)
Fills all of the depressions in a DEM using the Wang and Liu (2006) method. Depression breaching should be preferred in most cases.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `fix_flats`: Optional flag indicating whether flat areas should have a small gradient applied. 
- `flat_increment`: Optional elevation increment applied to flat areas. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function fill_depressions_wang_and_liu(wbt_info::WhiteboxTools = wbt_info; dem, output, fix_flats=true, flat_increment=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if fix_flats === true
        push!(args, "--fix_flats")
    end
    if isnothing(flat_increment) === false
        push!(args, "--flat_increment=" * string(flat_increment))
    end
    return run_tool("fill_depressions_wang_and_liu"; args, callback) # returns 1 if error
end
    

"""
    fill_single_cell_pits(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Raises pit cells to the elevation of their lowest neighbour.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function fill_single_cell_pits(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("fill_single_cell_pits"; args, callback) # returns 1 if error
end
    

"""
    find_no_flow_cells(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Finds grid cells with no downslope neighbours.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function find_no_flow_cells(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("find_no_flow_cells"; args, callback) # returns 1 if error
end
    

"""
    find_parallel_flow(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, callback::Union{Nothing,Function}=nothing)
Finds areas of parallel flow in D8 flow direction rasters.
# Arguments
- `d8_pntr`: Input D8 pointer raster file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function find_parallel_flow(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    return run_tool("find_parallel_flow"; args, callback) # returns 1 if error
end
    

"""
    flatten_lakes(wbt_info::WhiteboxTools = wbt_info; dem, lakes, output, callback::Union{Nothing,Function}=nothing)
Flattens lake polygons in a raster DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `lakes`: Input lakes vector polygons file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function flatten_lakes(wbt_info::WhiteboxTools = wbt_info; dem, lakes, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--lakes=" * string(lakes))
    push!(args, "--output=" * string(output))
    return run_tool("flatten_lakes"; args, callback) # returns 1 if error
end
    

"""
    flood_order(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Assigns each DEM grid cell its order in the sequence of inundations that are encountered during a search starting from the edges, moving inward at increasing elevations.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function flood_order(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("flood_order"; args, callback) # returns 1 if error
end
    

"""
    flow_accumulation_full_workflow(wbt_info::WhiteboxTools = wbt_info; dem, out_dem, out_pntr, out_accum, out_type="Specific Contributing Area", log=false, clip=false, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Resolves all of the depressions in a DEM, outputting a breached DEM, an aspect-aligned non-divergent flow pointer, and a flow accumulation raster.
# Arguments
- `dem`: Input raster DEM file. 
- `out_dem`: Output raster DEM file. 
- `out_pntr`: Output raster flow pointer file. 
- `out_accum`: Output raster flow accumulation file. 
- `out_type`: Output type; one of 'cells', 'sca' (default), and 'ca'. 
- `log`: Optional flag to request the output be log-transformed. 
- `clip`: Optional flag to request clipping the display max by 1%. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function flow_accumulation_full_workflow(wbt_info::WhiteboxTools = wbt_info; dem, out_dem, out_pntr, out_accum, out_type="Specific Contributing Area", log=false, clip=false, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--out_dem=" * string(out_dem))
    push!(args, "--out_pntr=" * string(out_pntr))
    push!(args, "--out_accum=" * string(out_accum))
    push!(args, "--out_type=" * string(out_type))
    if log === true
        push!(args, "--log")
    end
    if clip === true
        push!(args, "--clip")
    end
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("flow_accumulation_full_workflow"; args, callback) # returns 1 if error
end
    

"""
    flow_length_diff(wbt_info::WhiteboxTools = wbt_info; d8_pntr, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Calculates the local maximum absolute difference in downslope flowpath length, useful in mapping drainage divides and ridges.
# Arguments
- `d8_pntr`: Input D8 pointer raster file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function flow_length_diff(wbt_info::WhiteboxTools = wbt_info; d8_pntr, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("flow_length_diff"; args, callback) # returns 1 if error
end
    

"""
    hillslopes(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Identifies the individual hillslopes draining to each link in a stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function hillslopes(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("hillslopes"; args, callback) # returns 1 if error
end
    

"""
    impoundment_size_index(wbt_info::WhiteboxTools = wbt_info; dem, damlength, out_mean=nothing, out_max=nothing, out_volume=nothing, out_area=nothing, out_dam_height=nothing, callback::Union{Nothing,Function}=nothing)
Calculates the impoundment size resulting from damming a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `out_mean`: Output mean flooded depth file. 
- `out_max`: Output maximum flooded depth file. 
- `out_volume`: Output flooded volume file. 
- `out_area`: Output flooded area file. 
- `out_dam_height`: Output dam height file. 
- `damlength`: Maximum length of the dam. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function impoundment_size_index(wbt_info::WhiteboxTools = wbt_info; dem, damlength, out_mean=nothing, out_max=nothing, out_volume=nothing, out_area=nothing, out_dam_height=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    if isnothing(out_mean) === false
        push!(args, "--out_mean=" * string(out_mean))
    end
    if isnothing(out_max) === false
        push!(args, "--out_max=" * string(out_max))
    end
    if isnothing(out_volume) === false
        push!(args, "--out_volume=" * string(out_volume))
    end
    if isnothing(out_area) === false
        push!(args, "--out_area=" * string(out_area))
    end
    if isnothing(out_dam_height) === false
        push!(args, "--out_dam_height=" * string(out_dam_height))
    end
    push!(args, "--damlength=" * string(damlength))
    return run_tool("impoundment_size_index"; args, callback) # returns 1 if error
end
    

"""
    insert_dams(wbt_info::WhiteboxTools = wbt_info; dem, dam_pts, output, damlength, callback::Union{Nothing,Function}=nothing)
Calculates the impoundment size resulting from damming a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `dam_pts`: Input vector dam points file. 
- `output`: Output file. 
- `damlength`: Maximum length of the dam. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function insert_dams(wbt_info::WhiteboxTools = wbt_info; dem, dam_pts, output, damlength, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--dam_pts=" * string(dam_pts))
    push!(args, "--output=" * string(output))
    push!(args, "--damlength=" * string(damlength))
    return run_tool("insert_dams"; args, callback) # returns 1 if error
end
    

"""
    isobasins(wbt_info::WhiteboxTools = wbt_info; dem, output, size, connections=false, callback::Union{Nothing,Function}=nothing)
Divides a landscape into nearly equal sized drainage basins (i.e. watersheds).
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `size`: Target basin size, in grid cells. 
- `connections`: Output upstream-downstream flow connections among basins?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function isobasins(wbt_info::WhiteboxTools = wbt_info; dem, output, size, connections=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--size=" * string(size))
    if connections === true
        push!(args, "--connections")
    end
    return run_tool("isobasins"; args, callback) # returns 1 if error
end
    

"""
    jenson_snap_pour_points(wbt_info::WhiteboxTools = wbt_info; pour_pts, streams, output, snap_dist, callback::Union{Nothing,Function}=nothing)
Moves outlet points used to specify points of interest in a watershedding operation to the nearest stream cell.
# Arguments
- `pour_pts`: Input vector pour points (outlet) file. 
- `streams`: Input raster streams file. 
- `output`: Output vector file. 
- `snap_dist`: Maximum snap distance in map units. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function jenson_snap_pour_points(wbt_info::WhiteboxTools = wbt_info; pour_pts, streams, output, snap_dist, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--pour_pts=" * string(pour_pts))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    push!(args, "--snap_dist=" * string(snap_dist))
    return run_tool("jenson_snap_pour_points"; args, callback) # returns 1 if error
end
    

"""
    longest_flowpath(wbt_info::WhiteboxTools = wbt_info; dem, basins, output, callback::Union{Nothing,Function}=nothing)
Delineates the longest flowpaths for a group of subbasins or watersheds.
# Arguments
- `dem`: Input raster DEM file. 
- `basins`: Input raster basins file. 
- `output`: Output vector file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function longest_flowpath(wbt_info::WhiteboxTools = wbt_info; dem, basins, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--basins=" * string(basins))
    push!(args, "--output=" * string(output))
    return run_tool("longest_flowpath"; args, callback) # returns 1 if error
end
    

"""
    max_upslope_flowpath_length(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Measures the maximum length of all upslope flowpaths draining each grid cell.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function max_upslope_flowpath_length(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("max_upslope_flowpath_length"; args, callback) # returns 1 if error
end
    

"""
    md_inf_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; dem, output, out_type="specific contributing area", exponent=1.1, threshold=nothing, log=false, clip=false, callback::Union{Nothing,Function}=nothing)
Calculates an FD8 flow accumulation raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `out_type`: Output type; one of 'cells', 'specific contributing area' (default), and 'catchment area'. 
- `exponent`: Optional exponent parameter; default is 1.1. 
- `threshold`: Optional convergence threshold parameter, in grid cells; default is infinity. 
- `log`: Optional flag to request the output be log-transformed. 
- `clip`: Optional flag to request clipping the display max by 1%. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function md_inf_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; dem, output, out_type="specific contributing area", exponent=1.1, threshold=nothing, log=false, clip=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--out_type=" * string(out_type))
    push!(args, "--exponent=" * string(exponent))
    if isnothing(threshold) === false
        push!(args, "--threshold=" * string(threshold))
    end
    if log === true
        push!(args, "--log")
    end
    if clip === true
        push!(args, "--clip")
    end
    return run_tool("md_inf_flow_accumulation"; args, callback) # returns 1 if error
end
    

"""
    num_inflowing_neighbours(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Computes the number of inflowing neighbours to each cell in an input DEM based on the D8 algorithm.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function num_inflowing_neighbours(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("num_inflowing_neighbours"; args, callback) # returns 1 if error
end
    

"""
    qin_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; dem, output, out_type="specific contributing area", exponent=10.0, max_slope=45.0, threshold=nothing, log=false, clip=false, callback::Union{Nothing,Function}=nothing)
This tool calculates Qin et al. (2007) flow accumulation.
# Arguments
- `dem`: Name of the input DEM raster file; must be depressionless. 
- `output`: Name of the output raster file. 
- `out_type`: Output type; one of 'cells', 'specific contributing area' (default), and 'catchment area'. 
- `exponent`: Optional upper-bound exponent parameter; default is 10.0. 
- `max_slope`: Optional upper-bound slope parameter, in degrees (0-90); default is 45.0. 
- `threshold`: Optional convergence threshold parameter, in grid cells; default is infinity. 
- `log`: Log-transform the output values?. 
- `clip`: Optional flag to request clipping the display max by 1%. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function qin_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; dem, output, out_type="specific contributing area", exponent=10.0, max_slope=45.0, threshold=nothing, log=false, clip=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--out_type=" * string(out_type))
    push!(args, "--exponent=" * string(exponent))
    push!(args, "--max_slope=" * string(max_slope))
    if isnothing(threshold) === false
        push!(args, "--threshold=" * string(threshold))
    end
    if log === true
        push!(args, "--log")
    end
    if clip === true
        push!(args, "--clip")
    end
    return run_tool("qin_flow_accumulation"; args, callback) # returns 1 if error
end
    

"""
    quinn_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; dem, output, out_type="specific contributing area", exponent=1.0, threshold=nothing, log=false, clip=false, callback::Union{Nothing,Function}=nothing)
This tool calculates Quinn et al. (1995) flow accumulation.
# Arguments
- `dem`: Name of the input DEM raster file; must be depressionless. 
- `output`: Name of the output raster file. 
- `out_type`: Output type; one of 'cells', 'specific contributing area' (default), and 'catchment area'. 
- `exponent`: Optional exponent parameter; default is 1.0. 
- `threshold`: Optional convergence threshold parameter, in grid cells; default is infinity. 
- `log`: Log-transform the output values?. 
- `clip`: Optional flag to request clipping the display max by 1%. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function quinn_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; dem, output, out_type="specific contributing area", exponent=1.0, threshold=nothing, log=false, clip=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--out_type=" * string(out_type))
    push!(args, "--exponent=" * string(exponent))
    if isnothing(threshold) === false
        push!(args, "--threshold=" * string(threshold))
    end
    if log === true
        push!(args, "--log")
    end
    if clip === true
        push!(args, "--clip")
    end
    return run_tool("quinn_flow_accumulation"; args, callback) # returns 1 if error
end
    

"""
    raise_walls(wbt_info::WhiteboxTools = wbt_info; i, dem, output, breach=nothing, height=100.0, callback::Union{Nothing,Function}=nothing)
Raises walls in a DEM along a line or around a polygon, e.g. a watershed.
# Arguments
- `i`: Input vector lines or polygons file. 
- `breach`: Optional input vector breach lines. 
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `height`: Wall height. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function raise_walls(wbt_info::WhiteboxTools = wbt_info; i, dem, output, breach=nothing, height=100.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(breach) === false
        push!(args, "--breach=" * string(breach))
    end
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--height=" * string(height))
    return run_tool("raise_walls"; args, callback) # returns 1 if error
end
    

"""
    rho8_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; i, output, out_type="specific contributing area", log=false, clip=false, pntr=false, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
This tool calculates Fairfield and Leymarie (1991) flow accumulation.
# Arguments
- `i`: Input DEM or Rho8 pointer file; if a DEM is used, it must be depressionless. 
- `output`: Name of the output raster file. 
- `out_type`: Output type; one of 'cells', 'specific contributing area' (default), and 'catchment area'. 
- `log`: Log-transform the output values?. 
- `clip`: Optional flag to request clipping the display max by 1%. 
- `pntr`: Is the input raster a Rho8 flow pointer rather than a DEM?. 
- `esri_pntr`: Does the input Rho8 pointer use the ESRI style scheme?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function rho8_flow_accumulation(wbt_info::WhiteboxTools = wbt_info; i, output, out_type="specific contributing area", log=false, clip=false, pntr=false, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--out_type=" * string(out_type))
    if log === true
        push!(args, "--log")
    end
    if clip === true
        push!(args, "--clip")
    end
    if pntr === true
        push!(args, "--pntr")
    end
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("rho8_flow_accumulation"; args, callback) # returns 1 if error
end
    

"""
    rho8_pointer(wbt_info::WhiteboxTools = wbt_info; dem, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Calculates a stochastic Rho8 flow pointer raster from an input DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function rho8_pointer(wbt_info::WhiteboxTools = wbt_info; dem, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("rho8_pointer"; args, callback) # returns 1 if error
end
    

"""
    sink(wbt_info::WhiteboxTools = wbt_info; i, output, zero_background=false, callback::Union{Nothing,Function}=nothing)
Identifies the depressions in a DEM, giving each feature a unique identifier.
# Arguments
- `i`: Input raster DEM file. 
- `output`: Output raster file. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function sink(wbt_info::WhiteboxTools = wbt_info; i, output, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("sink"; args, callback) # returns 1 if error
end
    

"""
    snap_pour_points(wbt_info::WhiteboxTools = wbt_info; pour_pts, flow_accum, output, snap_dist, callback::Union{Nothing,Function}=nothing)
Moves outlet points used to specify points of interest in a watershedding operation to the cell with the highest flow accumulation in its neighbourhood.
# Arguments
- `pour_pts`: Input vector pour points (outlet) file. 
- `flow_accum`: Input raster D8 flow accumulation file. 
- `output`: Output vector file. 
- `snap_dist`: Maximum snap distance in map units. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function snap_pour_points(wbt_info::WhiteboxTools = wbt_info; pour_pts, flow_accum, output, snap_dist, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--pour_pts=" * string(pour_pts))
    push!(args, "--flow_accum=" * string(flow_accum))
    push!(args, "--output=" * string(output))
    push!(args, "--snap_dist=" * string(snap_dist))
    return run_tool("snap_pour_points"; args, callback) # returns 1 if error
end
    

"""
    stochastic_depression_analysis(wbt_info::WhiteboxTools = wbt_info; dem, output, rmse, range, iterations=100, callback::Union{Nothing,Function}=nothing)
Performs a stochastic analysis of depressions within a DEM.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output file. 
- `rmse`: The DEM's root-mean-square-error (RMSE), in z units. This determines error magnitude. 
- `range`: The error field's correlation length, in xy-units. 
- `iterations`: The number of iterations. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function stochastic_depression_analysis(wbt_info::WhiteboxTools = wbt_info; dem, output, rmse, range, iterations=100, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--rmse=" * string(rmse))
    push!(args, "--range=" * string(range))
    push!(args, "--iterations=" * string(iterations))
    return run_tool("stochastic_depression_analysis"; args, callback) # returns 1 if error
end
    

"""
    strahler_order_basins(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Identifies Strahler-order basins from an input stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function strahler_order_basins(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("strahler_order_basins"; args, callback) # returns 1 if error
end
    

"""
    subbasins(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Identifies the catchments, or sub-basin, draining to each link in a stream network.
# Arguments
- `d8_pntr`: Input D8 pointer raster file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function subbasins(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("subbasins"; args, callback) # returns 1 if error
end
    

"""
    trace_downslope_flowpaths(wbt_info::WhiteboxTools = wbt_info; seed_pts, d8_pntr, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Traces downslope flowpaths from one or more target sites (i.e. seed points).
# Arguments
- `seed_pts`: Input vector seed points file. 
- `d8_pntr`: Input D8 pointer raster file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function trace_downslope_flowpaths(wbt_info::WhiteboxTools = wbt_info; seed_pts, d8_pntr, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--seed_pts=" * string(seed_pts))
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("trace_downslope_flowpaths"; args, callback) # returns 1 if error
end
    

"""
    unnest_basins(wbt_info::WhiteboxTools = wbt_info; d8_pntr, pour_pts, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Extract whole watersheds for a set of outlet points.
# Arguments
- `d8_pntr`: Input D8 pointer raster file. 
- `pour_pts`: Input vector pour points (outlet) file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function unnest_basins(wbt_info::WhiteboxTools = wbt_info; d8_pntr, pour_pts, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--pour_pts=" * string(pour_pts))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("unnest_basins"; args, callback) # returns 1 if error
end
    

"""
    upslope_depression_storage(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
Estimates the average upslope depression storage depth.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function upslope_depression_storage(wbt_info::WhiteboxTools = wbt_info; dem, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    return run_tool("upslope_depression_storage"; args, callback) # returns 1 if error
end
    

"""
    watershed(wbt_info::WhiteboxTools = wbt_info; d8_pntr, pour_pts, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Identifies the watershed, or drainage basin, draining to a set of target cells.
# Arguments
- `d8_pntr`: Input D8 pointer raster file. 
- `pour_pts`: Input pour points (outlet) file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function watershed(wbt_info::WhiteboxTools = wbt_info; d8_pntr, pour_pts, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--pour_pts=" * string(pour_pts))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("watershed"; args, callback) # returns 1 if error
end
    

##########################
# Image Processing Tools #
##########################

"""
    change_vector_analysis(wbt_info::WhiteboxTools = wbt_info; date1, date2, magnitude, direction, callback::Union{Nothing,Function}=nothing)
Performs a change vector analysis on a two-date multi-spectral dataset.
# Arguments
- `date1`: Input raster files for the earlier date. 
- `date2`: Input raster files for the later date. 
- `magnitude`: Output vector magnitude raster file. 
- `direction`: Output vector Direction raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function change_vector_analysis(wbt_info::WhiteboxTools = wbt_info; date1, date2, magnitude, direction, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--date1=" * string(date1))
    push!(args, "--date2=" * string(date2))
    push!(args, "--magnitude=" * string(magnitude))
    push!(args, "--direction=" * string(direction))
    return run_tool("change_vector_analysis"; args, callback) # returns 1 if error
end
    

"""
    closing(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
A closing is a mathematical morphology operation involving an erosion (min filter) of a dilation (max filter) set.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function closing(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("closing"; args, callback) # returns 1 if error
end
    

"""
    create_colour_composite(wbt_info::WhiteboxTools = wbt_info; red, green, blue, output, opacity=nothing, enhance=true, zeros=false, callback::Union{Nothing,Function}=nothing)
Creates a colour-composite image from three bands of multispectral imagery.
# Arguments
- `red`: Input red band image file. 
- `green`: Input green band image file. 
- `blue`: Input blue band image file. 
- `opacity`: Input opacity band image file (optional). 
- `output`: Output colour composite file. 
- `enhance`: Optional flag indicating whether a balance contrast enhancement is performed. 
- `zeros`: Optional flag to indicate if zeros are nodata values. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function create_colour_composite(wbt_info::WhiteboxTools = wbt_info; red, green, blue, output, opacity=nothing, enhance=true, zeros=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--red=" * string(red))
    push!(args, "--green=" * string(green))
    push!(args, "--blue=" * string(blue))
    if isnothing(opacity) === false
        push!(args, "--opacity=" * string(opacity))
    end
    push!(args, "--output=" * string(output))
    if enhance === true
        push!(args, "--enhance")
    end
    if zeros === true
        push!(args, "--zeros")
    end
    return run_tool("create_colour_composite"; args, callback) # returns 1 if error
end
    

"""
    flip_image(wbt_info::WhiteboxTools = wbt_info; i, output, direction="vertical", callback::Union{Nothing,Function}=nothing)
Reflects an image in the vertical or horizontal axis.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `direction`: Direction of reflection; options include 'v' (vertical), 'h' (horizontal), and 'b' (both). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function flip_image(wbt_info::WhiteboxTools = wbt_info; i, output, direction="vertical", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--direction=" * string(direction))
    return run_tool("flip_image"; args, callback) # returns 1 if error
end
    

"""
    ihs_to_rgb(wbt_info::WhiteboxTools = wbt_info; intensity, hue, saturation, red=nothing, green=nothing, blue=nothing, output=nothing, callback::Union{Nothing,Function}=nothing)
Converts intensity, hue, and saturation (IHS) images into red, green, and blue (RGB) images.
# Arguments
- `intensity`: Input intensity file. 
- `hue`: Input hue file. 
- `saturation`: Input saturation file. 
- `red`: Output red band file. Optionally specified if colour-composite not specified. 
- `green`: Output green band file. Optionally specified if colour-composite not specified. 
- `blue`: Output blue band file. Optionally specified if colour-composite not specified. 
- `output`: Output colour-composite file. Only used if individual bands are not specified. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function ihs_to_rgb(wbt_info::WhiteboxTools = wbt_info; intensity, hue, saturation, red=nothing, green=nothing, blue=nothing, output=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--intensity=" * string(intensity))
    push!(args, "--hue=" * string(hue))
    push!(args, "--saturation=" * string(saturation))
    if isnothing(red) === false
        push!(args, "--red=" * string(red))
    end
    if isnothing(green) === false
        push!(args, "--green=" * string(green))
    end
    if isnothing(blue) === false
        push!(args, "--blue=" * string(blue))
    end
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    return run_tool("ihs_to_rgb"; args, callback) # returns 1 if error
end
    

"""
    image_stack_profile(wbt_info::WhiteboxTools = wbt_info; inputs, points, output, callback::Union{Nothing,Function}=nothing)
Plots an image stack profile (i.e. signature) for a set of points and multispectral images.
# Arguments
- `inputs`: Input multispectral image files. 
- `points`: Input vector points file. 
- `output`: Output HTML file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function image_stack_profile(wbt_info::WhiteboxTools = wbt_info; inputs, points, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--points=" * string(points))
    push!(args, "--output=" * string(output))
    return run_tool("image_stack_profile"; args, callback) # returns 1 if error
end
    

"""
    integral_image(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Transforms an input image (summed area table) into its integral image equivalent.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function integral_image(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("integral_image"; args, callback) # returns 1 if error
end
    

"""
    line_thinning(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Performs line thinning a on Boolean raster image; intended to be used with the RemoveSpurs tool.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function line_thinning(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("line_thinning"; args, callback) # returns 1 if error
end
    

"""
    mosaic(wbt_info::WhiteboxTools = wbt_info; output, inputs=nothing, method="nn", callback::Union{Nothing,Function}=nothing)
Mosaics two or more images together.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `method`: Resampling method; options include 'nn' (nearest neighbour), 'bilinear', and 'cc' (cubic convolution). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function mosaic(wbt_info::WhiteboxTools = wbt_info; output, inputs=nothing, method="nn", callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(inputs) === false
        push!(args, "--inputs=" * string(inputs))
    end
    push!(args, "--output=" * string(output))
    push!(args, "--method=" * string(method))
    return run_tool("mosaic"; args, callback) # returns 1 if error
end
    

"""
    mosaic_with_feathering(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, method="cc", weight=4.0, callback::Union{Nothing,Function}=nothing)
Mosaics two images together using a feathering technique in overlapping areas to reduce edge-effects.
# Arguments
- `input1`: Input raster file to modify. 
- `input2`: Input reference raster file. 
- `output`: Output raster file. 
- `method`: Resampling method; options include 'nn' (nearest neighbour), 'bilinear', and 'cc' (cubic convolution). 
- `weight`: . 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function mosaic_with_feathering(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, method="cc", weight=4.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    push!(args, "--method=" * string(method))
    push!(args, "--weight=" * string(weight))
    return run_tool("mosaic_with_feathering"; args, callback) # returns 1 if error
end
    

"""
    normalized_difference_index(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, clip=0.0, correction=0.0, callback::Union{Nothing,Function}=nothing)
Calculate a normalized-difference index (NDI) from two bands of multispectral image data.
# Arguments
- `input1`: Input image 1 (e.g. near-infrared band). 
- `input2`: Input image 2 (e.g. red band). 
- `output`: Output raster file. 
- `clip`: Optional amount to clip the distribution tails by, in percent. 
- `correction`: Optional adjustment value (e.g. 1, or 0.16 for the optimal soil adjusted vegetation index, OSAVI). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function normalized_difference_index(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, clip=0.0, correction=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    push!(args, "--clip=" * string(clip))
    push!(args, "--correction=" * string(correction))
    return run_tool("normalized_difference_index"; args, callback) # returns 1 if error
end
    

"""
    opening(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
An opening is a mathematical morphology operation involving a dilation (max filter) of an erosion (min filter) set.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function opening(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("opening"; args, callback) # returns 1 if error
end
    

"""
    remove_spurs(wbt_info::WhiteboxTools = wbt_info; i, output, iterations=10, callback::Union{Nothing,Function}=nothing)
Removes the spurs (pruning operation) from a Boolean line image; intended to be used on the output of the LineThinning tool.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `iterations`: Maximum number of iterations. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function remove_spurs(wbt_info::WhiteboxTools = wbt_info; i, output, iterations=10, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--iterations=" * string(iterations))
    return run_tool("remove_spurs"; args, callback) # returns 1 if error
end
    

"""
    resample(wbt_info::WhiteboxTools = wbt_info; inputs, output, cell_size=nothing, base=nothing, method="cc", callback::Union{Nothing,Function}=nothing)
Resamples one or more input images into a destination image.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `cell_size`: Optionally specified cell size of output raster. Not used when base raster is specified. 
- `base`: Optionally specified input base raster file. Not used when a cell size is specified. 
- `method`: Resampling method; options include 'nn' (nearest neighbour), 'bilinear', and 'cc' (cubic convolution). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function resample(wbt_info::WhiteboxTools = wbt_info; inputs, output, cell_size=nothing, base=nothing, method="cc", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    if isnothing(cell_size) === false
        push!(args, "--cell_size=" * string(cell_size))
    end
    if isnothing(base) === false
        push!(args, "--base=" * string(base))
    end
    push!(args, "--method=" * string(method))
    return run_tool("resample"; args, callback) # returns 1 if error
end
    

"""
    rgb_to_ihs(wbt_info::WhiteboxTools = wbt_info; intensity, hue, saturation, red=nothing, green=nothing, blue=nothing, composite=nothing, callback::Union{Nothing,Function}=nothing)
Converts red, green, and blue (RGB) images into intensity, hue, and saturation (IHS) images.
# Arguments
- `red`: Input red band image file. Optionally specified if colour-composite not specified. 
- `green`: Input green band image file. Optionally specified if colour-composite not specified. 
- `blue`: Input blue band image file. Optionally specified if colour-composite not specified. 
- `composite`: Input colour-composite image file. Only used if individual bands are not specified. 
- `intensity`: Output intensity raster file. 
- `hue`: Output hue raster file. 
- `saturation`: Output saturation raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function rgb_to_ihs(wbt_info::WhiteboxTools = wbt_info; intensity, hue, saturation, red=nothing, green=nothing, blue=nothing, composite=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(red) === false
        push!(args, "--red=" * string(red))
    end
    if isnothing(green) === false
        push!(args, "--green=" * string(green))
    end
    if isnothing(blue) === false
        push!(args, "--blue=" * string(blue))
    end
    if isnothing(composite) === false
        push!(args, "--composite=" * string(composite))
    end
    push!(args, "--intensity=" * string(intensity))
    push!(args, "--hue=" * string(hue))
    push!(args, "--saturation=" * string(saturation))
    return run_tool("rgb_to_ihs"; args, callback) # returns 1 if error
end
    

"""
    split_colour_composite(wbt_info::WhiteboxTools = wbt_info; i, red=nothing, green=nothing, blue=nothing, callback::Union{Nothing,Function}=nothing)
This tool splits an RGB colour composite image into separate multispectral images.
# Arguments
- `i`: Input colour composite image file. 
- `red`: Output red band file. 
- `green`: Output green band file. 
- `blue`: Output blue band file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function split_colour_composite(wbt_info::WhiteboxTools = wbt_info; i, red=nothing, green=nothing, blue=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(red) === false
        push!(args, "--red=" * string(red))
    end
    if isnothing(green) === false
        push!(args, "--green=" * string(green))
    end
    if isnothing(blue) === false
        push!(args, "--blue=" * string(blue))
    end
    return run_tool("split_colour_composite"; args, callback) # returns 1 if error
end
    

"""
    thicken_raster_line(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Thickens single-cell wide lines within a raster image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function thicken_raster_line(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("thicken_raster_line"; args, callback) # returns 1 if error
end
    

"""
    tophat_transform(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, variant="white", callback::Union{Nothing,Function}=nothing)
Performs either a white or black top-hat transform on an input image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `variant`: Optional variant value. Options include 'white' and 'black'. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function tophat_transform(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, variant="white", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    push!(args, "--variant=" * string(variant))
    return run_tool("tophat_transform"; args, callback) # returns 1 if error
end
    

"""
    write_function_memory_insertion(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, input3=nothing, callback::Union{Nothing,Function}=nothing)
Performs a write function memory insertion for single-band multi-date change detection.
# Arguments
- `input1`: Input raster file associated with the first date. 
- `input2`: Input raster file associated with the second date. 
- `input3`: Optional input raster file associated with the third date. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function write_function_memory_insertion(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, input3=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    if isnothing(input3) === false
        push!(args, "--input3=" * string(input3))
    end
    push!(args, "--output=" * string(output))
    return run_tool("write_function_memory_insertion"; args, callback) # returns 1 if error
end
    

##################################
# Image Processing Tools/Filters #
##################################

"""
    adaptive_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, threshold=2.0, callback::Union{Nothing,Function}=nothing)
Performs an adaptive filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `threshold`: Difference from mean threshold, in standard deviations. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function adaptive_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, threshold=2.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    push!(args, "--threshold=" * string(threshold))
    return run_tool("adaptive_filter"; args, callback) # returns 1 if error
end
    

"""
    bilateral_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma_dist=0.75, sigma_int=1.0, callback::Union{Nothing,Function}=nothing)
A bilateral filter is an edge-preserving smoothing filter introduced by Tomasi and Manduchi (1998).
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `sigma_dist`: Standard deviation in distance in pixels. 
- `sigma_int`: Standard deviation in intensity in pixels. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function bilateral_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma_dist=0.75, sigma_int=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--sigma_dist=" * string(sigma_dist))
    push!(args, "--sigma_int=" * string(sigma_int))
    return run_tool("bilateral_filter"; args, callback) # returns 1 if error
end
    

"""
    conservative_smoothing_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=3, filtery=3, callback::Union{Nothing,Function}=nothing)
Performs a conservative-smoothing filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function conservative_smoothing_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=3, filtery=3, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("conservative_smoothing_filter"; args, callback) # returns 1 if error
end
    

"""
    corner_detection(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Identifies corner patterns in boolean images using hit-and-miss pattern matching.
# Arguments
- `i`: Input boolean image. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function corner_detection(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("corner_detection"; args, callback) # returns 1 if error
end
    

"""
    diff_of_gaussian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma1=2.0, sigma2=4.0, callback::Union{Nothing,Function}=nothing)
Performs a Difference of Gaussian (DoG) filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `sigma1`: Standard deviation distance in pixels. 
- `sigma2`: Standard deviation distance in pixels. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function diff_of_gaussian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma1=2.0, sigma2=4.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--sigma1=" * string(sigma1))
    push!(args, "--sigma2=" * string(sigma2))
    return run_tool("diff_of_gaussian_filter"; args, callback) # returns 1 if error
end
    

"""
    diversity_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Assigns each cell in the output grid the number of different values in a moving window centred on each grid cell in the input raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function diversity_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("diversity_filter"; args, callback) # returns 1 if error
end
    

"""
    edge_preserving_mean_filter(wbt_info::WhiteboxTools = wbt_info; i, output, threshold, filter=11, callback::Union{Nothing,Function}=nothing)
Performs a simple edge-preserving mean filter on an input image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filter`: Size of the filter kernel. 
- `threshold`: Maximum difference in values. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function edge_preserving_mean_filter(wbt_info::WhiteboxTools = wbt_info; i, output, threshold, filter=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filter=" * string(filter))
    push!(args, "--threshold=" * string(threshold))
    return run_tool("edge_preserving_mean_filter"; args, callback) # returns 1 if error
end
    

"""
    emboss_filter(wbt_info::WhiteboxTools = wbt_info; i, output, direction="n", clip=0.0, callback::Union{Nothing,Function}=nothing)
Performs an emboss filter on an image, similar to a hillshade operation.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `direction`: Direction of reflection; options include 'n', 's', 'e', 'w', 'ne', 'se', 'nw', 'sw'. 
- `clip`: Optional amount to clip the distribution tails by, in percent. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function emboss_filter(wbt_info::WhiteboxTools = wbt_info; i, output, direction="n", clip=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--direction=" * string(direction))
    push!(args, "--clip=" * string(clip))
    return run_tool("emboss_filter"; args, callback) # returns 1 if error
end
    

"""
    fast_almost_gaussian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma=1.8, callback::Union{Nothing,Function}=nothing)
Performs a fast approximate Gaussian filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `sigma`: Standard deviation distance in pixels. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function fast_almost_gaussian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma=1.8, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--sigma=" * string(sigma))
    return run_tool("fast_almost_gaussian_filter"; args, callback) # returns 1 if error
end
    

"""
    gaussian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma=0.75, callback::Union{Nothing,Function}=nothing)
Performs a Gaussian filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `sigma`: Standard deviation distance in pixels. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function gaussian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma=0.75, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--sigma=" * string(sigma))
    return run_tool("gaussian_filter"; args, callback) # returns 1 if error
end
    

"""
    high_pass_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Performs a high-pass filter on an input image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function high_pass_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("high_pass_filter"; args, callback) # returns 1 if error
end
    

"""
    high_pass_median_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, sig_digits=2, callback::Union{Nothing,Function}=nothing)
Performs a high pass median filter on an input image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `sig_digits`: Number of significant digits. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function high_pass_median_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, sig_digits=2, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    push!(args, "--sig_digits=" * string(sig_digits))
    return run_tool("high_pass_median_filter"; args, callback) # returns 1 if error
end
    

"""
    k_nearest_mean_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, k=5, callback::Union{Nothing,Function}=nothing)
A k-nearest mean filter is a type of edge-preserving smoothing filter.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `k`: k-value in pixels; this is the number of nearest-valued neighbours to use. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function k_nearest_mean_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, k=5, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    push!(args, "-k=" * string(k))
    return run_tool("k_nearest_mean_filter"; args, callback) # returns 1 if error
end
    

"""
    laplacian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, variant="3x3(1)", clip=0.0, callback::Union{Nothing,Function}=nothing)
Performs a Laplacian filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `variant`: Optional variant value. Options include 3x3(1), 3x3(2), 3x3(3), 3x3(4), 5x5(1), and 5x5(2) (default is 3x3(1)). 
- `clip`: Optional amount to clip the distribution tails by, in percent. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function laplacian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, variant="3x3(1)", clip=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--variant=" * string(variant))
    push!(args, "--clip=" * string(clip))
    return run_tool("laplacian_filter"; args, callback) # returns 1 if error
end
    

"""
    laplacian_of_gaussian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma=0.75, callback::Union{Nothing,Function}=nothing)
Performs a Laplacian-of-Gaussian (LoG) filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `sigma`: Standard deviation in pixels. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function laplacian_of_gaussian_filter(wbt_info::WhiteboxTools = wbt_info; i, output, sigma=0.75, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--sigma=" * string(sigma))
    return run_tool("laplacian_of_gaussian_filter"; args, callback) # returns 1 if error
end
    

"""
    lee_sigma_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, sigma=10.0, m=5.0, callback::Union{Nothing,Function}=nothing)
Performs a Lee (Sigma) smoothing filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `sigma`: Sigma value should be related to the standard deviation of the distribution of image speckle noise. 
- `m`: M-threshold value the minimum allowable number of pixels within the intensity range. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lee_sigma_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, sigma=10.0, m=5.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    push!(args, "--sigma=" * string(sigma))
    push!(args, "-m=" * string(m))
    return run_tool("lee_sigma_filter"; args, callback) # returns 1 if error
end
    

"""
    line_detection_filter(wbt_info::WhiteboxTools = wbt_info; i, output, variant="vertical", absvals=false, clip=0.0, callback::Union{Nothing,Function}=nothing)
Performs a line-detection filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `variant`: Optional variant value. Options include 'v' (vertical), 'h' (horizontal), '45', and '135' (default is 'v'). 
- `absvals`: Optional flag indicating whether outputs should be absolute values. 
- `clip`: Optional amount to clip the distribution tails by, in percent. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function line_detection_filter(wbt_info::WhiteboxTools = wbt_info; i, output, variant="vertical", absvals=false, clip=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--variant=" * string(variant))
    if absvals === true
        push!(args, "--absvals")
    end
    push!(args, "--clip=" * string(clip))
    return run_tool("line_detection_filter"; args, callback) # returns 1 if error
end
    

"""
    majority_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Assigns each cell in the output grid the most frequently occurring value (mode) in a moving window centred on each grid cell in the input raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function majority_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("majority_filter"; args, callback) # returns 1 if error
end
    

"""
    maximum_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Assigns each cell in the output grid the maximum value in a moving window centred on each grid cell in the input raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function maximum_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("maximum_filter"; args, callback) # returns 1 if error
end
    

"""
    mean_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=3, filtery=3, callback::Union{Nothing,Function}=nothing)
Performs a mean filter (low-pass filter) on an input image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function mean_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=3, filtery=3, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("mean_filter"; args, callback) # returns 1 if error
end
    

"""
    median_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, sig_digits=2, callback::Union{Nothing,Function}=nothing)
Performs a median filter on an input image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `sig_digits`: Number of significant digits. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function median_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, sig_digits=2, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    push!(args, "--sig_digits=" * string(sig_digits))
    return run_tool("median_filter"; args, callback) # returns 1 if error
end
    

"""
    minimum_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Assigns each cell in the output grid the minimum value in a moving window centred on each grid cell in the input raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function minimum_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("minimum_filter"; args, callback) # returns 1 if error
end
    

"""
    olympic_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Performs an olympic smoothing filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function olympic_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("olympic_filter"; args, callback) # returns 1 if error
end
    

"""
    percentile_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, sig_digits=2, callback::Union{Nothing,Function}=nothing)
Performs a percentile filter on an input image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `sig_digits`: Number of significant digits. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function percentile_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, sig_digits=2, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    push!(args, "--sig_digits=" * string(sig_digits))
    return run_tool("percentile_filter"; args, callback) # returns 1 if error
end
    

"""
    prewitt_filter(wbt_info::WhiteboxTools = wbt_info; i, output, clip=0.0, callback::Union{Nothing,Function}=nothing)
Performs a Prewitt edge-detection filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `clip`: Optional amount to clip the distribution tails by, in percent. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function prewitt_filter(wbt_info::WhiteboxTools = wbt_info; i, output, clip=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--clip=" * string(clip))
    return run_tool("prewitt_filter"; args, callback) # returns 1 if error
end
    

"""
    range_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Assigns each cell in the output grid the range of values in a moving window centred on each grid cell in the input raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function range_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("range_filter"; args, callback) # returns 1 if error
end
    

"""
    roberts_cross_filter(wbt_info::WhiteboxTools = wbt_info; i, output, clip=0.0, callback::Union{Nothing,Function}=nothing)
Performs a Robert's cross edge-detection filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `clip`: Optional amount to clip the distribution tails by, in percent. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function roberts_cross_filter(wbt_info::WhiteboxTools = wbt_info; i, output, clip=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--clip=" * string(clip))
    return run_tool("roberts_cross_filter"; args, callback) # returns 1 if error
end
    

"""
    scharr_filter(wbt_info::WhiteboxTools = wbt_info; i, output, clip=0.0, callback::Union{Nothing,Function}=nothing)
Performs a Scharr edge-detection filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `clip`: Optional amount to clip the distribution tails by, in percent. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function scharr_filter(wbt_info::WhiteboxTools = wbt_info; i, output, clip=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--clip=" * string(clip))
    return run_tool("scharr_filter"; args, callback) # returns 1 if error
end
    

"""
    sobel_filter(wbt_info::WhiteboxTools = wbt_info; i, output, variant="3x3", clip=0.0, callback::Union{Nothing,Function}=nothing)
Performs a Sobel edge-detection filter on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `variant`: Optional variant value. Options include 3x3 and 5x5 (default is 3x3). 
- `clip`: Optional amount to clip the distribution tails by, in percent (default is 0.0). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function sobel_filter(wbt_info::WhiteboxTools = wbt_info; i, output, variant="3x3", clip=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--variant=" * string(variant))
    push!(args, "--clip=" * string(clip))
    return run_tool("sobel_filter"; args, callback) # returns 1 if error
end
    

"""
    standard_deviation_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Assigns each cell in the output grid the standard deviation of values in a moving window centred on each grid cell in the input raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function standard_deviation_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("standard_deviation_filter"; args, callback) # returns 1 if error
end
    

"""
    total_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
Performs a total filter on an input image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `filterx`: Size of the filter kernel in the x-direction. 
- `filtery`: Size of the filter kernel in the y-direction. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function total_filter(wbt_info::WhiteboxTools = wbt_info; i, output, filterx=11, filtery=11, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--filterx=" * string(filterx))
    push!(args, "--filtery=" * string(filtery))
    return run_tool("total_filter"; args, callback) # returns 1 if error
end
    

"""
    unsharp_masking(wbt_info::WhiteboxTools = wbt_info; i, output, sigma=0.75, amount=100.0, threshold=0.0, callback::Union{Nothing,Function}=nothing)
An image sharpening technique that enhances edges.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `sigma`: Standard deviation distance in pixels. 
- `amount`: A percentage and controls the magnitude of each overshoot. 
- `threshold`: Controls the minimal brightness change that will be sharpened. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function unsharp_masking(wbt_info::WhiteboxTools = wbt_info; i, output, sigma=0.75, amount=100.0, threshold=0.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--sigma=" * string(sigma))
    push!(args, "--amount=" * string(amount))
    push!(args, "--threshold=" * string(threshold))
    return run_tool("unsharp_masking"; args, callback) # returns 1 if error
end
    

"""
    user_defined_weights_filter(wbt_info::WhiteboxTools = wbt_info; i, weights, output, center="center", normalize=false, callback::Union{Nothing,Function}=nothing)
Performs a user-defined weights filter on an image.
# Arguments
- `i`: Input raster file. 
- `weights`: Input weights file. 
- `output`: Output raster file. 
- `center`: Kernel center cell; options include 'center', 'upper-left', 'upper-right', 'lower-left', 'lower-right'. 
- `normalize`: Normalize kernel weights? This can reduce edge effects and lessen the impact of data gaps (nodata) but is not suited when the kernel weights sum to zero. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function user_defined_weights_filter(wbt_info::WhiteboxTools = wbt_info; i, weights, output, center="center", normalize=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--weights=" * string(weights))
    push!(args, "--output=" * string(output))
    push!(args, "--center=" * string(center))
    if normalize === true
        push!(args, "--normalize")
    end
    return run_tool("user_defined_weights_filter"; args, callback) # returns 1 if error
end
    

############################################
# Image Processing Tools/Image Enhancement #
############################################

"""
    balance_contrast_enhancement(wbt_info::WhiteboxTools = wbt_info; i, output, band_mean=100.0, callback::Union{Nothing,Function}=nothing)
Performs a balance contrast enhancement on a colour-composite image of multispectral data.
# Arguments
- `i`: Input colour composite image file. 
- `output`: Output raster file. 
- `band_mean`: Band mean value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function balance_contrast_enhancement(wbt_info::WhiteboxTools = wbt_info; i, output, band_mean=100.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--band_mean=" * string(band_mean))
    return run_tool("balance_contrast_enhancement"; args, callback) # returns 1 if error
end
    

"""
    correct_vignetting(wbt_info::WhiteboxTools = wbt_info; i, pp, output, focal_length=304.8, image_width=228.6, n=4.0, callback::Union{Nothing,Function}=nothing)
Corrects the darkening of images towards corners.
# Arguments
- `i`: Input raster file. 
- `pp`: Input principal point file. 
- `output`: Output raster file. 
- `focal_length`: Camera focal length, in millimeters. 
- `image_width`: Distance between photograph edges, in millimeters. 
- `n`: The 'n' parameter. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function correct_vignetting(wbt_info::WhiteboxTools = wbt_info; i, pp, output, focal_length=304.8, image_width=228.6, n=4.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--pp=" * string(pp))
    push!(args, "--output=" * string(output))
    push!(args, "--focal_length=" * string(focal_length))
    push!(args, "--image_width=" * string(image_width))
    push!(args, "-n=" * string(n))
    return run_tool("correct_vignetting"; args, callback) # returns 1 if error
end
    

"""
    direct_decorrelation_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, k=0.5, clip=1.0, callback::Union{Nothing,Function}=nothing)
Performs a direct decorrelation stretch enhancement on a colour-composite image of multispectral data.
# Arguments
- `i`: Input colour composite image file. 
- `output`: Output raster file. 
- `k`: Achromatic factor (k) ranges between 0 (no effect) and 1 (full saturation stretch), although typical values range from 0.3 to 0.7. 
- `clip`: Optional percent to clip the upper tail by during the stretch. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function direct_decorrelation_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, k=0.5, clip=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "-k=" * string(k))
    push!(args, "--clip=" * string(clip))
    return run_tool("direct_decorrelation_stretch"; args, callback) # returns 1 if error
end
    

"""
    gamma_correction(wbt_info::WhiteboxTools = wbt_info; i, output, gamma=0.5, callback::Union{Nothing,Function}=nothing)
Performs a gamma correction on an input images.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `gamma`: Gamma value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function gamma_correction(wbt_info::WhiteboxTools = wbt_info; i, output, gamma=0.5, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--gamma=" * string(gamma))
    return run_tool("gamma_correction"; args, callback) # returns 1 if error
end
    

"""
    gaussian_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, num_tones=256, callback::Union{Nothing,Function}=nothing)
Performs a Gaussian contrast stretch on input images.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `num_tones`: Number of tones in the output image. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function gaussian_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, num_tones=256, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--num_tones=" * string(num_tones))
    return run_tool("gaussian_contrast_stretch"; args, callback) # returns 1 if error
end
    

"""
    histogram_equalization(wbt_info::WhiteboxTools = wbt_info; i, output, num_tones=256, callback::Union{Nothing,Function}=nothing)
Performs a histogram equalization contrast enhancement on an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `num_tones`: Number of tones in the output image. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function histogram_equalization(wbt_info::WhiteboxTools = wbt_info; i, output, num_tones=256, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--num_tones=" * string(num_tones))
    return run_tool("histogram_equalization"; args, callback) # returns 1 if error
end
    

"""
    histogram_matching(wbt_info::WhiteboxTools = wbt_info; i, histo_file, output, callback::Union{Nothing,Function}=nothing)
Alters the statistical distribution of a raster image matching it to a specified PDF.
# Arguments
- `i`: Input raster file. 
- `histo_file`: Input reference probability distribution function (pdf) text file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function histogram_matching(wbt_info::WhiteboxTools = wbt_info; i, histo_file, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--histo_file=" * string(histo_file))
    push!(args, "--output=" * string(output))
    return run_tool("histogram_matching"; args, callback) # returns 1 if error
end
    

"""
    histogram_matching_two_images(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
This tool alters the cumulative distribution function of a raster image to that of another image.
# Arguments
- `input1`: Input raster file to modify. 
- `input2`: Input reference raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function histogram_matching_two_images(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("histogram_matching_two_images"; args, callback) # returns 1 if error
end
    

"""
    min_max_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, min_val, max_val, num_tones=256, callback::Union{Nothing,Function}=nothing)
Performs a min-max contrast stretch on an input greytone image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `min_val`: Lower tail clip value. 
- `max_val`: Upper tail clip value. 
- `num_tones`: Number of tones in the output image. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function min_max_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, min_val, max_val, num_tones=256, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--min_val=" * string(min_val))
    push!(args, "--max_val=" * string(max_val))
    push!(args, "--num_tones=" * string(num_tones))
    return run_tool("min_max_contrast_stretch"; args, callback) # returns 1 if error
end
    

"""
    panchromatic_sharpening(wbt_info::WhiteboxTools = wbt_info; pan, output, red=nothing, green=nothing, blue=nothing, composite=nothing, method="brovey", callback::Union{Nothing,Function}=nothing)
Increases the spatial resolution of image data by combining multispectral bands with panchromatic data.
# Arguments
- `red`: Input red band image file. Optionally specified if colour-composite not specified. 
- `green`: Input green band image file. Optionally specified if colour-composite not specified. 
- `blue`: Input blue band image file. Optionally specified if colour-composite not specified. 
- `composite`: Input colour-composite image file. Only used if individual bands are not specified. 
- `pan`: Input panchromatic band file. 
- `output`: Output colour composite file. 
- `method`: Options include 'brovey' (default) and 'ihs'. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function panchromatic_sharpening(wbt_info::WhiteboxTools = wbt_info; pan, output, red=nothing, green=nothing, blue=nothing, composite=nothing, method="brovey", callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(red) === false
        push!(args, "--red=" * string(red))
    end
    if isnothing(green) === false
        push!(args, "--green=" * string(green))
    end
    if isnothing(blue) === false
        push!(args, "--blue=" * string(blue))
    end
    if isnothing(composite) === false
        push!(args, "--composite=" * string(composite))
    end
    push!(args, "--pan=" * string(pan))
    push!(args, "--output=" * string(output))
    push!(args, "--method=" * string(method))
    return run_tool("panchromatic_sharpening"; args, callback) # returns 1 if error
end
    

"""
    percentage_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, clip=1.0, tail="both", num_tones=256, callback::Union{Nothing,Function}=nothing)
Performs a percentage linear contrast stretch on input images.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `clip`: Optional amount to clip the distribution tails by, in percent. 
- `tail`: Specified which tails to clip; options include 'upper', 'lower', and 'both' (default is 'both'). 
- `num_tones`: Number of tones in the output image. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function percentage_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, clip=1.0, tail="both", num_tones=256, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--clip=" * string(clip))
    push!(args, "--tail=" * string(tail))
    push!(args, "--num_tones=" * string(num_tones))
    return run_tool("percentage_contrast_stretch"; args, callback) # returns 1 if error
end
    

"""
    sigmoidal_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, cutoff=0.0, gain=1.0, num_tones=256, callback::Union{Nothing,Function}=nothing)
Performs a sigmoidal contrast stretch on input images.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `cutoff`: Cutoff value between 0.0 and 0.95. 
- `gain`: Gain value. 
- `num_tones`: Number of tones in the output image. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function sigmoidal_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, cutoff=0.0, gain=1.0, num_tones=256, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--cutoff=" * string(cutoff))
    push!(args, "--gain=" * string(gain))
    push!(args, "--num_tones=" * string(num_tones))
    return run_tool("sigmoidal_contrast_stretch"; args, callback) # returns 1 if error
end
    

"""
    standard_deviation_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, stdev=2.0, num_tones=256, callback::Union{Nothing,Function}=nothing)
Performs a standard-deviation contrast stretch on input images.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `stdev`: Standard deviation clip value. 
- `num_tones`: Number of tones in the output image. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function standard_deviation_contrast_stretch(wbt_info::WhiteboxTools = wbt_info; i, output, stdev=2.0, num_tones=256, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--stdev=" * string(stdev))
    push!(args, "--num_tones=" * string(num_tones))
    return run_tool("standard_deviation_contrast_stretch"; args, callback) # returns 1 if error
end
    

###############
# LiDAR Tools #
###############

"""
    ascii_to_las(wbt_info::WhiteboxTools = wbt_info; inputs, pattern, proj=nothing, callback::Union{Nothing,Function}=nothing)
Converts one or more ASCII files containing LiDAR points into LAS files.
# Arguments
- `inputs`: Input LiDAR  ASCII files (.csv). 
- `pattern`: Input field pattern. 
- `proj`: Well-known-text string or EPSG code describing projection. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function ascii_to_las(wbt_info::WhiteboxTools = wbt_info; inputs, pattern, proj=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--pattern=" * string(pattern))
    if isnothing(proj) === false
        push!(args, "--proj=" * string(proj))
    end
    return run_tool("ascii_to_las"; args, callback) # returns 1 if error
end
    

"""
    classify_buildings_in_lidar(wbt_info::WhiteboxTools = wbt_info; i, buildings, output, callback::Union{Nothing,Function}=nothing)
Reclassifies a LiDAR points that lie within vector building footprints.
# Arguments
- `i`: Input LiDAR file. 
- `buildings`: Input vector polygons file. 
- `output`: Output LiDAR file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function classify_buildings_in_lidar(wbt_info::WhiteboxTools = wbt_info; i, buildings, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--buildings=" * string(buildings))
    push!(args, "--output=" * string(output))
    return run_tool("classify_buildings_in_lidar"; args, callback) # returns 1 if error
end
    

"""
    classify_overlap_points(wbt_info::WhiteboxTools = wbt_info; i, output, resolution=2.0, filter=false, callback::Union{Nothing,Function}=nothing)
Classifies or filters LAS points in regions of overlapping flight lines.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `resolution`: The size of the square area used to evaluate nearby points in the LiDAR data. 
- `filter`: Filter out points from overlapping flightlines? If false, overlaps will simply be classified. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function classify_overlap_points(wbt_info::WhiteboxTools = wbt_info; i, output, resolution=2.0, filter=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--resolution=" * string(resolution))
    if filter === true
        push!(args, "--filter")
    end
    return run_tool("classify_overlap_points"; args, callback) # returns 1 if error
end
    

"""
    clip_lidar_to_polygon(wbt_info::WhiteboxTools = wbt_info; i, polygons, output, callback::Union{Nothing,Function}=nothing)
Clips a LiDAR point cloud to a vector polygon or polygons.
# Arguments
- `i`: Input LiDAR file. 
- `polygons`: Input vector polygons file. 
- `output`: Output LiDAR file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function clip_lidar_to_polygon(wbt_info::WhiteboxTools = wbt_info; i, polygons, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--polygons=" * string(polygons))
    push!(args, "--output=" * string(output))
    return run_tool("clip_lidar_to_polygon"; args, callback) # returns 1 if error
end
    

"""
    erase_polygon_from_lidar(wbt_info::WhiteboxTools = wbt_info; i, polygons, output, callback::Union{Nothing,Function}=nothing)
Erases (cuts out) a vector polygon or polygons from a LiDAR point cloud.
# Arguments
- `i`: Input LiDAR file. 
- `polygons`: Input vector polygons file. 
- `output`: Output LiDAR file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function erase_polygon_from_lidar(wbt_info::WhiteboxTools = wbt_info; i, polygons, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--polygons=" * string(polygons))
    push!(args, "--output=" * string(output))
    return run_tool("erase_polygon_from_lidar"; args, callback) # returns 1 if error
end
    

"""
    filter_lidar_classes(wbt_info::WhiteboxTools = wbt_info; i, output, exclude_cls=nothing, callback::Union{Nothing,Function}=nothing)
Removes points in a LAS file with certain specified class values.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `exclude_cls`: Optional exclude classes from interpolation; Valid class values range from 0 to 18, based on LAS specifications. Example, --exclude_cls='3,4,5,6,7,18'. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function filter_lidar_classes(wbt_info::WhiteboxTools = wbt_info; i, output, exclude_cls=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if isnothing(exclude_cls) === false
        push!(args, "--exclude_cls=" * string(exclude_cls))
    end
    return run_tool("filter_lidar_classes"; args, callback) # returns 1 if error
end
    

"""
    filter_lidar_scan_angles(wbt_info::WhiteboxTools = wbt_info; i, output, threshold, callback::Union{Nothing,Function}=nothing)
Removes points in a LAS file with scan angles greater than a threshold.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `threshold`: Scan angle threshold. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function filter_lidar_scan_angles(wbt_info::WhiteboxTools = wbt_info; i, output, threshold, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--threshold=" * string(threshold))
    return run_tool("filter_lidar_scan_angles"; args, callback) # returns 1 if error
end
    

"""
    find_flightline_edge_points(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Identifies points along a flightline's edge in a LAS file.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function find_flightline_edge_points(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("find_flightline_edge_points"; args, callback) # returns 1 if error
end
    

"""
    flightline_overlap(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, resolution=1.0, callback::Union{Nothing,Function}=nothing)
Reads a LiDAR (LAS) point file and outputs a raster containing the number of overlapping flight lines in each grid cell.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output file. 
- `resolution`: Output raster's grid resolution. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function flightline_overlap(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, resolution=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    push!(args, "--resolution=" * string(resolution))
    return run_tool("flightline_overlap"; args, callback) # returns 1 if error
end
    

"""
    height_above_ground(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, callback::Union{Nothing,Function}=nothing)
Normalizes a LiDAR point cloud, providing the height above the nearest ground-classified point.
# Arguments
- `i`: Input LiDAR file (including extension). 
- `output`: Output raster file (including extension). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function height_above_ground(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    return run_tool("height_above_ground"; args, callback) # returns 1 if error
end
    

"""
    las_to_ascii(wbt_info::WhiteboxTools = wbt_info; inputs, callback::Union{Nothing,Function}=nothing)
Converts one or more LAS files into ASCII text files.
# Arguments
- `inputs`: Input LiDAR files. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function las_to_ascii(wbt_info::WhiteboxTools = wbt_info; inputs, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    return run_tool("las_to_ascii"; args, callback) # returns 1 if error
end
    

"""
    las_to_multipoint_shapefile(wbt_info::WhiteboxTools = wbt_info; i=nothing, callback::Union{Nothing,Function}=nothing)
Converts one or more LAS files into MultipointZ vector Shapefiles. When the input parameter is not specified, the tool grids all LAS files contained within the working directory.
# Arguments
- `i`: Input LiDAR file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function las_to_multipoint_shapefile(wbt_info::WhiteboxTools = wbt_info; i=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    return run_tool("las_to_multipoint_shapefile"; args, callback) # returns 1 if error
end
    

"""
    las_to_shapefile(wbt_info::WhiteboxTools = wbt_info; i=nothing, callback::Union{Nothing,Function}=nothing)
Converts one or more LAS files into a vector Shapefile of POINT ShapeType.
# Arguments
- `i`: Input LiDAR file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function las_to_shapefile(wbt_info::WhiteboxTools = wbt_info; i=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    return run_tool("las_to_shapefile"; args, callback) # returns 1 if error
end
    

"""
    las_to_zlidar(wbt_info::WhiteboxTools = wbt_info; inputs=nothing, outdir=nothing, compress="brotli", level=5, callback::Union{Nothing,Function}=nothing)
Converts one or more LAS files into the zlidar compressed LiDAR data format.
# Arguments
- `inputs`: Input LAS files. 
- `outdir`: Output directory into which zlidar files are created. If unspecified, it is assumed to be the same as the inputs. 
- `compress`: Compression method, including 'brotli' and 'deflate'. 
- `level`: Compression level (1-9). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function las_to_zlidar(wbt_info::WhiteboxTools = wbt_info; inputs=nothing, outdir=nothing, compress="brotli", level=5, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(inputs) === false
        push!(args, "--inputs=" * string(inputs))
    end
    if isnothing(outdir) === false
        push!(args, "--outdir=" * string(outdir))
    end
    push!(args, "--compress=" * string(compress))
    push!(args, "--level=" * string(level))
    return run_tool("las_to_zlidar"; args, callback) # returns 1 if error
end
    

"""
    lidar_block_maximum(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, resolution=1.0, callback::Union{Nothing,Function}=nothing)
Creates a block-maximum raster from an input LAS file. When the input/output parameters are not specified, the tool grids all LAS files contained within the working directory.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output file. 
- `resolution`: Output raster's grid resolution. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_block_maximum(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, resolution=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    push!(args, "--resolution=" * string(resolution))
    return run_tool("lidar_block_maximum"; args, callback) # returns 1 if error
end
    

"""
    lidar_block_minimum(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, resolution=1.0, callback::Union{Nothing,Function}=nothing)
Creates a block-minimum raster from an input LAS file. When the input/output parameters are not specified, the tool grids all LAS files contained within the working directory.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output file. 
- `resolution`: Output raster's grid resolution. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_block_minimum(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, resolution=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    push!(args, "--resolution=" * string(resolution))
    return run_tool("lidar_block_minimum"; args, callback) # returns 1 if error
end
    

"""
    lidar_classify_subset(wbt_info::WhiteboxTools = wbt_info; base, subset, output, subset_class, nonsubset_class=nothing, callback::Union{Nothing,Function}=nothing)
Classifies the values in one LiDAR point cloud that correspond with points in a subset cloud.
# Arguments
- `base`: Input base LiDAR file. 
- `subset`: Input subset LiDAR file. 
- `output`: Output LiDAR file. 
- `subset_class`: Subset point class value (must be 0-18; see LAS specifications). 
- `nonsubset_class`: Non-subset point class value (must be 0-18; see LAS specifications). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_classify_subset(wbt_info::WhiteboxTools = wbt_info; base, subset, output, subset_class, nonsubset_class=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--base=" * string(base))
    push!(args, "--subset=" * string(subset))
    push!(args, "--output=" * string(output))
    push!(args, "--subset_class=" * string(subset_class))
    if isnothing(nonsubset_class) === false
        push!(args, "--nonsubset_class=" * string(nonsubset_class))
    end
    return run_tool("lidar_classify_subset"; args, callback) # returns 1 if error
end
    

"""
    lidar_colourize(wbt_info::WhiteboxTools = wbt_info; in_lidar, in_image, output, callback::Union{Nothing,Function}=nothing)
Adds the red-green-blue colour fields of a LiDAR (LAS) file based on an input image.
# Arguments
- `in_lidar`: Input LiDAR file. 
- `in_image`: Input colour image file. 
- `output`: Output LiDAR file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_colourize(wbt_info::WhiteboxTools = wbt_info; in_lidar, in_image, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--in_lidar=" * string(in_lidar))
    push!(args, "--in_image=" * string(in_image))
    push!(args, "--output=" * string(output))
    return run_tool("lidar_colourize"; args, callback) # returns 1 if error
end
    

"""
    lidar_digital_surface_model(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, resolution=1.0, radius=0.5, minz=nothing, maxz=nothing, max_triangle_edge_length=nothing, callback::Union{Nothing,Function}=nothing)
Creates a top-surface digital surface model (DSM) from a LiDAR point cloud.
# Arguments
- `i`: Input LiDAR file (including extension). 
- `output`: Output raster file (including extension). 
- `resolution`: Output raster's grid resolution. 
- `radius`: Search Radius. 
- `minz`: Optional minimum elevation for inclusion in interpolation. 
- `maxz`: Optional maximum elevation for inclusion in interpolation. 
- `max_triangle_edge_length`: Optional maximum triangle edge length; triangles larger than this size will not be gridded. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_digital_surface_model(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, resolution=1.0, radius=0.5, minz=nothing, maxz=nothing, max_triangle_edge_length=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    push!(args, "--resolution=" * string(resolution))
    push!(args, "--radius=" * string(radius))
    if isnothing(minz) === false
        push!(args, "--minz=" * string(minz))
    end
    if isnothing(maxz) === false
        push!(args, "--maxz=" * string(maxz))
    end
    if isnothing(max_triangle_edge_length) === false
        push!(args, "--max_triangle_edge_length=" * string(max_triangle_edge_length))
    end
    return run_tool("lidar_digital_surface_model"; args, callback) # returns 1 if error
end
    

"""
    lidar_elevation_slice(wbt_info::WhiteboxTools = wbt_info; i, output, minz=nothing, maxz=nothing, cls=false, inclassval=2, outclassval=1, callback::Union{Nothing,Function}=nothing)
Outputs all of the points within a LiDAR (LAS) point file that lie between a specified elevation range.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `minz`: Minimum elevation value (optional). 
- `maxz`: Maximum elevation value (optional). 
- `cls`: Optional boolean flag indicating whether points outside the range should be retained in output but reclassified. 
- `inclassval`: Optional parameter specifying the class value assigned to points within the slice. 
- `outclassval`: Optional parameter specifying the class value assigned to points within the slice. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_elevation_slice(wbt_info::WhiteboxTools = wbt_info; i, output, minz=nothing, maxz=nothing, cls=false, inclassval=2, outclassval=1, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if isnothing(minz) === false
        push!(args, "--minz=" * string(minz))
    end
    if isnothing(maxz) === false
        push!(args, "--maxz=" * string(maxz))
    end
    if cls === true
        push!(args, "--class")
    end
    push!(args, "--inclassval=" * string(inclassval))
    push!(args, "--outclassval=" * string(outclassval))
    return run_tool("lidar_elevation_slice"; args, callback) # returns 1 if error
end
    

"""
    lidar_ground_point_filter(wbt_info::WhiteboxTools = wbt_info; i, output, radius=2.0, min_neighbours=0, slope_threshold=45.0, height_threshold=1.0, classify=true, slope_norm=true, height_above_ground=false, callback::Union{Nothing,Function}=nothing)
Identifies ground points within LiDAR dataset using a slope-based method.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `radius`: Search Radius. 
- `min_neighbours`: The minimum number of neighbouring points within search areas. If fewer points than this threshold are identified during the fixed-radius search, a subsequent kNN search is performed to identify the k number of neighbours. 
- `slope_threshold`: Maximum inter-point slope to be considered an off-terrain point. 
- `height_threshold`: Inter-point height difference to be considered an off-terrain point. 
- `classify`: Classify points as ground (2) or off-ground (1). 
- `slope_norm`: Perform initial ground slope normalization?. 
- `height_above_ground`: Transform output to height above average ground elevation?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_ground_point_filter(wbt_info::WhiteboxTools = wbt_info; i, output, radius=2.0, min_neighbours=0, slope_threshold=45.0, height_threshold=1.0, classify=true, slope_norm=true, height_above_ground=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--radius=" * string(radius))
    push!(args, "--min_neighbours=" * string(min_neighbours))
    push!(args, "--slope_threshold=" * string(slope_threshold))
    push!(args, "--height_threshold=" * string(height_threshold))
    if classify === true
        push!(args, "--classify")
    end
    if slope_norm === true
        push!(args, "--slope_norm")
    end
    if height_above_ground === true
        push!(args, "--height_above_ground")
    end
    return run_tool("lidar_ground_point_filter"; args, callback) # returns 1 if error
end
    

"""
    lidar_hex_binning(wbt_info::WhiteboxTools = wbt_info; i, output, width, orientation="horizontal", callback::Union{Nothing,Function}=nothing)
Hex-bins a set of LiDAR points.
# Arguments
- `i`: Input base file. 
- `output`: Output vector polygon file. 
- `width`: The grid cell width. 
- `orientation`: Grid Orientation, 'horizontal' or 'vertical'. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_hex_binning(wbt_info::WhiteboxTools = wbt_info; i, output, width, orientation="horizontal", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--width=" * string(width))
    push!(args, "--orientation=" * string(orientation))
    return run_tool("lidar_hex_binning"; args, callback) # returns 1 if error
end
    

"""
    lidar_hillshade(wbt_info::WhiteboxTools = wbt_info; i, output, azimuth=315.0, altitude=30.0, radius=1.0, callback::Union{Nothing,Function}=nothing)
Calculates a hillshade value for points within a LAS file and stores these data in the RGB field.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output file. 
- `azimuth`: Illumination source azimuth in degrees. 
- `altitude`: Illumination source altitude in degrees. 
- `radius`: Search Radius. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_hillshade(wbt_info::WhiteboxTools = wbt_info; i, output, azimuth=315.0, altitude=30.0, radius=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--azimuth=" * string(azimuth))
    push!(args, "--altitude=" * string(altitude))
    push!(args, "--radius=" * string(radius))
    return run_tool("lidar_hillshade"; args, callback) # returns 1 if error
end
    

"""
    lidar_histogram(wbt_info::WhiteboxTools = wbt_info; i, output, parameter="elevation", clip=1.0, callback::Union{Nothing,Function}=nothing)
Creates a histogram of LiDAR data.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output HTML file (default name will be based on input file if unspecified). 
- `parameter`: Parameter; options are 'elevation' (default), 'intensity', 'scan angle', 'class', 'time'. 
- `clip`: Amount to clip distribution tails (in percent). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_histogram(wbt_info::WhiteboxTools = wbt_info; i, output, parameter="elevation", clip=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--parameter=" * string(parameter))
    push!(args, "--clip=" * string(clip))
    return run_tool("lidar_histogram"; args, callback) # returns 1 if error
end
    

"""
    lidar_idw_interpolation(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, parameter="elevation", returns="all", resolution=1.0, weight=1.0, radius=2.5, exclude_cls=nothing, minz=nothing, maxz=nothing, callback::Union{Nothing,Function}=nothing)
Interpolates LAS files using an inverse-distance weighted (IDW) scheme. When the input/output parameters are not specified, the tool interpolates all LAS files contained within the working directory.
# Arguments
- `i`: Input LiDAR file (including extension). 
- `output`: Output raster file (including extension). 
- `parameter`: Interpolation parameter; options are 'elevation' (default), 'intensity', 'class', 'return_number', 'number_of_returns', 'scan angle', 'rgb', 'user data'. 
- `returns`: Point return types to include; options are 'all' (default), 'last', 'first'. 
- `resolution`: Output raster's grid resolution. 
- `weight`: IDW weight value. 
- `radius`: Search Radius. 
- `exclude_cls`: Optional exclude classes from interpolation; Valid class values range from 0 to 18, based on LAS specifications. Example, --exclude_cls='3,4,5,6,7,18'. 
- `minz`: Optional minimum elevation for inclusion in interpolation. 
- `maxz`: Optional maximum elevation for inclusion in interpolation. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_idw_interpolation(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, parameter="elevation", returns="all", resolution=1.0, weight=1.0, radius=2.5, exclude_cls=nothing, minz=nothing, maxz=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    push!(args, "--parameter=" * string(parameter))
    push!(args, "--returns=" * string(returns))
    push!(args, "--resolution=" * string(resolution))
    push!(args, "--weight=" * string(weight))
    push!(args, "--radius=" * string(radius))
    if isnothing(exclude_cls) === false
        push!(args, "--exclude_cls=" * string(exclude_cls))
    end
    if isnothing(minz) === false
        push!(args, "--minz=" * string(minz))
    end
    if isnothing(maxz) === false
        push!(args, "--maxz=" * string(maxz))
    end
    return run_tool("lidar_idw_interpolation"; args, callback) # returns 1 if error
end
    

"""
    lidar_info(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, vlr=true, geokeys=true, callback::Union{Nothing,Function}=nothing)
Prints information about a LiDAR (LAS) dataset, including header, point return frequency, and classification data and information about the variable length records (VLRs) and geokeys.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output HTML file for summary report. 
- `vlr`: Flag indicating whether or not to print the variable length records (VLRs). 
- `geokeys`: Flag indicating whether or not to print the geokeys. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_info(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, vlr=true, geokeys=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    if vlr === true
        push!(args, "--vlr")
    end
    if geokeys === true
        push!(args, "--geokeys")
    end
    return run_tool("lidar_info"; args, callback) # returns 1 if error
end
    

"""
    lidar_join(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
Joins multiple LiDAR (LAS) files into a single LAS file.
# Arguments
- `inputs`: Input LiDAR files. 
- `output`: Output LiDAR file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_join(wbt_info::WhiteboxTools = wbt_info; inputs, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    return run_tool("lidar_join"; args, callback) # returns 1 if error
end
    

"""
    lidar_kappa_index(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, class_accuracy, resolution=1.0, callback::Union{Nothing,Function}=nothing)
Performs a kappa index of agreement (KIA) analysis on the classifications of two LAS files.
# Arguments
- `input1`: Input LiDAR classification file. 
- `input2`: Input LiDAR reference file. 
- `output`: Output HTML file. 
- `class_accuracy`: Output classification accuracy raster file. 
- `resolution`: Output raster's grid resolution. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_kappa_index(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, class_accuracy, resolution=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    push!(args, "--class_accuracy=" * string(class_accuracy))
    push!(args, "--resolution=" * string(resolution))
    return run_tool("lidar_kappa_index"; args, callback) # returns 1 if error
end
    

"""
    lidar_nearest_neighbour_gridding(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, parameter="elevation", returns="all", resolution=1.0, radius=2.5, exclude_cls=nothing, minz=nothing, maxz=nothing, callback::Union{Nothing,Function}=nothing)
Grids LiDAR files using nearest-neighbour scheme. When the input/output parameters are not specified, the tool grids all LAS files contained within the working directory.
# Arguments
- `i`: Input LiDAR file (including extension). 
- `output`: Output raster file (including extension). 
- `parameter`: Interpolation parameter; options are 'elevation' (default), 'intensity', 'class', 'return_number', 'number_of_returns', 'scan angle', 'rgb', 'user data'. 
- `returns`: Point return types to include; options are 'all' (default), 'last', 'first'. 
- `resolution`: Output raster's grid resolution. 
- `radius`: Search Radius. 
- `exclude_cls`: Optional exclude classes from interpolation; Valid class values range from 0 to 18, based on LAS specifications. Example, --exclude_cls='3,4,5,6,7,18'. 
- `minz`: Optional minimum elevation for inclusion in interpolation. 
- `maxz`: Optional maximum elevation for inclusion in interpolation. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_nearest_neighbour_gridding(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, parameter="elevation", returns="all", resolution=1.0, radius=2.5, exclude_cls=nothing, minz=nothing, maxz=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    push!(args, "--parameter=" * string(parameter))
    push!(args, "--returns=" * string(returns))
    push!(args, "--resolution=" * string(resolution))
    push!(args, "--radius=" * string(radius))
    if isnothing(exclude_cls) === false
        push!(args, "--exclude_cls=" * string(exclude_cls))
    end
    if isnothing(minz) === false
        push!(args, "--minz=" * string(minz))
    end
    if isnothing(maxz) === false
        push!(args, "--maxz=" * string(maxz))
    end
    return run_tool("lidar_nearest_neighbour_gridding"; args, callback) # returns 1 if error
end
    

"""
    lidar_point_density(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, returns="all", resolution=1.0, radius=2.5, exclude_cls=nothing, minz=nothing, maxz=nothing, callback::Union{Nothing,Function}=nothing)
Calculates the spatial pattern of point density for a LiDAR data set. When the input/output parameters are not specified, the tool grids all LAS files contained within the working directory.
# Arguments
- `i`: Input LiDAR file (including extension). 
- `output`: Output raster file (including extension). 
- `returns`: Point return types to include; options are 'all' (default), 'last', 'first'. 
- `resolution`: Output raster's grid resolution. 
- `radius`: Search radius. 
- `exclude_cls`: Optional exclude classes from interpolation; Valid class values range from 0 to 18, based on LAS specifications. Example, --exclude_cls='3,4,5,6,7,18'. 
- `minz`: Optional minimum elevation for inclusion in interpolation. 
- `maxz`: Optional maximum elevation for inclusion in interpolation. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_point_density(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, returns="all", resolution=1.0, radius=2.5, exclude_cls=nothing, minz=nothing, maxz=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    push!(args, "--returns=" * string(returns))
    push!(args, "--resolution=" * string(resolution))
    push!(args, "--radius=" * string(radius))
    if isnothing(exclude_cls) === false
        push!(args, "--exclude_cls=" * string(exclude_cls))
    end
    if isnothing(minz) === false
        push!(args, "--minz=" * string(minz))
    end
    if isnothing(maxz) === false
        push!(args, "--maxz=" * string(maxz))
    end
    return run_tool("lidar_point_density"; args, callback) # returns 1 if error
end
    

"""
    lidar_point_stats(wbt_info::WhiteboxTools = wbt_info; i=nothing, resolution=1.0, num_points=true, num_pulses=false, avg_points_per_pulse=true, z_range=false, intensity_range=false, predom_class=false, callback::Union{Nothing,Function}=nothing)
Creates several rasters summarizing the distribution of LAS point data. When the input/output parameters are not specified, the tool works on all LAS files contained within the working directory.
# Arguments
- `i`: Input LiDAR file. 
- `resolution`: Output raster's grid resolution. 
- `num_points`: Flag indicating whether or not to output the number of points (returns) raster. 
- `num_pulses`: Flag indicating whether or not to output the number of pulses raster. 
- `avg_points_per_pulse`: Flag indicating whether or not to output the average number of points (returns) per pulse raster. 
- `z_range`: Flag indicating whether or not to output the elevation range raster. 
- `intensity_range`: Flag indicating whether or not to output the intensity range raster. 
- `predom_class`: Flag indicating whether or not to output the predominant classification raster. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_point_stats(wbt_info::WhiteboxTools = wbt_info; i=nothing, resolution=1.0, num_points=true, num_pulses=false, avg_points_per_pulse=true, z_range=false, intensity_range=false, predom_class=false, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    push!(args, "--resolution=" * string(resolution))
    if num_points === true
        push!(args, "--num_points")
    end
    if num_pulses === true
        push!(args, "--num_pulses")
    end
    if avg_points_per_pulse === true
        push!(args, "--avg_points_per_pulse")
    end
    if z_range === true
        push!(args, "--z_range")
    end
    if intensity_range === true
        push!(args, "--intensity_range")
    end
    if predom_class === true
        push!(args, "--predom_class")
    end
    return run_tool("lidar_point_stats"; args, callback) # returns 1 if error
end
    

"""
    lidar_ransac_planes(wbt_info::WhiteboxTools = wbt_info; i, output, radius=2.0, num_iter=50, num_samples=5, threshold=0.35, model_size=8, max_slope=80.0, classify=false, last_returns=false, callback::Union{Nothing,Function}=nothing)
Performs a RANSAC analysis to identify points within a LiDAR point cloud that belong to linear planes.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `radius`: Search Radius. 
- `num_iter`: Number of iterations. 
- `num_samples`: Number of sample points on which to build the model. 
- `threshold`: Threshold used to determine inlier points. 
- `model_size`: Acceptable model size. 
- `max_slope`: Maximum planar slope. 
- `classify`: Classify points as ground (2) or off-ground (1). 
- `last_returns`: Only include last- and only-return points. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_ransac_planes(wbt_info::WhiteboxTools = wbt_info; i, output, radius=2.0, num_iter=50, num_samples=5, threshold=0.35, model_size=8, max_slope=80.0, classify=false, last_returns=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--radius=" * string(radius))
    push!(args, "--num_iter=" * string(num_iter))
    push!(args, "--num_samples=" * string(num_samples))
    push!(args, "--threshold=" * string(threshold))
    push!(args, "--model_size=" * string(model_size))
    push!(args, "--max_slope=" * string(max_slope))
    if classify === true
        push!(args, "--classify")
    end
    if last_returns === true
        push!(args, "--last_returns")
    end
    return run_tool("lidar_ransac_planes"; args, callback) # returns 1 if error
end
    

"""
    lidar_rbf_interpolation(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, parameter="elevation", returns="all", resolution=1.0, num_points=20, exclude_cls=nothing, minz=nothing, maxz=nothing, func_type="ThinPlateSpline", poly_order="none", weight=5, callback::Union{Nothing,Function}=nothing)
Interpolates LAS files using a radial basis function (RBF) scheme. When the input/output parameters are not specified, the tool interpolates all LAS files contained within the working directory.
# Arguments
- `i`: Input LiDAR file (including extension). 
- `output`: Output raster file (including extension). 
- `parameter`: Interpolation parameter; options are 'elevation' (default), 'intensity', 'class', 'return_number', 'number_of_returns', 'scan angle', 'rgb', 'user data'. 
- `returns`: Point return types to include; options are 'all' (default), 'last', 'first'. 
- `resolution`: Output raster's grid resolution. 
- `num_points`: Number of points. 
- `exclude_cls`: Optional exclude classes from interpolation; Valid class values range from 0 to 18, based on LAS specifications. Example, --exclude_cls='3,4,5,6,7,18'. 
- `minz`: Optional minimum elevation for inclusion in interpolation. 
- `maxz`: Optional maximum elevation for inclusion in interpolation. 
- `func_type`: Radial basis function type; options are 'ThinPlateSpline' (default), 'PolyHarmonic', 'Gaussian', 'MultiQuadric', 'InverseMultiQuadric'. 
- `poly_order`: Polynomial order; options are 'none' (default), 'constant', 'affine'. 
- `weight`: Weight parameter used in basis function. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_rbf_interpolation(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, parameter="elevation", returns="all", resolution=1.0, num_points=20, exclude_cls=nothing, minz=nothing, maxz=nothing, func_type="ThinPlateSpline", poly_order="none", weight=5, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    push!(args, "--parameter=" * string(parameter))
    push!(args, "--returns=" * string(returns))
    push!(args, "--resolution=" * string(resolution))
    push!(args, "--num_points=" * string(num_points))
    if isnothing(exclude_cls) === false
        push!(args, "--exclude_cls=" * string(exclude_cls))
    end
    if isnothing(minz) === false
        push!(args, "--minz=" * string(minz))
    end
    if isnothing(maxz) === false
        push!(args, "--maxz=" * string(maxz))
    end
    push!(args, "--func_type=" * string(func_type))
    push!(args, "--poly_order=" * string(poly_order))
    push!(args, "--weight=" * string(weight))
    return run_tool("lidar_rbf_interpolation"; args, callback) # returns 1 if error
end
    

"""
    lidar_remove_duplicates(wbt_info::WhiteboxTools = wbt_info; i, output, include_z=false, callback::Union{Nothing,Function}=nothing)
Removes duplicate points from a LiDAR data set.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `include_z`: Include z-values in point comparison?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_remove_duplicates(wbt_info::WhiteboxTools = wbt_info; i, output, include_z=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if include_z === true
        push!(args, "--include_z")
    end
    return run_tool("lidar_remove_duplicates"; args, callback) # returns 1 if error
end
    

"""
    lidar_remove_outliers(wbt_info::WhiteboxTools = wbt_info; i, output, radius=2.0, elev_diff=50.0, use_median=false, classify=true, callback::Union{Nothing,Function}=nothing)
Removes outliers (high and low points) in a LiDAR point cloud.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `radius`: Search Radius. 
- `elev_diff`: Max. elevation difference. 
- `use_median`: Optional flag indicating whether to use the difference from median elevation rather than mean. 
- `classify`: Classify points as ground (2) or off-ground (1). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_remove_outliers(wbt_info::WhiteboxTools = wbt_info; i, output, radius=2.0, elev_diff=50.0, use_median=false, classify=true, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--radius=" * string(radius))
    push!(args, "--elev_diff=" * string(elev_diff))
    if use_median === true
        push!(args, "--use_median")
    end
    if classify === true
        push!(args, "--classify")
    end
    return run_tool("lidar_remove_outliers"; args, callback) # returns 1 if error
end
    

"""
    lidar_rooftop_analysis(wbt_info::WhiteboxTools = wbt_info; buildings, output, i=nothing, radius=2.0, num_iter=50, num_samples=10, threshold=0.15, model_size=15, max_slope=65.0, norm_diff=10.0, azimuth=180.0, altitude=30.0, callback::Union{Nothing,Function}=nothing)
Identifies roof segments in a LiDAR point cloud.
# Arguments
- `i`: Input LiDAR file. 
- `buildings`: Input vector build footprint polygons file. 
- `output`: Output vector polygon file. 
- `radius`: Search Radius. 
- `num_iter`: Number of iterations. 
- `num_samples`: Number of sample points on which to build the model. 
- `threshold`: Threshold used to determine inlier points (in elevation units). 
- `model_size`: Acceptable model size, in points. 
- `max_slope`: Maximum planar slope, in degrees. 
- `norm_diff`: Maximum difference in normal vectors, in degrees. 
- `azimuth`: Illumination source azimuth, in degrees. 
- `altitude`: Illumination source altitude in degrees. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_rooftop_analysis(wbt_info::WhiteboxTools = wbt_info; buildings, output, i=nothing, radius=2.0, num_iter=50, num_samples=10, threshold=0.15, model_size=15, max_slope=65.0, norm_diff=10.0, azimuth=180.0, altitude=30.0, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    push!(args, "--buildings=" * string(buildings))
    push!(args, "--output=" * string(output))
    push!(args, "--radius=" * string(radius))
    push!(args, "--num_iter=" * string(num_iter))
    push!(args, "--num_samples=" * string(num_samples))
    push!(args, "--threshold=" * string(threshold))
    push!(args, "--model_size=" * string(model_size))
    push!(args, "--max_slope=" * string(max_slope))
    push!(args, "--norm_diff=" * string(norm_diff))
    push!(args, "--azimuth=" * string(azimuth))
    push!(args, "--altitude=" * string(altitude))
    return run_tool("lidar_rooftop_analysis"; args, callback) # returns 1 if error
end
    

"""
    lidar_segmentation(wbt_info::WhiteboxTools = wbt_info; i, output, radius=2.0, num_iter=50, num_samples=10, threshold=0.15, model_size=15, max_slope=80.0, norm_diff=10.0, maxzdiff=1.0, classes=false, ground=false, callback::Union{Nothing,Function}=nothing)
Segments a LiDAR point cloud based on differences in the orientation of fitted planar surfaces and point proximity.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `radius`: Search Radius. 
- `num_iter`: Number of iterations. 
- `num_samples`: Number of sample points on which to build the model. 
- `threshold`: Threshold used to determine inlier points. 
- `model_size`: Acceptable model size. 
- `max_slope`: Maximum planar slope. 
- `norm_diff`: Maximum difference in normal vectors, in degrees. 
- `maxzdiff`: Maximum difference in elevation (z units) between neighbouring points of the same segment. 
- `classes`: Segments don't cross class boundaries. 
- `ground`: Classify the largest segment as ground points?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_segmentation(wbt_info::WhiteboxTools = wbt_info; i, output, radius=2.0, num_iter=50, num_samples=10, threshold=0.15, model_size=15, max_slope=80.0, norm_diff=10.0, maxzdiff=1.0, classes=false, ground=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--radius=" * string(radius))
    push!(args, "--num_iter=" * string(num_iter))
    push!(args, "--num_samples=" * string(num_samples))
    push!(args, "--threshold=" * string(threshold))
    push!(args, "--model_size=" * string(model_size))
    push!(args, "--max_slope=" * string(max_slope))
    push!(args, "--norm_diff=" * string(norm_diff))
    push!(args, "--maxzdiff=" * string(maxzdiff))
    if classes === true
        push!(args, "--classes")
    end
    if ground === true
        push!(args, "--ground")
    end
    return run_tool("lidar_segmentation"; args, callback) # returns 1 if error
end
    

"""
    lidar_segmentation_based_filter(wbt_info::WhiteboxTools = wbt_info; i, output, radius=5.0, norm_diff=2.0, maxzdiff=1.0, classify=false, callback::Union{Nothing,Function}=nothing)
Identifies ground points within LiDAR point clouds using a segmentation based approach.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output file. 
- `radius`: Search Radius. 
- `norm_diff`: Maximum difference in normal vectors, in degrees. 
- `maxzdiff`: Maximum difference in elevation (z units) between neighbouring points of the same segment. 
- `classify`: Classify points as ground (2) or off-ground (1). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_segmentation_based_filter(wbt_info::WhiteboxTools = wbt_info; i, output, radius=5.0, norm_diff=2.0, maxzdiff=1.0, classify=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--radius=" * string(radius))
    push!(args, "--norm_diff=" * string(norm_diff))
    push!(args, "--maxzdiff=" * string(maxzdiff))
    if classify === true
        push!(args, "--classify")
    end
    return run_tool("lidar_segmentation_based_filter"; args, callback) # returns 1 if error
end
    

"""
    lidar_shift(wbt_info::WhiteboxTools = wbt_info; i, output, x_shift="", y_shift="", z_shift="", callback::Union{Nothing,Function}=nothing)
Shifts the x,y,z coordinates of a LiDAR file.
# Arguments
- `i`: Name of the input LiDAR points. 
- `output`: Name of the output LiDAR points. 
- `x_shift`: x-shift value, blank for none. 
- `y_shift`: y-shift value, blank for none. 
- `z_shift`: z-shift value, blank for none. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_shift(wbt_info::WhiteboxTools = wbt_info; i, output, x_shift="", y_shift="", z_shift="", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--x_shift=" * string(x_shift))
    push!(args, "--y_shift=" * string(y_shift))
    push!(args, "--z_shift=" * string(z_shift))
    return run_tool("lidar_shift"; args, callback) # returns 1 if error
end
    

"""
    lidar_thin(wbt_info::WhiteboxTools = wbt_info; i, output, resolution=2.0, method="lowest", save_filtered=false, callback::Union{Nothing,Function}=nothing)
Thins a LiDAR point cloud, reducing point density.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `resolution`: The size of the square area used to evaluate nearby points in the LiDAR data. 
- `method`: Point selection method; options are 'first', 'last', 'lowest' (default), 'highest', 'nearest'. 
- `save_filtered`: Save filtered points to separate file?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_thin(wbt_info::WhiteboxTools = wbt_info; i, output, resolution=2.0, method="lowest", save_filtered=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--resolution=" * string(resolution))
    push!(args, "--method=" * string(method))
    if save_filtered === true
        push!(args, "--save_filtered")
    end
    return run_tool("lidar_thin"; args, callback) # returns 1 if error
end
    

"""
    lidar_thin_high_density(wbt_info::WhiteboxTools = wbt_info; i, output, density, resolution=1.0, save_filtered=false, callback::Union{Nothing,Function}=nothing)
Thins points from high density areas within a LiDAR point cloud.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `resolution`: Output raster's grid resolution. 
- `density`: Max. point density (points / m^3). 
- `save_filtered`: Save filtered points to separate file?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_thin_high_density(wbt_info::WhiteboxTools = wbt_info; i, output, density, resolution=1.0, save_filtered=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--resolution=" * string(resolution))
    push!(args, "--density=" * string(density))
    if save_filtered === true
        push!(args, "--save_filtered")
    end
    return run_tool("lidar_thin_high_density"; args, callback) # returns 1 if error
end
    

"""
    lidar_tile(wbt_info::WhiteboxTools = wbt_info; i, width=1000.0, height=1000.0, origin_x=0.0, origin_y=0.0, min_points=2, callback::Union{Nothing,Function}=nothing)
Tiles a LiDAR LAS file into multiple LAS files.
# Arguments
- `i`: Input LiDAR file. 
- `width`: Width of tiles in the X dimension; default 1000.0. 
- `height`: Height of tiles in the Y dimension. 
- `origin_x`: Origin point X coordinate for tile grid. 
- `origin_y`: Origin point Y coordinate for tile grid. 
- `min_points`: Minimum number of points contained in a tile for it to be saved. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_tile(wbt_info::WhiteboxTools = wbt_info; i, width=1000.0, height=1000.0, origin_x=0.0, origin_y=0.0, min_points=2, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--width=" * string(width))
    push!(args, "--height=" * string(height))
    push!(args, "--origin_x=" * string(origin_x))
    push!(args, "--origin_y=" * string(origin_y))
    push!(args, "--min_points=" * string(min_points))
    return run_tool("lidar_tile"; args, callback) # returns 1 if error
end
    

"""
    lidar_tile_footprint(wbt_info::WhiteboxTools = wbt_info; output, i=nothing, hull=false, callback::Union{Nothing,Function}=nothing)
Creates a vector polygon of the convex hull of a LiDAR point cloud. When the input/output parameters are not specified, the tool works with all LAS files contained within the working directory.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output vector polygon file. 
- `hull`: Identify the convex hull around points. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_tile_footprint(wbt_info::WhiteboxTools = wbt_info; output, i=nothing, hull=false, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    push!(args, "--output=" * string(output))
    if hull === true
        push!(args, "--hull")
    end
    return run_tool("lidar_tile_footprint"; args, callback) # returns 1 if error
end
    

"""
    lidar_tin_gridding(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, parameter="elevation", returns="all", resolution=1.0, exclude_cls="7,18", minz=nothing, maxz=nothing, max_triangle_edge_length=nothing, callback::Union{Nothing,Function}=nothing)
Creates a raster grid based on a Delaunay triangular irregular network (TIN) fitted to LiDAR points.
# Arguments
- `i`: Input LiDAR file (including extension). 
- `output`: Output raster file (including extension). 
- `parameter`: Interpolation parameter; options are 'elevation' (default), 'intensity', 'class', 'return_number', 'number_of_returns', 'scan angle', 'rgb', 'user data'. 
- `returns`: Point return types to include; options are 'all' (default), 'last', 'first'. 
- `resolution`: Output raster's grid resolution. 
- `exclude_cls`: Optional exclude classes from interpolation; Valid class values range from 0 to 18, based on LAS specifications. Example, --exclude_cls='3,4,5,6,7,18'. 
- `minz`: Optional minimum elevation for inclusion in interpolation. 
- `maxz`: Optional maximum elevation for inclusion in interpolation. 
- `max_triangle_edge_length`: Optional maximum triangle edge length; triangles larger than this size will not be gridded. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_tin_gridding(wbt_info::WhiteboxTools = wbt_info; i=nothing, output=nothing, parameter="elevation", returns="all", resolution=1.0, exclude_cls="7,18", minz=nothing, maxz=nothing, max_triangle_edge_length=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(i) === false
        push!(args, "--input=" * string(i))
    end
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    push!(args, "--parameter=" * string(parameter))
    push!(args, "--returns=" * string(returns))
    push!(args, "--resolution=" * string(resolution))
    push!(args, "--exclude_cls=" * string(exclude_cls))
    if isnothing(minz) === false
        push!(args, "--minz=" * string(minz))
    end
    if isnothing(maxz) === false
        push!(args, "--maxz=" * string(maxz))
    end
    if isnothing(max_triangle_edge_length) === false
        push!(args, "--max_triangle_edge_length=" * string(max_triangle_edge_length))
    end
    return run_tool("lidar_tin_gridding"; args, callback) # returns 1 if error
end
    

"""
    lidar_tophat_transform(wbt_info::WhiteboxTools = wbt_info; i, output, radius=1.0, callback::Union{Nothing,Function}=nothing)
Performs a white top-hat transform on a Lidar dataset; as an estimate of height above ground, this is useful for modelling the vegetation canopy.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `radius`: Search Radius. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function lidar_tophat_transform(wbt_info::WhiteboxTools = wbt_info; i, output, radius=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--radius=" * string(radius))
    return run_tool("lidar_tophat_transform"; args, callback) # returns 1 if error
end
    

"""
    normal_vectors(wbt_info::WhiteboxTools = wbt_info; i, output, radius=1.0, callback::Union{Nothing,Function}=nothing)
Calculates normal vectors for points within a LAS file and stores these data (XYZ vector components) in the RGB field.
# Arguments
- `i`: Input LiDAR file. 
- `output`: Output LiDAR file. 
- `radius`: Search Radius. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function normal_vectors(wbt_info::WhiteboxTools = wbt_info; i, output, radius=1.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--radius=" * string(radius))
    return run_tool("normal_vectors"; args, callback) # returns 1 if error
end
    

"""
    select_tiles_by_polygon(wbt_info::WhiteboxTools = wbt_info; indir, outdir, polygons, callback::Union{Nothing,Function}=nothing)
Copies LiDAR tiles overlapping with a polygon into an output directory.
# Arguments
- `indir`: Input LAS file source directory. 
- `outdir`: Output directory into which LAS files within the polygon are copied. 
- `polygons`: Input vector polygons file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function select_tiles_by_polygon(wbt_info::WhiteboxTools = wbt_info; indir, outdir, polygons, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--indir=" * string(indir))
    push!(args, "--outdir=" * string(outdir))
    push!(args, "--polygons=" * string(polygons))
    return run_tool("select_tiles_by_polygon"; args, callback) # returns 1 if error
end
    

"""
    zlidar_to_las(wbt_info::WhiteboxTools = wbt_info; inputs=nothing, outdir=nothing, callback::Union{Nothing,Function}=nothing)
Converts one or more zlidar files into the LAS data format.
# Arguments
- `inputs`: Input ZLidar files. 
- `outdir`: Output directory into which zlidar files are created. If unspecified, it is assumed to be the same as the inputs. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function zlidar_to_las(wbt_info::WhiteboxTools = wbt_info; inputs=nothing, outdir=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    if isnothing(inputs) === false
        push!(args, "--inputs=" * string(inputs))
    end
    if isnothing(outdir) === false
        push!(args, "--outdir=" * string(outdir))
    end
    return run_tool("zlidar_to_las"; args, callback) # returns 1 if error
end
    

####################
# Machine Learning #
####################

"""
    k_means_clustering(wbt_info::WhiteboxTools = wbt_info; inputs, output, classes, out_html=nothing, max_iterations=10, class_change=2.0, initialize="diagonal", min_class_size=10, callback::Union{Nothing,Function}=nothing)
Performs a k-means clustering operation on a multi-spectral dataset.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `out_html`: Output HTML report file. 
- `classes`: Number of classes. 
- `max_iterations`: Maximum number of iterations. 
- `class_change`: Minimum percent of cells changed between iterations before completion. 
- `initialize`: How to initialize cluster centres?. 
- `min_class_size`: Minimum class size, in pixels. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function k_means_clustering(wbt_info::WhiteboxTools = wbt_info; inputs, output, classes, out_html=nothing, max_iterations=10, class_change=2.0, initialize="diagonal", min_class_size=10, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    if isnothing(out_html) === false
        push!(args, "--out_html=" * string(out_html))
    end
    push!(args, "--classes=" * string(classes))
    push!(args, "--max_iterations=" * string(max_iterations))
    push!(args, "--class_change=" * string(class_change))
    push!(args, "--initialize=" * string(initialize))
    push!(args, "--min_class_size=" * string(min_class_size))
    return run_tool("k_means_clustering"; args, callback) # returns 1 if error
end
    

"""
    modified_k_means_clustering(wbt_info::WhiteboxTools = wbt_info; inputs, output, out_html=nothing, start_clusters=1000, merge_dist=nothing, max_iterations=10, class_change=2.0, callback::Union{Nothing,Function}=nothing)
Performs a modified k-means clustering operation on a multi-spectral dataset.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output raster file. 
- `out_html`: Output HTML report file. 
- `start_clusters`: Initial number of clusters. 
- `merge_dist`: Cluster merger distance. 
- `max_iterations`: Maximum number of iterations. 
- `class_change`: Minimum percent of cells changed between iterations before completion. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function modified_k_means_clustering(wbt_info::WhiteboxTools = wbt_info; inputs, output, out_html=nothing, start_clusters=1000, merge_dist=nothing, max_iterations=10, class_change=2.0, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    if isnothing(out_html) === false
        push!(args, "--out_html=" * string(out_html))
    end
    push!(args, "--start_clusters=" * string(start_clusters))
    if isnothing(merge_dist) === false
        push!(args, "--merge_dist=" * string(merge_dist))
    end
    push!(args, "--max_iterations=" * string(max_iterations))
    push!(args, "--class_change=" * string(class_change))
    return run_tool("modified_k_means_clustering"; args, callback) # returns 1 if error
end
    

########################
# Math and Stats Tools #
########################

"""
    And(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a logical AND operator on two Boolean raster images.
# Arguments
- `input1`: Input raster file. 
- `input2`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function And(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("and"; args, callback) # returns 1 if error
end
    

"""
    Not(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a logical NOT operator on two Boolean raster images.
# Arguments
- `input1`: Input raster file. 
- `input2`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function Not(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("not"; args, callback) # returns 1 if error
end
    

"""
    Or(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a logical OR operator on two Boolean raster images.
# Arguments
- `input1`: Input raster file. 
- `input2`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function Or(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("or"; args, callback) # returns 1 if error
end
    

"""
    absolute_value(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Calculates the absolute value of every cell in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function absolute_value(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("absolute_value"; args, callback) # returns 1 if error
end
    

"""
    add(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs an addition operation on two rasters or a raster and a constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function add(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("add"; args, callback) # returns 1 if error
end
    

"""
    anova(wbt_info::WhiteboxTools = wbt_info; i, features, output, callback::Union{Nothing,Function}=nothing)
Performs an analysis of variance (ANOVA) test on a raster dataset.
# Arguments
- `i`: Input raster file. 
- `features`: Feature definition (or class) raster. 
- `output`: Output HTML file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function anova(wbt_info::WhiteboxTools = wbt_info; i, features, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--features=" * string(features))
    push!(args, "--output=" * string(output))
    return run_tool("anova"; args, callback) # returns 1 if error
end
    

"""
    arc_cos(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the inverse cosine (arccos) of each values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function arc_cos(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("arc_cos"; args, callback) # returns 1 if error
end
    

"""
    arc_sin(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the inverse sine (arcsin) of each values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function arc_sin(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("arc_sin"; args, callback) # returns 1 if error
end
    

"""
    arc_tan(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the inverse tangent (arctan) of each values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function arc_tan(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("arc_tan"; args, callback) # returns 1 if error
end
    

"""
    arcosh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the inverse hyperbolic cosine (arcosh) of each values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function arcosh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("arcosh"; args, callback) # returns 1 if error
end
    

"""
    arsinh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the inverse hyperbolic sine (arsinh) of each values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function arsinh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("arsinh"; args, callback) # returns 1 if error
end
    

"""
    artanh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the inverse hyperbolic tangent (arctanh) of each values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function artanh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("artanh"; args, callback) # returns 1 if error
end
    

"""
    atan2(wbt_info::WhiteboxTools = wbt_info; input_y, input_x, output, callback::Union{Nothing,Function}=nothing)
Returns the 2-argument inverse tangent (atan2).
# Arguments
- `input_y`: Input y raster file or constant value (rise). 
- `input_x`: Input x raster file or constant value (run). 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function atan2(wbt_info::WhiteboxTools = wbt_info; input_y, input_x, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input_y=" * string(input_y))
    push!(args, "--input_x=" * string(input_x))
    push!(args, "--output=" * string(output))
    return run_tool("atan2"; args, callback) # returns 1 if error
end
    

"""
    attribute_correlation(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, callback::Union{Nothing,Function}=nothing)
Performs a correlation analysis on attribute fields from a vector database.
# Arguments
- `i`: Input vector file. 
- `output`: Output HTML file (default name will be based on input file if unspecified). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function attribute_correlation(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    return run_tool("attribute_correlation"; args, callback) # returns 1 if error
end
    

"""
    attribute_correlation_neighbourhood_analysis(wbt_info::WhiteboxTools = wbt_info; i, field1, field2, radius=nothing, min_points=nothing, stat="pearson", callback::Union{Nothing,Function}=nothing)
Performs a correlation on two input vector attributes within a neighbourhood search windows.
# Arguments
- `i`: Input vector file. 
- `field1`: First input field name (dependent variable) in attribute table. 
- `field2`: Second input field name (independent variable) in attribute table. 
- `radius`: Search Radius (in map units). 
- `min_points`: Minimum number of points. 
- `stat`: Correlation type; one of 'pearson' (default) and 'spearman'. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function attribute_correlation_neighbourhood_analysis(wbt_info::WhiteboxTools = wbt_info; i, field1, field2, radius=nothing, min_points=nothing, stat="pearson", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--field1=" * string(field1))
    push!(args, "--field2=" * string(field2))
    if isnothing(radius) === false
        push!(args, "--radius=" * string(radius))
    end
    if isnothing(min_points) === false
        push!(args, "--min_points=" * string(min_points))
    end
    push!(args, "--stat=" * string(stat))
    return run_tool("attribute_correlation_neighbourhood_analysis"; args, callback) # returns 1 if error
end
    

"""
    attribute_histogram(wbt_info::WhiteboxTools = wbt_info; i, field, output, callback::Union{Nothing,Function}=nothing)
Creates a histogram for the field values of a vector's attribute table.
# Arguments
- `i`: Input raster file. 
- `field`: Input field name in attribute table. 
- `output`: Output HTML file (default name will be based on input file if unspecified). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function attribute_histogram(wbt_info::WhiteboxTools = wbt_info; i, field, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--field=" * string(field))
    push!(args, "--output=" * string(output))
    return run_tool("attribute_histogram"; args, callback) # returns 1 if error
end
    

"""
    attribute_scattergram(wbt_info::WhiteboxTools = wbt_info; i, fieldx, fieldy, output, trendline=false, callback::Union{Nothing,Function}=nothing)
Creates a scattergram for two field values of a vector's attribute table.
# Arguments
- `i`: Input raster file. 
- `fieldx`: Input field name in attribute table for the x-axis. 
- `fieldy`: Input field name in attribute table for the y-axis. 
- `output`: Output HTML file (default name will be based on input file if unspecified). 
- `trendline`: Draw the trendline. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function attribute_scattergram(wbt_info::WhiteboxTools = wbt_info; i, fieldx, fieldy, output, trendline=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--fieldx=" * string(fieldx))
    push!(args, "--fieldy=" * string(fieldy))
    push!(args, "--output=" * string(output))
    if trendline === true
        push!(args, "--trendline")
    end
    return run_tool("attribute_scattergram"; args, callback) # returns 1 if error
end
    

"""
    ceil(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the smallest (closest to negative infinity) value that is greater than or equal to the values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function ceil(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("ceil"; args, callback) # returns 1 if error
end
    

"""
    conditional_evaluation(wbt_info::WhiteboxTools = wbt_info; i, output, statement="", true=nothing, false=nothing, callback::Union{Nothing,Function}=nothing)
This tool performs a conditional evaluation (if-then-else) operation on a raster.
# Arguments
- `i`: Name of the input raster file. 
- `statement`: Conditional statement e.g. value > 35.0. This statement must be a valid Rust statement. 
- `True`: Value where condition evaluates TRUE (input raster or constant value). 
- `False`: Value where condition evaluates FALSE (input raster or constant value). 
- `output`: Name of the output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function conditional_evaluation(wbt_info::WhiteboxTools = wbt_info; i, output, statement="", True=nothing, False=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--statement=" * string(statement))
    if isnothing(True) === false
        push!(args, "--true=" * string(True))
    end
    if isnothing(False) === false
        push!(args, "--false=" * string(False))
    end
    push!(args, "--output=" * string(output))
    return run_tool("conditional_evaluation"; args, callback) # returns 1 if error
end
    

"""
    cos(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the cosine (cos) of each values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function cos(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("cos"; args, callback) # returns 1 if error
end
    

"""
    cosh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the hyperbolic cosine (cosh) of each values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function cosh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("cosh"; args, callback) # returns 1 if error
end
    

"""
    crispness_index(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, callback::Union{Nothing,Function}=nothing)
Calculates the Crispness Index, which is used to quantify how crisp (or conversely how fuzzy) a probability image is.
# Arguments
- `i`: Input raster file. 
- `output`: Optional output html file (default name will be based on input file if unspecified). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function crispness_index(wbt_info::WhiteboxTools = wbt_info; i, output=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    return run_tool("crispness_index"; args, callback) # returns 1 if error
end
    

"""
    cross_tabulation(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a cross-tabulation on two categorical images.
# Arguments
- `input1`: Input raster file 1. 
- `input2`: Input raster file 1. 
- `output`: Output HTML file (default name will be based on input file if unspecified). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function cross_tabulation(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("cross_tabulation"; args, callback) # returns 1 if error
end
    

"""
    cumulative_distribution(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Converts a raster image to its cumulative distribution function.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function cumulative_distribution(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("cumulative_distribution"; args, callback) # returns 1 if error
end
    

"""
    decrement(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Decreases the values of each grid cell in an input raster by 1.0 (see also InPlaceSubtract).
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function decrement(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("decrement"; args, callback) # returns 1 if error
end
    

"""
    divide(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a division operation on two rasters or a raster and a constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function divide(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("divide"; args, callback) # returns 1 if error
end
    

"""
    equal_to(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a equal-to comparison operation on two rasters or a raster and a constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function equal_to(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("equal_to"; args, callback) # returns 1 if error
end
    

"""
    exp(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the exponential (base e) of values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function exp(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("exp"; args, callback) # returns 1 if error
end
    

"""
    exp2(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the exponential (base 2) of values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function exp2(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("exp2"; args, callback) # returns 1 if error
end
    

"""
    floor(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the largest (closest to positive infinity) value that is less than or equal to the values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function floor(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("floor"; args, callback) # returns 1 if error
end
    

"""
    greater_than(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, incl_equals=false, callback::Union{Nothing,Function}=nothing)
Performs a greater-than comparison operation on two rasters or a raster and a constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `incl_equals`: Perform a greater-than-or-equal-to operation. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function greater_than(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, incl_equals=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    if incl_equals === true
        push!(args, "--incl_equals")
    end
    return run_tool("greater_than"; args, callback) # returns 1 if error
end
    

"""
    image_autocorrelation(wbt_info::WhiteboxTools = wbt_info; inputs, output, contiguity="Rook", callback::Union{Nothing,Function}=nothing)
Performs Moran's I analysis on two or more input images.
# Arguments
- `inputs`: Input raster files. 
- `contiguity`: Contiguity type. 
- `output`: Output HTML file (default name will be based on input file if unspecified). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function image_autocorrelation(wbt_info::WhiteboxTools = wbt_info; inputs, output, contiguity="Rook", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--contiguity=" * string(contiguity))
    push!(args, "--output=" * string(output))
    return run_tool("image_autocorrelation"; args, callback) # returns 1 if error
end
    

"""
    image_correlation(wbt_info::WhiteboxTools = wbt_info; inputs, output=nothing, callback::Union{Nothing,Function}=nothing)
Performs image correlation on two or more input images.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output HTML file (default name will be based on input file if unspecified). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function image_correlation(wbt_info::WhiteboxTools = wbt_info; inputs, output=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    return run_tool("image_correlation"; args, callback) # returns 1 if error
end
    

"""
    image_correlation_neighbourhood_analysis(wbt_info::WhiteboxTools = wbt_info; input1, input2, output1, output2, filter=11, stat="pearson", callback::Union{Nothing,Function}=nothing)
Performs image correlation on two input images neighbourhood search windows.
# Arguments
- `input1`: Input raster file. 
- `input2`: Input raster file. 
- `output1`: Output correlation (r-value or rho) raster file. 
- `output2`: Output significance (p-value) raster file. 
- `filter`: Size of the filter kernel. 
- `stat`: Correlation type; one of 'pearson' (default) and 'spearman'. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function image_correlation_neighbourhood_analysis(wbt_info::WhiteboxTools = wbt_info; input1, input2, output1, output2, filter=11, stat="pearson", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output1=" * string(output1))
    push!(args, "--output2=" * string(output2))
    push!(args, "--filter=" * string(filter))
    push!(args, "--stat=" * string(stat))
    return run_tool("image_correlation_neighbourhood_analysis"; args, callback) # returns 1 if error
end
    

"""
    image_regression(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, out_residuals=nothing, standardize=false, scattergram=false, num_samples=1000, callback::Union{Nothing,Function}=nothing)
Performs image regression analysis on two input images.
# Arguments
- `input1`: Input raster file (independent variable, X). 
- `input2`: Input raster file (dependent variable, Y). 
- `output`: Output HTML file for regression summary report. 
- `out_residuals`: Output raster regression residual file. 
- `standardize`: Optional flag indicating whether to standardize the residuals map. 
- `scattergram`: Optional flag indicating whether to output a scattergram. 
- `num_samples`: Number of samples used to create scattergram. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function image_regression(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, out_residuals=nothing, standardize=false, scattergram=false, num_samples=1000, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    if isnothing(out_residuals) === false
        push!(args, "--out_residuals=" * string(out_residuals))
    end
    if standardize === true
        push!(args, "--standardize")
    end
    if scattergram === true
        push!(args, "--scattergram")
    end
    push!(args, "--num_samples=" * string(num_samples))
    return run_tool("image_regression"; args, callback) # returns 1 if error
end
    

"""
    in_place_add(wbt_info::WhiteboxTools = wbt_info; input1, input2, callback::Union{Nothing,Function}=nothing)
Performs an in-place addition operation (input1 += input2).
# Arguments
- `input1`: Input raster file. 
- `input2`: Input raster file or constant value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function in_place_add(wbt_info::WhiteboxTools = wbt_info; input1, input2, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    return run_tool("in_place_add"; args, callback) # returns 1 if error
end
    

"""
    in_place_divide(wbt_info::WhiteboxTools = wbt_info; input1, input2, callback::Union{Nothing,Function}=nothing)
Performs an in-place division operation (input1 /= input2).
# Arguments
- `input1`: Input raster file. 
- `input2`: Input raster file or constant value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function in_place_divide(wbt_info::WhiteboxTools = wbt_info; input1, input2, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    return run_tool("in_place_divide"; args, callback) # returns 1 if error
end
    

"""
    in_place_multiply(wbt_info::WhiteboxTools = wbt_info; input1, input2, callback::Union{Nothing,Function}=nothing)
Performs an in-place multiplication operation (input1 *= input2).
# Arguments
- `input1`: Input raster file. 
- `input2`: Input raster file or constant value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function in_place_multiply(wbt_info::WhiteboxTools = wbt_info; input1, input2, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    return run_tool("in_place_multiply"; args, callback) # returns 1 if error
end
    

"""
    in_place_subtract(wbt_info::WhiteboxTools = wbt_info; input1, input2, callback::Union{Nothing,Function}=nothing)
Performs an in-place subtraction operation (input1 -= input2).
# Arguments
- `input1`: Input raster file. 
- `input2`: Input raster file or constant value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function in_place_subtract(wbt_info::WhiteboxTools = wbt_info; input1, input2, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    return run_tool("in_place_subtract"; args, callback) # returns 1 if error
end
    

"""
    increment(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Increases the values of each grid cell in an input raster by 1.0. (see also InPlaceAdd).
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function increment(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("increment"; args, callback) # returns 1 if error
end
    

"""
    integer_division(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs an integer division operation on two rasters or a raster and a constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function integer_division(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("integer_division"; args, callback) # returns 1 if error
end
    

"""
    is_no_data(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Identifies NoData valued pixels in an image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function is_no_data(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("is_no_data"; args, callback) # returns 1 if error
end
    

"""
    kappa_index(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a kappa index of agreement (KIA) analysis on two categorical raster files.
# Arguments
- `input1`: Input classification raster file. 
- `input2`: Input reference raster file. 
- `output`: Output HTML file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function kappa_index(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("kappa_index"; args, callback) # returns 1 if error
end
    

"""
    ks_test_for_normality(wbt_info::WhiteboxTools = wbt_info; i, output, num_samples=nothing, callback::Union{Nothing,Function}=nothing)
Evaluates whether the values in a raster are normally distributed.
# Arguments
- `i`: Input raster file. 
- `output`: Output HTML file. 
- `num_samples`: Number of samples. Leave blank to use whole image. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function ks_test_for_normality(wbt_info::WhiteboxTools = wbt_info; i, output, num_samples=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if isnothing(num_samples) === false
        push!(args, "--num_samples=" * string(num_samples))
    end
    return run_tool("ks_test_for_normality"; args, callback) # returns 1 if error
end
    

"""
    less_than(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, incl_equals=false, callback::Union{Nothing,Function}=nothing)
Performs a less-than comparison operation on two rasters or a raster and a constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `incl_equals`: Perform a less-than-or-equal-to operation. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function less_than(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, incl_equals=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    if incl_equals === true
        push!(args, "--incl_equals")
    end
    return run_tool("less_than"; args, callback) # returns 1 if error
end
    

"""
    list_unique_values(wbt_info::WhiteboxTools = wbt_info; i, field, output, callback::Union{Nothing,Function}=nothing)
Lists the unique values contained in a field within a vector's attribute table.
# Arguments
- `i`: Input raster file. 
- `field`: Input field name in attribute table. 
- `output`: Output HTML file (default name will be based on input file if unspecified). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function list_unique_values(wbt_info::WhiteboxTools = wbt_info; i, field, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--field=" * string(field))
    push!(args, "--output=" * string(output))
    return run_tool("list_unique_values"; args, callback) # returns 1 if error
end
    

"""
    ln(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the natural logarithm of values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function ln(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("ln"; args, callback) # returns 1 if error
end
    

"""
    log10(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the base-10 logarithm of values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function log10(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("log10"; args, callback) # returns 1 if error
end
    

"""
    log2(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the base-2 logarithm of values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function log2(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("log2"; args, callback) # returns 1 if error
end
    

"""
    max(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a MAX operation on two rasters or a raster and a constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function max(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("max"; args, callback) # returns 1 if error
end
    

"""
    min(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a MIN operation on two rasters or a raster and a constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function min(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("min"; args, callback) # returns 1 if error
end
    

"""
    modulo(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a modulo operation on two rasters or a raster and a constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function modulo(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("modulo"; args, callback) # returns 1 if error
end
    

"""
    multiply(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a multiplication operation on two rasters or a raster and a constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function multiply(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("multiply"; args, callback) # returns 1 if error
end
    

"""
    negate(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Changes the sign of values in a raster or the 0-1 values of a Boolean raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function negate(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("negate"; args, callback) # returns 1 if error
end
    

"""
    not_equal_to(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a not-equal-to comparison operation on two rasters or a raster and a constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function not_equal_to(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("not_equal_to"; args, callback) # returns 1 if error
end
    

"""
    paired_sample_t_test(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, num_samples=nothing, callback::Union{Nothing,Function}=nothing)
Performs a 2-sample K-S test for significant differences on two input rasters.
# Arguments
- `input1`: First input raster file. 
- `input2`: Second input raster file. 
- `output`: Output HTML file. 
- `num_samples`: Number of samples. Leave blank to use whole image. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function paired_sample_t_test(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, num_samples=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    if isnothing(num_samples) === false
        push!(args, "--num_samples=" * string(num_samples))
    end
    return run_tool("paired_sample_t_test"; args, callback) # returns 1 if error
end
    

"""
    power(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Raises the values in grid cells of one rasters, or a constant value, by values in another raster or constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function power(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("power"; args, callback) # returns 1 if error
end
    

"""
    principal_component_analysis(wbt_info::WhiteboxTools = wbt_info; inputs, output, num_comp=nothing, standardized=false, callback::Union{Nothing,Function}=nothing)
Performs a principal component analysis (PCA) on a multi-spectral dataset.
# Arguments
- `inputs`: Input raster files. 
- `output`: Output HTML report file. 
- `num_comp`: Number of component images to output; <= to num. input images. 
- `standardized`: Perform standardized PCA?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function principal_component_analysis(wbt_info::WhiteboxTools = wbt_info; inputs, output, num_comp=nothing, standardized=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--inputs=" * string(inputs))
    push!(args, "--output=" * string(output))
    if isnothing(num_comp) === false
        push!(args, "--num_comp=" * string(num_comp))
    end
    if standardized === true
        push!(args, "--standardized")
    end
    return run_tool("principal_component_analysis"; args, callback) # returns 1 if error
end
    

"""
    quantiles(wbt_info::WhiteboxTools = wbt_info; i, output, num_quantiles=5, callback::Union{Nothing,Function}=nothing)
Transforms raster values into quantiles.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `num_quantiles`: Number of quantiles. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function quantiles(wbt_info::WhiteboxTools = wbt_info; i, output, num_quantiles=5, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--num_quantiles=" * string(num_quantiles))
    return run_tool("quantiles"; args, callback) # returns 1 if error
end
    

"""
    random_field(wbt_info::WhiteboxTools = wbt_info; base, output, callback::Union{Nothing,Function}=nothing)
Creates an image containing random values.
# Arguments
- `base`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function random_field(wbt_info::WhiteboxTools = wbt_info; base, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--base=" * string(base))
    push!(args, "--output=" * string(output))
    return run_tool("random_field"; args, callback) # returns 1 if error
end
    

"""
    random_sample(wbt_info::WhiteboxTools = wbt_info; base, output, num_samples=1000, callback::Union{Nothing,Function}=nothing)
Creates an image containing randomly located sample grid cells with unique IDs.
# Arguments
- `base`: Input raster file. 
- `output`: Output raster file. 
- `num_samples`: Number of samples. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function random_sample(wbt_info::WhiteboxTools = wbt_info; base, output, num_samples=1000, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--base=" * string(base))
    push!(args, "--output=" * string(output))
    push!(args, "--num_samples=" * string(num_samples))
    return run_tool("random_sample"; args, callback) # returns 1 if error
end
    

"""
    raster_calculator(wbt_info::WhiteboxTools = wbt_info; output, statement="", callback::Union{Nothing,Function}=nothing)
This tool performs a complex mathematical operations on one or more input raster images on a cell-to-cell basis.
# Arguments
- `statement`: Statement e.g. cos("raster1") * 35.0 + "raster2". This statement must be a valid Rust statement. 
- `output`: Name of the output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function raster_calculator(wbt_info::WhiteboxTools = wbt_info; output, statement="", callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--statement=" * string(statement))
    push!(args, "--output=" * string(output))
    return run_tool("raster_calculator"; args, callback) # returns 1 if error
end
    

"""
    raster_histogram(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Creates a histogram from raster values.
# Arguments
- `i`: Input raster file. 
- `output`: Output HTML file (default name will be based on input file if unspecified). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function raster_histogram(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("raster_histogram"; args, callback) # returns 1 if error
end
    

"""
    raster_summary_stats(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
Measures a rasters min, max, average, standard deviation, num. non-nodata cells, and total.
# Arguments
- `i`: Input raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function raster_summary_stats(wbt_info::WhiteboxTools = wbt_info; i, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    return run_tool("raster_summary_stats"; args, callback) # returns 1 if error
end
    

"""
    reciprocal(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the reciprocal (i.e. 1 / z) of values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function reciprocal(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("reciprocal"; args, callback) # returns 1 if error
end
    

"""
    rescale_value_range(wbt_info::WhiteboxTools = wbt_info; i, output, out_min_val, out_max_val, clip_min=nothing, clip_max=nothing, callback::Union{Nothing,Function}=nothing)
Performs a min-max contrast stretch on an input greytone image.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `out_min_val`: New minimum value in output image. 
- `out_max_val`: New maximum value in output image. 
- `clip_min`: Optional lower tail clip value. 
- `clip_max`: Optional upper tail clip value. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function rescale_value_range(wbt_info::WhiteboxTools = wbt_info; i, output, out_min_val, out_max_val, clip_min=nothing, clip_max=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--out_min_val=" * string(out_min_val))
    push!(args, "--out_max_val=" * string(out_max_val))
    if isnothing(clip_min) === false
        push!(args, "--clip_min=" * string(clip_min))
    end
    if isnothing(clip_max) === false
        push!(args, "--clip_max=" * string(clip_max))
    end
    return run_tool("rescale_value_range"; args, callback) # returns 1 if error
end
    

"""
    root_mean_square_error(wbt_info::WhiteboxTools = wbt_info; i, base, callback::Union{Nothing,Function}=nothing)
Calculates the RMSE and other accuracy statistics.
# Arguments
- `i`: Input raster file. 
- `base`: Input base raster file used for comparison. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function root_mean_square_error(wbt_info::WhiteboxTools = wbt_info; i, base, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--base=" * string(base))
    return run_tool("root_mean_square_error"; args, callback) # returns 1 if error
end
    

"""
    round(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Rounds the values in an input raster to the nearest integer value.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function round(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("round"; args, callback) # returns 1 if error
end
    

"""
    sin(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the sine (sin) of each values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function sin(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("sin"; args, callback) # returns 1 if error
end
    

"""
    sinh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the hyperbolic sine (sinh) of each values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function sinh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("sinh"; args, callback) # returns 1 if error
end
    

"""
    square(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Squares the values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function square(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("square"; args, callback) # returns 1 if error
end
    

"""
    square_root(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the square root of the values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function square_root(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("square_root"; args, callback) # returns 1 if error
end
    

"""
    subtract(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a differencing operation on two rasters or a raster and a constant value.
# Arguments
- `input1`: Input raster file or constant value. 
- `input2`: Input raster file or constant value. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function subtract(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("subtract"; args, callback) # returns 1 if error
end
    

"""
    tan(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the tangent (tan) of each values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function tan(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("tan"; args, callback) # returns 1 if error
end
    

"""
    tanh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Returns the hyperbolic tangent (tanh) of each values in a raster.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function tanh(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("tanh"; args, callback) # returns 1 if error
end
    

"""
    to_degrees(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Converts a raster from radians to degrees.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function to_degrees(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("to_degrees"; args, callback) # returns 1 if error
end
    

"""
    to_radians(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Converts a raster from degrees to radians.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function to_radians(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("to_radians"; args, callback) # returns 1 if error
end
    

"""
    trend_surface(wbt_info::WhiteboxTools = wbt_info; i, output, order=1, callback::Union{Nothing,Function}=nothing)
Estimates the trend surface of an input raster file.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `order`: Polynomial order (1 to 10). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function trend_surface(wbt_info::WhiteboxTools = wbt_info; i, output, order=1, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    push!(args, "--order=" * string(order))
    return run_tool("trend_surface"; args, callback) # returns 1 if error
end
    

"""
    trend_surface_vector_points(wbt_info::WhiteboxTools = wbt_info; i, field, output, cell_size, order=1, callback::Union{Nothing,Function}=nothing)
Estimates a trend surface from vector points.
# Arguments
- `i`: Input vector Points file. 
- `field`: Input field name in attribute table. 
- `output`: Output raster file. 
- `order`: Polynomial order (1 to 10). 
- `cell_size`: Optionally specified cell size of output raster. Not used when base raster is specified. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function trend_surface_vector_points(wbt_info::WhiteboxTools = wbt_info; i, field, output, cell_size, order=1, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--field=" * string(field))
    push!(args, "--output=" * string(output))
    push!(args, "--order=" * string(order))
    push!(args, "--cell_size=" * string(cell_size))
    return run_tool("trend_surface_vector_points"; args, callback) # returns 1 if error
end
    

"""
    truncate(wbt_info::WhiteboxTools = wbt_info; i, output, num_decimals=nothing, callback::Union{Nothing,Function}=nothing)
Truncates the values in a raster to the desired number of decimal places.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `num_decimals`: Number of decimals left after truncation (default is zero). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function truncate(wbt_info::WhiteboxTools = wbt_info; i, output, num_decimals=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    if isnothing(num_decimals) === false
        push!(args, "--num_decimals=" * string(num_decimals))
    end
    return run_tool("truncate"; args, callback) # returns 1 if error
end
    

"""
    turning_bands_simulation(wbt_info::WhiteboxTools = wbt_info; base, output, range, iterations=1000, callback::Union{Nothing,Function}=nothing)
Creates an image containing random values based on a turning-bands simulation.
# Arguments
- `base`: Input base raster file. 
- `output`: Output file. 
- `range`: The field's range, in xy-units, related to the extent of spatial autocorrelation. 
- `iterations`: The number of iterations. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function turning_bands_simulation(wbt_info::WhiteboxTools = wbt_info; base, output, range, iterations=1000, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--base=" * string(base))
    push!(args, "--output=" * string(output))
    push!(args, "--range=" * string(range))
    push!(args, "--iterations=" * string(iterations))
    return run_tool("turning_bands_simulation"; args, callback) # returns 1 if error
end
    

"""
    two_sample_ks_test(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, num_samples=nothing, callback::Union{Nothing,Function}=nothing)
Performs a 2-sample K-S test for significant differences on two input rasters.
# Arguments
- `input1`: First input raster file. 
- `input2`: Second input raster file. 
- `output`: Output HTML file. 
- `num_samples`: Number of samples. Leave blank to use whole image. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function two_sample_ks_test(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, num_samples=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    if isnothing(num_samples) === false
        push!(args, "--num_samples=" * string(num_samples))
    end
    return run_tool("two_sample_ks_test"; args, callback) # returns 1 if error
end
    

"""
    wilcoxon_signed_rank_test(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, num_samples=nothing, callback::Union{Nothing,Function}=nothing)
Performs a 2-sample K-S test for significant differences on two input rasters.
# Arguments
- `input1`: First input raster file. 
- `input2`: Second input raster file. 
- `output`: Output HTML file. 
- `num_samples`: Number of samples. Leave blank to use whole image. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function wilcoxon_signed_rank_test(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, num_samples=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    if isnothing(num_samples) === false
        push!(args, "--num_samples=" * string(num_samples))
    end
    return run_tool("wilcoxon_signed_rank_test"; args, callback) # returns 1 if error
end
    

"""
    xor(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
Performs a logical XOR operator on two Boolean raster images.
# Arguments
- `input1`: Input raster file. 
- `input2`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function xor(wbt_info::WhiteboxTools = wbt_info; input1, input2, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input1=" * string(input1))
    push!(args, "--input2=" * string(input2))
    push!(args, "--output=" * string(output))
    return run_tool("xor"; args, callback) # returns 1 if error
end
    

"""
    z_scores(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
Standardizes the values in an input raster by converting to z-scores.
# Arguments
- `i`: Input raster file. 
- `output`: Output raster file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function z_scores(wbt_info::WhiteboxTools = wbt_info; i, output, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--output=" * string(output))
    return run_tool("z_scores"; args, callback) # returns 1 if error
end
    

"""
    zonal_statistics(wbt_info::WhiteboxTools = wbt_info; i, features, output=nothing, stat="mean", out_table=nothing, callback::Union{Nothing,Function}=nothing)
Extracts descriptive statistics for a group of patches in a raster.
# Arguments
- `i`: Input data raster file. 
- `features`: Input feature definition raster file. 
- `output`: Output raster file. 
- `stat`: Statistic to extract, including 'mean', 'median', 'minimum', 'maximum', 'range', 'standard deviation', and 'total'. 
- `out_table`: Output HTML Table file. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function zonal_statistics(wbt_info::WhiteboxTools = wbt_info; i, features, output=nothing, stat="mean", out_table=nothing, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--input=" * string(i))
    push!(args, "--features=" * string(features))
    if isnothing(output) === false
        push!(args, "--output=" * string(output))
    end
    push!(args, "--stat=" * string(stat))
    if isnothing(out_table) === false
        push!(args, "--out_table=" * string(out_table))
    end
    return run_tool("zonal_statistics"; args, callback) # returns 1 if error
end
    

###########################
# Stream Network Analysis #
###########################

"""
    distance_to_outlet(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Calculates the distance of stream grid cells to the channel network outlet cell.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function distance_to_outlet(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("distance_to_outlet"; args, callback) # returns 1 if error
end
    

"""
    extract_streams(wbt_info::WhiteboxTools = wbt_info; flow_accum, output, threshold, zero_background=false, callback::Union{Nothing,Function}=nothing)
Extracts stream grid cells from a flow accumulation raster.
# Arguments
- `flow_accum`: Input raster D8 flow accumulation file. 
- `output`: Output raster file. 
- `threshold`: Threshold in flow accumulation values for channelization. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function extract_streams(wbt_info::WhiteboxTools = wbt_info; flow_accum, output, threshold, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--flow_accum=" * string(flow_accum))
    push!(args, "--output=" * string(output))
    push!(args, "--threshold=" * string(threshold))
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("extract_streams"; args, callback) # returns 1 if error
end
    

"""
    extract_valleys(wbt_info::WhiteboxTools = wbt_info; dem, output, variant="LQ", line_thin=true, filter=5, callback::Union{Nothing,Function}=nothing)
Identifies potential valley bottom grid cells based on local topolography alone.
# Arguments
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `variant`: Options include 'LQ' (lower quartile), 'JandR' (Johnston and Rosenfeld), and 'PandD' (Peucker and Douglas); default is 'LQ'. 
- `line_thin`: Optional flag indicating whether post-processing line-thinning should be performed. 
- `filter`: Optional argument (only used when variant='lq') providing the filter size, in grid cells, used for lq-filtering (default is 5). 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function extract_valleys(wbt_info::WhiteboxTools = wbt_info; dem, output, variant="LQ", line_thin=true, filter=5, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    push!(args, "--variant=" * string(variant))
    if line_thin === true
        push!(args, "--line_thin")
    end
    push!(args, "--filter=" * string(filter))
    return run_tool("extract_valleys"; args, callback) # returns 1 if error
end
    

"""
    farthest_channel_head(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Calculates the distance to the furthest upstream channel head for each stream cell.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function farthest_channel_head(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("farthest_channel_head"; args, callback) # returns 1 if error
end
    

"""
    find_main_stem(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Finds the main stem, based on stream lengths, of each stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function find_main_stem(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("find_main_stem"; args, callback) # returns 1 if error
end
    

"""
    hack_stream_order(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Assigns the Hack stream order to each tributary in a stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function hack_stream_order(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("hack_stream_order"; args, callback) # returns 1 if error
end
    

"""
    horton_stream_order(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Assigns the Horton stream order to each tributary in a stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function horton_stream_order(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("horton_stream_order"; args, callback) # returns 1 if error
end
    

"""
    length_of_upstream_channels(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Calculates the total length of channels upstream.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function length_of_upstream_channels(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("length_of_upstream_channels"; args, callback) # returns 1 if error
end
    

"""
    long_profile(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, dem, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Plots the stream longitudinal profiles for one or more rivers.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `dem`: Input raster DEM file. 
- `output`: Output HTML file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function long_profile(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, dem, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("long_profile"; args, callback) # returns 1 if error
end
    

"""
    long_profile_from_points(wbt_info::WhiteboxTools = wbt_info; d8_pntr, points, dem, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Plots the longitudinal profiles from flow-paths initiating from a set of vector points.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `points`: Input vector points file. 
- `dem`: Input raster DEM file. 
- `output`: Output HTML file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function long_profile_from_points(wbt_info::WhiteboxTools = wbt_info; d8_pntr, points, dem, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--points=" * string(points))
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("long_profile_from_points"; args, callback) # returns 1 if error
end
    

"""
    raster_streams_to_vector(wbt_info::WhiteboxTools = wbt_info; streams, d8_pntr, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Converts a raster stream file into a vector file.
# Arguments
- `streams`: Input raster streams file. 
- `d8_pntr`: Input raster D8 pointer file. 
- `output`: Output vector file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function raster_streams_to_vector(wbt_info::WhiteboxTools = wbt_info; streams, d8_pntr, output, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--streams=" * string(streams))
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("raster_streams_to_vector"; args, callback) # returns 1 if error
end
    

"""
    rasterize_streams(wbt_info::WhiteboxTools = wbt_info; streams, base, output, nodata=true, feature_id=false, callback::Union{Nothing,Function}=nothing)
Rasterizes vector streams based on Lindsay (2016) method.
# Arguments
- `streams`: Input vector streams file. 
- `base`: Input base raster file. 
- `output`: Output raster file. 
- `nodata`: Use NoData value for background?. 
- `feature_id`: Use feature number as output value?. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function rasterize_streams(wbt_info::WhiteboxTools = wbt_info; streams, base, output, nodata=true, feature_id=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--streams=" * string(streams))
    push!(args, "--base=" * string(base))
    push!(args, "--output=" * string(output))
    if nodata === true
        push!(args, "--nodata")
    end
    if feature_id === true
        push!(args, "--feature_id")
    end
    return run_tool("rasterize_streams"; args, callback) # returns 1 if error
end
    

"""
    remove_short_streams(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, min_length, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
Removes short first-order streams from a stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `min_length`: Minimum tributary length (in map units) used for network pruning. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function remove_short_streams(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, min_length, esri_pntr=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    push!(args, "--min_length=" * string(min_length))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    return run_tool("remove_short_streams"; args, callback) # returns 1 if error
end
    

"""
    shreve_stream_magnitude(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Assigns the Shreve stream magnitude to each link in a stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function shreve_stream_magnitude(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("shreve_stream_magnitude"; args, callback) # returns 1 if error
end
    

"""
    strahler_stream_order(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Assigns the Strahler stream order to each link in a stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function strahler_stream_order(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("strahler_stream_order"; args, callback) # returns 1 if error
end
    

"""
    stream_link_class(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Identifies the exterior/interior links and nodes in a stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function stream_link_class(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("stream_link_class"; args, callback) # returns 1 if error
end
    

"""
    stream_link_identifier(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Assigns a unique identifier to each link in a stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function stream_link_identifier(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("stream_link_identifier"; args, callback) # returns 1 if error
end
    

"""
    stream_link_length(wbt_info::WhiteboxTools = wbt_info; d8_pntr, linkid, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Estimates the length of each link (or tributary) in a stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `linkid`: Input raster streams link ID (or tributary ID) file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function stream_link_length(wbt_info::WhiteboxTools = wbt_info; d8_pntr, linkid, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--linkid=" * string(linkid))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("stream_link_length"; args, callback) # returns 1 if error
end
    

"""
    stream_link_slope(wbt_info::WhiteboxTools = wbt_info; d8_pntr, linkid, dem, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Estimates the average slope of each link (or tributary) in a stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `linkid`: Input raster streams link ID (or tributary ID) file. 
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function stream_link_slope(wbt_info::WhiteboxTools = wbt_info; d8_pntr, linkid, dem, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--linkid=" * string(linkid))
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("stream_link_slope"; args, callback) # returns 1 if error
end
    

"""
    stream_slope_continuous(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, dem, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Estimates the slope of each grid cell in a stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `dem`: Input raster DEM file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function stream_slope_continuous(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, dem, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--dem=" * string(dem))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("stream_slope_continuous"; args, callback) # returns 1 if error
end
    

"""
    topological_stream_order(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Assigns each link in a stream network its topological order.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function topological_stream_order(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("topological_stream_order"; args, callback) # returns 1 if error
end
    

"""
    tributary_identifier(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
Assigns a unique identifier to each tributary in a stream network.
# Arguments
- `d8_pntr`: Input raster D8 pointer file. 
- `streams`: Input raster streams file. 
- `output`: Output raster file. 
- `esri_pntr`: D8 pointer uses the ESRI style scheme. 
- `zero_background`: Flag indicating whether a background value of zero should be used. 
- `callback::Union{Nothing,Function}`: Custom function for handling tool text outputs.
"""
function tributary_identifier(wbt_info::WhiteboxTools = wbt_info; d8_pntr, streams, output, esri_pntr=false, zero_background=false, callback::Union{Nothing,Function}=nothing)
    args = []
    push!(args, "--d8_pntr=" * string(d8_pntr))
    push!(args, "--streams=" * string(streams))
    push!(args, "--output=" * string(output))
    if esri_pntr === true
        push!(args, "--esri_pntr")
    end
    if zero_background === true
        push!(args, "--zero_background")
    end
    return run_tool("tributary_identifier"; args, callback) # returns 1 if error
end
    
